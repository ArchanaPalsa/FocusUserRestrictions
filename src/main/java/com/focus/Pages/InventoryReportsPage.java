/*package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.testautomationguru.utility.PDFUtil;

public class InventoryReportsPage extends BaseEngine 
{
	//Home Menu
	@FindBy (xpath="//*[@id='1']/div/span")
    public static WebElement homeMenu;
	
        //Masters Menu	
		@FindBy (xpath="//a[@id='1000']//span[contains(text(),'Masters')]")
	    public static WebElement mastersMenu;
		
		    //Accounts 
			@FindBy (xpath="//a[@id='1104']//span[contains(text(),'Account')]")
			public static WebElement accounts;
			
				//Accounts Title
				@FindBy (xpath="//span[@id='spnHeaderText']")
				public static WebElement accountsTitle;
		
				//Master Main Header Fields		
				@FindBy(xpath="//i[@class='icon-font6 icon-new']")
				public static WebElement masterNewBtn;
					
				@FindBy(xpath="//i[@class='icon-font6 icon-add-group']")
				public static WebElement masterAddGroupBtn; 
				 
				@FindBy(xpath="//i[@class='icon-font6 icon-edit']")
				public static WebElement masterEditBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-clone']")
				public static WebElement masterCloneBtn; 
		
				@FindBy(xpath="//i[@class='icon-properties icon-font6']")
				public static WebElement masterPropertiesBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-delete']")
				public static WebElement masterDeleteBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-group']")
				public static WebElement masterGroupBtn; 
				
				@FindBy(xpath="//*[@id='toggle_ribbon']")
				public static WebElement masterRibbonToExpandOptions; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-delete-all']")
				public static WebElement masterDeleteAllBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-closed-account']")
				public static WebElement masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-open-close-account']")
				public static WebElement masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-import']")
				public static WebElement masterAdvanceMasterImportORExportBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-info']")
				public static WebElement masterAuthorInfoBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-up-arrow']")
				public static WebElement masterMoveUpBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-down-arrow']")
				public static WebElement masterMoveDownBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-sort']")
				public static WebElement masterSortBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-mass-update']")
				public static WebElement masterMassUpdateBtn; 
		
				@FindBy(xpath="//a[@class='lSNext']")
				public static WebElement masterRibbonControlNextBtn; 
				
				@FindBy(xpath="//*[@id='btnXMLImport']")
				public static WebElement masterImportFromXmlBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-xmlexport']")
				public static WebElement masterExportFormatToXmlBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
				public static WebElement masterCustamizemasterBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-options']")
				public static WebElement masterCustamizeViewBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-tree']")
				public static WebElement mastercustamizeTreeBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-stock-ledger']")
				public static WebElement masterLedgerBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-financial-1']")
				public static WebElement masterManageCreditBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-department-appropriation']")
				public static WebElement masterDepartmentAppropriationBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-budget']")
				public static WebElement masterBudgetBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-backtrack']")
				public static WebElement masterBackTrackBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-transfer']")
				public static WebElement masterTranferBtn; 
		
				@FindBy(xpath="//*[@id='btnNewSets']")
				public static WebElement masterNewSetBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-modifier']")
				public static WebElement masterModifierBtn; 
		
				@FindBy(xpath="//*[@id='btnSetType']")
				public static WebElement masterSetTypeBtn; 
		
				@FindBy(xpath="//i[@class='icon-convert icon-font6']")
				public static WebElement masterUnitConversionBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-alternate-product-1']")
				public static WebElement masterAlternateItemBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-related-product']")
				public static WebElement masterRelatedItemBtn; 
		
				@FindBy(xpath="//i[@class='icon-font6 icon-stock-ledger']")
				public static WebElement masterStockLedgerBtn; 
		




		//Master Left panel----TreeID-----Elements

		@FindBy(xpath="//*[@id='iTreeId']")
		public static WebElement masterTreeIdDropdown; 

		@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/button/span")
		public static WebElement masterTreeIDToggleBtn; 
		                        
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[1]/a")
				public static WebElement masterTreeIDToggle_CreateTreeBtn; 
				
							@FindBy(xpath="//h4[contains(text(),'Create Tree')]")
							public static WebElement treeID_CreateTreeLabel; 
							
							@FindBy(xpath="//*[@id='btnCancel']")
							public static WebElement treeID_CloseBtn; 
							
							@FindBy(xpath="//input[@id='txtTreeName']")
							public static WebElement treeID_TreeTxt; 
							
							@FindBy(xpath="//input[@id='rbtManual']")
							public static WebElement treeID_ManualRadioBtn; 
							
							@FindBy(xpath="//input[@id='rbtAuto']")
							public static WebElement treeID_AutoRadioBtn; 
							
							@FindBy(xpath="//select[@id='cmbTreeList']")
							public static WebElement treeID_SelectTreeDropdown; 
							
							@FindBy(xpath="//input[@id='chkIncludeGroup']")
							public static WebElement treeID_IncludeGroupsCheckBox; 
							
							@FindBy(xpath="//input[@id='chkAddLeaveAtZeroLevel']")
							public static WebElement treeID_AddLeafAlwaysAtTheZerolevelOnCreationCheckbox; 
							
							@FindBy(xpath="//*[@id='MasterTreeTable_SelectFields']")
							public static WebElement treeID_GridFirstSelectFields; 
							
							@FindBy(xpath="//*[@id='MasterTreeTable_col_2-1']")
							public static WebElement treeID_GridSecondSelectFields; 
							
							@FindBy(xpath="//input[@id='chkAutoGroup']")
							public static WebElement treeID_AlwaysAutoGroupOnCreationCheckbox; 
							
							@FindBy(xpath="//input[@id='chkAlwaysSorted']")
							public static WebElement treeID_AlwaysSortedCheckbox; 
							
							@FindBy(xpath="//*[@id='btnOk']")
							public static WebElement treeID_PopOkBtn; 
							
							@FindBy(xpath="//*[@id='btnCancel']")
							public static WebElement treeID_PopCancelBtn; 
				
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[2]")
				public static WebElement masterTreeIDToggle_EditBtn; 
				
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[3]")
				public static WebElement masterTreeIDToggle_DeleteBtn; 
				
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[1]/div/div/ul/li[4]")
				public static WebElement masterTreeIDToggle_setDefaultBtn;


		//TreeViewID----->Elements
				
		@FindBy(xpath="//select[@id='iTreeViewId']")
		public static WebElement masterTreeViewIDDropdown; 

		@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/button/span")
		public static WebElement masterTreeViewIDToggleBtn;

				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[1]")
				public static WebElement masterTreeViewIdCreateViewBtn; 
				
								@FindBy(xpath="//*[@id='createViewDiv']/div/div[1]/div[1]/h4")
								public static WebElement CreateView_Label; 
				
				
								@FindBy(xpath="//*[@id='btnCancel']/i")
								public static WebElement CreateView_CloseBtn; 
				
								@FindBy(xpath="//*[@id='ctrlCreateMasterViewH']")
								public static WebElement CreateView_CreateViewTxt; 
				
									@FindBy(xpath="//*[@id='ctrlCreateMasterViewH_input_image']/span")
									public static WebElement CreateView_ExpansionBtn; 
					
									@FindBy(xpath="//*[@id='ctrlCreateMasterViewH_input_settings']/span")
									public static WebElement CreateView_SettingBtn; 
					
									@FindBy(xpath="//input[@id='chkAvailbleonMobileApp']")
									public static WebElement CreateView_AvailbleonMobileAppCheckbox; 
					
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
									public static WebElement CreateView_Conjuction1Dropdown; 
					
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[2]/select")
									public static WebElement CreateView_AccountType1Dropdown; 
									                      
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[3]/select")
									public static WebElement CreateView_EqaulTo1Dropdown; 
									
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[4]/select")
									public static WebElement CreateView_Value1Dropdown; 
					
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[5]/input")
									public static WebElement CreateView_Customer1Dropdown; 
									
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[6]/span")
									public static WebElement CreateView_CloseFirstrow; 
												
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[7]/span")
									public static WebElement CreateView_AddRowBtn; 				
									
									////Creation For Second Row
									
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
									public static WebElement CreateView_Conjuction2Dropdown; 
					
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[2]/select")
									public static WebElement CreateView_AccountType2Dropdown; 
									                      
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
									public static WebElement CreateView_EqaulTo2Dropdown; 
									
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
									public static WebElement CreateView_Value2Dropdown; 
					
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
									public static WebElement CreateView_Customer2Dropdown; 
									
									@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
									public static WebElement CreateView_CloseSecondrow; 
					
								@FindBy(xpath="//button[@id='btnMasterViewDelete']")
								public static WebElement CreateView_DeleteBtn; 
				
								@FindBy(xpath="//button[@id='btnSave']")
								public static WebElement CreateView_SaveBtn; 
				
								@FindBy(xpath="//*[@id='btnCancel']")
								public static WebElement CreateView_CancelBtn; 
				
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[2]/a")
				public static WebElement masterTreeeViewIdEditBtn; 
				
				@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[3]/a")
				public static WebElement masterTreeViewIdDeleteBtn; 
				
			@FindBy(xpath="//div[@id='divTreeMenu']")
			public static WebElement masterTreeDisplayMenuAccountGroups; 		
				
		@FindBy(xpath="//*[@id='oncheckaccorderan']")
		public static WebElement masterOptionToHideAccountsGroupTree; /////To hide TreeId and TreeViewId Elements From HomeScreen

		@FindBy(xpath="//*[@id='0']/a")
		public static WebElement account;
		
		@FindBy(xpath="//*[@id='18']/a[1]")
		public static WebElement accountAssestsGroup;
		
		@FindBy(xpath="//*[@id='17']/a[2]")
		public static WebElement accountFixedAssestsGroup;
		
		@FindBy(xpath="//*[@id='23']/a[2]")
		public static WebElement accountCurrentAssetsGroup;

		@FindBy(xpath="//*[@id='8']/a[2]")
		public static WebElement accountCAshAndBankGroup;
		
		@FindBy(xpath="//*[@id='13']/a[2]")
		public static WebElement accountInventoriesGroup;
		
		@FindBy(xpath="//*[@id='22']/a[2]")
		public static WebElement accountAccountsReceivableGroup;
		
		@FindBy(xpath="//a[@class='clsMasterName'][contains(text(),'Customer Update Group')]")
		public static WebElement accountAccountsReceivableCustomerUpdateGroup;
		
		@FindBy(xpath="//*[@id='72']/a[2]")
		public static WebElement accountInvestmentsGroup;
		
		@FindBy(xpath="//*[@id='25']/a[2]")
		public static WebElement accountExpensesGroup;
		
		@FindBy(xpath="//*[@id='24']/a[2]")
		public static WebElement accountDirectExpensesGroup;
		
		@FindBy(xpath="//*[@id='73']/a[2]")
		public static WebElement accountIndirectExpensesGroup;
		
		@FindBy(xpath="//*[@id='54']/a[2]")
		public static WebElement accountAdministrativeExpensesGroup;
		
		@FindBy(xpath="//*[@id='60']/a[2]")
		public static WebElement accountEmployeeBenefitsGroup;
		
		@FindBy(xpath="//*[@id='64']/a[2]")
		public static WebElement accountFinancialChargesGroup;
		
		@FindBy(xpath="//*[@id='69']/a[2]")
		public static WebElement accountGainAndLossGroup;
		
		@FindBy(xpath="//*[@id='26']/a[2]")
		public static WebElement accountControlAccountsGroup;
		
		@FindBy(xpath="//*[@id='29']/a[2]")
		public static WebElement accountRevenueGroup;

		@FindBy(xpath="//*[@id='28']/a[2]")
		public static WebElement accountSalesGroup;
		
		@FindBy(xpath="//*[@id='33']/a[2]")
		public static WebElement accountEqitiesGroup;
		
		@FindBy(xpath="//*[@id='32']/a[2]")
		public static WebElement accountCapitalGroup;
		
		@FindBy(xpath="//*[@id='39']/a[2]")
		public static WebElement accountLiabilitiesGroup;
		
		@FindBy(xpath="//*[@id='38']/a[2]")
		public static WebElement accountLoanAndBorrowingGroup;
		
		@FindBy(xpath="//*[@id='37']/a[2]")
		public static WebElement accountLoansGroup;
		
		@FindBy(xpath="//*[@id='42']/a[2]")
		public static WebElement accountAccruedLiabilitiesGroup;
		
		@FindBy(xpath="//*[@id='45']/a[2]")
		public static WebElement accountTradePayableGroup;
		
		@FindBy(xpath="//*[@id='48']/a[2]")
		public static WebElement accountProvisionsGroup;
		
		//Header Elements of Master MainLanding

		@FindBy(xpath="//*[@id='txtsrch-term']")
		public static WebElement masterSearchTxt; 

		@FindBy(xpath="//*[@id='btnSearchAcc1']/i")
		public static WebElement masterSearchBtn; 

			@FindBy(xpath="//a[contains(text(),'Search on')]")
			public static WebElement masterSearchTxtBtn_SearchOnBtn; 

				@FindBy(xpath="//label[@class='form-group']")
				public static WebElement searchOn_SelectFilterLabel; 
				
				@FindBy(xpath="//select[@id='ddlSelectFilter']")
				public static WebElement searchOn_SelectFilterDropdown; 
				
				@FindBy(xpath="//input[@id='chkSearchSelectAll']")
				public static WebElement searchOn_SelectAllCheckBox; 
				
				@FindBy(xpath="//*[@id='0']")
				public static WebElement searchOn_NameCheckbox; 
				
				@FindBy(xpath="//input[@id='1']")
				public static WebElement searchOn_AliasCheckbox; 
				
				@FindBy(xpath="//input[@id='2']")
				public static WebElement searchOn_COdeCheckbox; 
				
				@FindBy(xpath="//input[@id='3']")
				public static WebElement searchOn_AccountTypeCheckbox; 
				
				@FindBy(xpath="//input[@id='4']")
				public static WebElement searchOn_CreditLimitCheckbox; 
				
				@FindBy(xpath="//input[@id='5']")
				public static WebElement searchOn_CreditDaysCheckbox; 
				
				@FindBy(xpath="//input[@id='6']")
				public static WebElement searchOn_CreatedByCheckbox; 
				
				@FindBy(xpath="//input[@id='7']")
				public static WebElement searchOn_ModifiedByCheckbox; 
				
				@FindBy(xpath="//input[@id='8']")
				public static WebElement searchOn_CreatedDateCheckbox; 
				
				@FindBy(xpath="//input[@id='9']")
				public static WebElement searchOn_ModifiedDate; 
				
				@FindBy(xpath="//input[@id='10']")
				public static WebElement searchOn_AllowOtherCompaniesToViewTheRecordCheckbox; 
				
				@FindBy(xpath="//input[@id='11']")
				public static WebElement searchOn_SyscReceiverDateCheckbox; 
				
				@FindBy(xpath="//input[@id='12']")
				public static WebElement searchOn_EditingLocationCheckbox; 
				
				@FindBy(xpath="//input[@id='13']")
				public static WebElement searchOn_ChequeDiscountLimitCheckbox; 
				
				@FindBy(xpath="//input[@id='14']")
				public static WebElement searchOn_RateOfInterestCheckbox; 
				
				@FindBy(xpath="//input[@id='15']")
				public static WebElement searchOn_BankACCheckbox; 
				
				@FindBy(xpath="//input[@id='16']")
				public static WebElement searchOn_PDCDIscountedAC; 
				
				@FindBy(xpath="//input[@id='17']")
				public static WebElement searchOn_DebitCreditProposalCheckbox; 
				
				@FindBy(xpath="//input[@id='18']")
				public static WebElement searchOn_DebitCreditRequiredCheckbox; 
				
				@FindBy(xpath="//input[@id='19']")
				public static WebElement searchOn_ExchangeAdjustmentGainACCheckbox; 
				
				@FindBy(xpath="//input[@id='20']")
				public static WebElement searchOn_ExchangeAdjustmentLossACCheckbox; 
				
				@FindBy(xpath="//input[@id='21']")
				public static WebElement searchOn_PrimaryAccountCheckbox; 
				
				@FindBy(xpath="//input[@id='22']")
				public static WebElement searchOn_DefaultCurrencyCheckbox; 
				
				@FindBy(xpath="//input[@id='23']")
				public static WebElement searchOn_ConsolidationMethodCheckbox; 
				
				@FindBy(xpath="//input[@id='24']")
				public static WebElement searchOn_PaymentTermsCheckbox; 
				
				@FindBy(xpath="//input[@id='25']")
				public static WebElement searchOn_RemainderTermsCheckbox; 
				
				@FindBy(xpath="//input[@id='26']")
				public static WebElement searchOn_FinanceChargeTermsCheckbox; 
				
				@FindBy(xpath="//input[@id='27']")
				public static WebElement searchOn_AddressCheckbox; 
				
				@FindBy(xpath="//input[@id='28']")
				public static WebElement searchOn_City1Checkbox; 
				
				@FindBy(xpath="//input[@id='29']")
				public static WebElement searchOn_Pin1Checkbox; 
				
				@FindBy(xpath="//input[@id='30']")
				public static WebElement searchOn_DeliveryAddreddCheckbox; 
				
				@FindBy(xpath="//input[@id='31']")
				public static WebElement searchOn_City2Checkbox; 
				
				@FindBy(xpath="//input[@id='32']")
				public static WebElement searchOn_Pin2Checkbox; 
				
				@FindBy(xpath="//input[@id='33']")
				public static WebElement searchOn_SendEmailToCustomerCheckbox; 
				
				@FindBy(xpath="//input[@id='34']")
				public static WebElement searchOn_AllowCustomerPortalCheckbox; 
				
				@FindBy(xpath="//input[@id='35']")
				public static WebElement searchOn_EmailCheckbox; 
				
				@FindBy(xpath="//input[@id='36']")
				public static WebElement searchOn_PasswordCheckbox; 
				
				@FindBy(xpath="//input[@id='37']")
				public static WebElement searchOn_TelNOCheckbox; 
				
				@FindBy(xpath="//input[@id='38']")
				public static WebElement searchOn_FaxNoCheckbox; 
				
				@FindBy(xpath="//input[@id='39']")
				public static WebElement searchOn_BankAccountNameCheckbox; 
				
				@FindBy(xpath="//input[@id='40']")
				public static WebElement searchOn_BankAccountNumberCheckbox; 
				
				@FindBy(xpath="//input[@id='41']")
				public static WebElement searchOn_IFSCCodeCheckbox; 
				
				@FindBy(xpath="//input[@id='42']")
				public static WebElement searchOn_PaymentTypeCheckbox; 
				
				@FindBy(xpath="//input[@id='43']")
				public static WebElement searchOn_FinanceEmailCheckbox; 
				
				@FindBy(xpath="//input[@id='44']")
				public static WebElement searchOn_PortalEmailCheckbox; 
				
				@FindBy(xpath="//input[@id='45']")
				public static WebElement searchOn_NetbalanceCheckbox; 
				
				@FindBy(xpath="//input[@id='46']")
				public static WebElement searchOn_DRBalanceCheckbox; 
				
				@FindBy(xpath="//input[@id='47']")
				public static WebElement searchOn_CRbalanceCheckbox; 
				
				@FindBy(xpath="//*[@id='divSearchMenu']/div[4]/button")
				public static WebElement searchOn_OkBtn;
						
			@FindBy(xpath="//a[contains(text(),'Advance Search')]")
			public static WebElement masterSearchTxtBtn_AdvanceSearchBtn; 

  
	            //First Row Fields

				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[1]/select")
				public static WebElement advanceSearch_Conjuction1Dropdown;
				
				@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
				public static WebElement advanceSearch_SelectField1Dropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[3]/select")
				public static WebElement advanceSearch_SelectOperator1Dropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[4]/select")
				public static WebElement advanceSearch_CompareWith1Dropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[5]/input")
				public static WebElement advanceSearch_Value1Txt;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[6]/span")
				public static WebElement advanceSearch_CloseRow1Btn;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[7]/span")
				public static WebElement advanceSearch_AddRowBtn;
				
			    //Second Row Fields
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[1]/select")
				public static WebElement advanceSearch_ConjuctionDropdown;
				
				@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
				public static WebElement advanceSearch_SelectFieldDropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
				public static WebElement advanceSearch_SelectOperatorDropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
				public static WebElement advanceSearch_CompareWithDropdown;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
				public static WebElement advanceSearch_ValueTxt;
				
				@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
				public static WebElement advanceSearch_CloseRow2Btn;
						
				@FindBy(xpath="//*[@id='divCreateNewTreeModalBody']/div[2]/div[2]/input")
				public static WebElement advanceSearch_GenerateQueryBtn;
				
				@FindBy(xpath="//div[@id='divStrQuery']")
				public static WebElement advanceSearch_QueryDescriptionTxt;
				
				@FindBy(xpath="//button[@id='btnOk']")
				public static WebElement advanceSearch_OkBtn;
				
				@FindBy(xpath="//*[@id='btnCancel']")
				public static WebElement advanceSearch_CancelBtn;
				
				@FindBy(xpath="//*[@id='btnCancel']/i")///Both Has Same ID But But Different in Fields 
				public static WebElement advanceSearch_CloseBtn;							

		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		public static WebElement mastercmbMasterTxt; 

		@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_image']/span")
		public static WebElement masterCmbMasterExpansionBtn; 

			@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_settings']/span")
			public static WebElement masterCumMasterSettingBtn; 
						
				@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_container']")
				public static WebElement masterCumMaster_Pop_sNameTxt;
				
				@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[1]")
				public static WebElement masterCumMaster_StandardFieldsBtn;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_heading']")
					public static WebElement masterCumMaster_PopCustomizeDispalyColumnsLabel; 		
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_list']")
					public static WebElement masterCumMaster_Pop_StandardFields_Filedsdropdown;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_header']")
					public static WebElement masterCumMaster_Pop_StandardFields_HeaderTxt;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_alignment']")
					public static WebElement masterCumMaster_Pop_StandardFields_Allignmentdropdown;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_width']")
					public static WebElement masterCumMaster_Pop_StandardFields_WidthTxt;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
					public static WebElement masterCumMaster_Pop_StandardFields_OkBtn;
					
					@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
					public static WebElement masterCumMaster_Pop_StandardFields_CancelBtn;
					
			@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[2]")
			public static WebElement masterCumMaster_Pop_DeleteColumnBtn;
			
			@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
			public static WebElement masterCumMaster_Pop_OkBtn;
			
			@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
			public static WebElement masterCumMaster_Pop_CancelBtn;
					

		@FindBy(xpath="//*[@id='li_moveup']/div/div[1]/a[1]/span")
		public static WebElement masterMoveTheSelectionToNextBookMarkBtn; 

		@FindBy(xpath="//span[@class='icon-font6 icon-bookmarkdown theme_icon-color']")
		public static WebElement masterMoveTheSelectionToPrevoiusBookmarkBtn; 

		@FindBy(xpath="//span[@class='theme_icon-color icon-font6 icon-show-all-records']")
		public static WebElement masterShowAllRecordsBtn; 

		@FindBy(xpath="//span[@class='icon-font6 icon-missmatched-entries theme_icon-color']")
		public static WebElement masterShowAllUnauthorisedRecords; 


		@FindBy(xpath="//span[@class='icon-font6 icon-closed-records theme_icon-color']")
		public static WebElement masterShowAllClosedRecordsBtn; 

		@FindBy(xpath="//span[@class='icon-font6 icon-external-module theme_icon-color']")
		public static WebElement masterAutoAdjustColoumnsBtn; 

		@FindBy(xpath="//input[@id='chkRetainSelection']")
		public static WebElement masterRetainSelectionCheckBox; 

		@FindBy(xpath="//*[@id='btnsideBar']")
		public static WebElement masterSideBarBtn; 

		//InfoPanel
		

		@FindBy(xpath="//label[contains(text(),'Info Panel')]")
		public static WebElement masterInfoPanelLabel; 

		@FindBy(xpath="//i[@class='icon-custamize theme_icon-color']")
		public static WebElement masterInfoPanelCustammizeBtn;


			@FindBy(xpath="//h4[contains(text(),'Customize InfoPanel')]")
			public static WebElement infoPanel_CustomizeInfoPanelLabel;
			
			@FindBy(xpath="//*[@id='Customize_AddNew_InfoPanel']/div[1]/span")
			public static WebElement infoPanel_PopAddBtn;
			
			@FindBy(xpath="//*[@id='Customize_RemoveOne_InfoPanel']/div[1]/span")
			public static WebElement infoPanel_PopRemoveBtn;
			
			@FindBy(xpath="//*[@id='btnShowPanelNames_CustomizeInfoPanel']/div/span")
			public static WebElement infoPanel_PopAllIcon;
			
			@FindBy(xpath="//*[@id='btnShowPanelDetails_CustomizeInfoPanel']/div/span")
			public static WebElement infoPanel_PopDetailsIcon;
			
			@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[1]/td[4]/i")
			public static WebElement infoPane_PopGridCreditHistoryAddBtn;
			
			@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[2]/td[4]/i")
			public static WebElement infoPane_PopGridAgingAnalysisAddBtn;
			
			@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[3]/td[4]/i")
			public static WebElement infoPane_PopGridAgingAnlaysisBaseAddBtn;
			
			@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[4]/td[4]/i")
			public static WebElement infoPane_PopGridAuthorizationAddBtn;
			
			@FindBy(xpath="//a[@class='Fbutton previous_link']")
			public static WebElement infoPane_PopDetailsPreviousBtn;
			
			@FindBy(xpath="//*[@id='page_navigation']/a[2]")
			public static WebElement infoPane_PopDeailsOneBtn;
			
			@FindBy(xpath="//*[@id='customize_InfoPanel_btnSave']")
			public static WebElement infoPane_PopDeatilsSaveBtn;
			
			@FindBy(xpath="//*[@id='customize_InfoPanel_btnCancel']")
			public static WebElement infoPane_PopDetailsCloseBtn;
			
			@FindBy(xpath="//*[@id='btnCancel']/i")
			public static WebElement infoPane_PopCloseBtn;


		@FindBy(xpath="//i[@id='id_InfoPanelEdit']")
		public static WebElement masterInfoPanelEditBtn;

		@FindBy(xpath="//i[@id='infopanelCloseButton']")
		public static WebElement masterInfoPanelCloseBtn;


		//////Grid Elements ---------->Body Field******************

		@FindBy(xpath="//th[2]//span[1]")
		public static WebElement masterGrid_Header_SelectTxt;

		@FindBy(xpath="//input[@id='liSelectAllMasters']")
		public static WebElement masterGridHeader_SelectAllRowsCheckBox;

		@FindBy(xpath="//section[@id='page_Content']//th[3]")
		public static WebElement masterGridHeader_MasterId;

		@FindBy(xpath="//section[@id='page_Content']//th[4]]")
		public static WebElement masterGridHeader_Name;
	
		@FindBy(xpath="//td[contains(text(),'ASSETS')]")
		public static WebElement masterAssets;
		
		@FindBy(xpath="//td[contains(text(),'EXPENSES')]")
		public static WebElement masterExpenses;
		
		@FindBy(xpath="//td[contains(text(),'CONTROL ACCOUNTS')]")
		public static WebElement masterControlAccounts;
		
		@FindBy(xpath="//td[contains(text(),'REVENUE')]")
		public static WebElement masterRevenue;
		
		@FindBy(xpath="//td[contains(text(),'EQUITIES')]")
		public static WebElement masterEquities;
	
		@FindBy(xpath="//td[contains(text(),'LIABILITIES')]")
		public static WebElement masterLiabilities;
		

		@FindBy(xpath="//section[@id='page_Content']//th[6]")
		public static WebElement masterGridHeader_ReorderLevel;

		@FindBy(xpath="//section[@id='page_Content']//th[7]")
		public static WebElement masterGridHeader_BinCapacity;

		@FindBy(xpath="//section[@id='page_Content']//th[8]")
		public static WebElement masterGridHeader_ISAttribute;

		@FindBy(xpath="//section[@id='page_Content']//th[9]")
		public static WebElement masterGridHeader_ProducyType;

		@FindBy(xpath="//th[contains(text(),'Valuation Method')]")
		public static WebElement masterGridHeader_ValuationMethod;

		@FindBy(xpath="//th[@class='OverFlowHidden text-center']//span[contains(text(),'No of decimals')]")
		public static WebElement masterGridHeader_NoOfDecimals;

		@FindBy(xpath="//section[@id='page_Content']//th[7]")
		public static WebElement masterGridHeader_RoundingType;
		
		@FindBy(xpath="//td[contains(text(),'Customer A')]")
		public static WebElement masterCustomerA;
		
		@FindBy(xpath="//td[contains(text(),'Customer B')]")
		public static WebElement masterCustomerB;
		
		@FindBy(xpath="//td[contains(text(),'Customer B')]")
		public static WebElement masterCustomerC;
		
		
		
		

		//Row Selecting


		@FindBy(xpath="//*[@id='lblnchecked']/input")
		public static WebElement masterGrid_SelectFirstRow;

		//Footer Fields
		@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[1]/div/input")
		public static WebElement masterFirstBtn;

		@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[2]/div/input")
		public static WebElement masterPreviousBtn;

		@FindBy(xpath="//*[@id='btn1']")
		public static WebElement masterOneBtn;

		@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[4]/div/input")
		public static WebElement masterNextBtn;

		@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[5]/div/input")
		public static WebElement masterEndBtn;
		
		
		//Accounts Creation Page 
		
		//Header tab Fields
		
		@FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
		public static WebElement headerGeneralTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
		public static WebElement headerAccountSettingTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
		public static WebElement headerDetailsTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
		public static WebElement headerPrintLayoutTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
		public static WebElement headerUnitsTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
		public static WebElement headerItemSettingsTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
		public static WebElement headerClassificationTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup4']/div/a")
		public static WebElement headerOtherDetailsTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup5']/div/a")
		public static WebElement headerReplenishmentTab;
		
		@FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
		public static WebElement headerOutletTab;
		
		
		
	    //Header Section Fields

		@FindBy(xpath="//*[@id='btnMasterSaveClick']")
		public static WebElement saveBtn;
		
		@FindBy(xpath="//i[@class='icon-font6 icon-close']")
		public static WebElement closeBtn;
		
	    //Edit option Fields
		
		@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
		public static WebElement editcloseBtn;
		
		@FindBy(xpath="//i[@class='icon-font6 icon-paste-clipboard']")
		public static WebElement pasteBtn;
		
		@FindBy(xpath="//button[@id='btnMasterClone']")
		public static WebElement editcloneBtn;
		
		@FindBy(xpath="//*[@id='btnMasterCopy']")
		public static WebElement copyBtn;
		
		//New General Elements
		//Name
		@FindBy(xpath="//input[@id='sName']")
		public static WebElement nameTxt;
		
		
		//Code
		@FindBy(xpath="//input[@id='sCode']")
		public static WebElement codeTxt;
		
	    //AccountType	
		@FindBy(xpath="//select[@id='iAccountType']")
		public static WebElement accountTypeDropdown;
		
		
		//CreditLimit
		@FindBy(xpath="//input[@id='fCreditLimit']")
		public static WebElement creditLimitTxt;

		//CreditDays
		@FindBy(xpath="//input[@id='iCreditDays']")
		public static WebElement creditdaysTxt;
		
		
		//ChequeDiscountLimit
		@FindBy(xpath="//input[@id='fChequeDiscountLimit']")
		public static WebElement chequeDiscountLimitTxt;
		
		
		//Rate Of Interest
		@FindBy(xpath="//input[@id='fRateofinterest']")
		public static WebElement rateofinterestTxt;
		
		
		//BankAccount
		@FindBy(xpath="//input[@id='iBankAc']")
		public static WebElement bankAccountTxt;
		
		@FindBy(xpath="//*[@id='iBankAc_input_image']/span")
		public static WebElement bankAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iBankAc_input_settings']/span")
		public static WebElement bankAccount_SettingBtn;

		
	//Setting Elements 
		
		//DebitCreditProposal
		@FindBy(xpath="//select[@id='iDebitCreditProposal']")
		public static WebElement debitCreditProposalDropdown;
		
		
		//DebitCreditRequired
		@FindBy(xpath="//select[@id='iDebitCreditRequired']")
		public static WebElement debitCreditRequiredDropdown;
		
		
		//ExchangeAdjustmentGainAC
		@FindBy(xpath="//input[@id='iExchangeAdjustmentGainAC']")
		public static WebElement exchangeAdjustmentGainACTxt;
		
		@FindBy(xpath="//*[@id='iExchangeAdjustmentGainAC_input_image']/span")
		public static WebElement exchangeAdjustmentGainAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iExchangeAdjustmentGainAC_input_settings']/span")
		public static WebElement exchangeAdjustmentGainAC_SettingBtn;
		
		
		//ExchangeAdjustmentLossAC
		@FindBy(xpath="//input[@id='iExchangeAdjustmentLossAC']")
		public static WebElement exchangeAdjustmentLossACTxt;
		
		@FindBy(xpath="//*[@id='iExchangeAdjustmentLossAC_input_image']/span")
		public static WebElement exchangeAdjustmentLossAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iExchangeAdjustmentLossAC_input_settings']/span")
		public static WebElement exchangeAdjustmentLossAC_SettingBtn;
		
		
		///PrimaryAccount
		@FindBy(xpath="//input[@id='iPrimaryAccount']")
		public static WebElement primaryAccountTxt;
		
		@FindBy(xpath="//*[@id='iPrimaryAccount_input_image']/span")
		public static WebElement primaryAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iPrimaryAccount_input_settings']/span")
		public static WebElement primaryAccount_SettingBtn;
		
		
		////DefaultCurrency
		@FindBy(xpath="//input[@id='iDefaultCurrency']")
		public static WebElement defaultCurrencyTxt;
		
		@FindBy(xpath="//*[@id='iDefaultCurrency_input_image']/span")
		public static WebElement defaultCurrency_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iDefaultCurrency_input_settings']/span")
		public static WebElement defaultCurrency_SettingBtn;
		
		
		
		///ConsolidationMethod
		@FindBy(xpath="//select[@id='iConsolidationMethod']")
		public static WebElement consolidationMethodDropdown;
		
		
		///PaymentTerms
		@FindBy(xpath="//input[@id='iPaymentTerms']")
		public static WebElement paymentTermstxt;
		
		@FindBy(xpath="//*[@id='iPaymentTerms_input_image']/span")
		public static WebElement paymentTerms_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iPaymentTerms_input_settings']/span")
		public static WebElement paymentTerms_SettingBtn;
		
		
		//ReminderTerms
		@FindBy(xpath="//input[@id='iReminderTerms']")
		public static WebElement reminderTermsTxt;
		
		@FindBy(xpath="//*[@id='iReminderTerms_input_image']/span")
		public static WebElement reminderTerms_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iReminderTerms_input_settings']/span")
		public static WebElement reminderTerms_SettingBtn;
		
		
		///FinanceChargeTerms
		@FindBy(xpath="//*[@id='iFinanceChargeTerms']")
		public static WebElement financeChargeTermsTxt;
		
		@FindBy(xpath="//*[@id='iFinanceChargeTerms_input_image']/span")
		public static WebElement financeChargeTerms_Expansion;
		
		@FindBy(xpath="//*[@id='iFinanceChargeTerms_input_settings']/span")
		public static WebElement financeChargeTerms_SettingBtn;
	
		
		//Details Elements


		//Address
		@FindBy(xpath="//textarea[@id='sAddress']")
		public static WebElement addressTxt;
		
		
		//City
		@FindBy(xpath="//input[@id='iCity']")
		public static WebElement cityTxt;
		
		@FindBy(xpath="//*[@id='iCity_input_image']/span")
		public static WebElement city_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iCity_input_settings']/span")
		public static WebElement city_SettingBtn;
	
		//DeliveryAddress
		@FindBy(xpath="//textarea[@id='sDeliveryAddress']")
		public static WebElement deliveryAddressTxt;
		
		//Pin
		@FindBy(xpath="//input[@id='sPin']")
		public static WebElement pinTxt;
		
		
		//City2 DeliveryCity (City As Second TextBox)
		@FindBy(xpath="//input[@id='iDeliveryCity']")
		public static WebElement city2Text;
		
		@FindBy(xpath="//*[@id='iDeliveryCity_input_image']/span")
		public static WebElement city2_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iDeliveryCity_input_settings']/span")
		public static WebElement city2_SettingBtn;
		
		
		
		////Pin---->Delivery pin***()Second Pin TxtBox
		@FindBy(xpath="//input[@id='sDeliveryPin']")
		public static WebElement pin2Txt;
		
		
		//Send Email
		@FindBy(xpath="//input[@id='bSendEmailtocustomer']")
		public static WebElement sendEmailCheckBox;
		
		//AllowCustomerPortal
		@FindBy(xpath="//input[@id='bAllowCustomerPortal']")
		public static WebElement allowCustomerPortalCheckBox;
		
		//SendEmail
		@FindBy(xpath="//input[@id='sEMail']")
		public static WebElement sendEmailTxt;
		
		//Password
		@FindBy(xpath="//input[@id='sPassword']")
		public static WebElement passwordTxt;
		
		///TelphoneNumber
		@FindBy(xpath="//input[@id='sTelNo']")
		public static WebElement telphoneNumberTxt;
		
		//FaxNo
		@FindBy(xpath="//input[@id='sFaxNo']")
		public static WebElement faxNoTxt;
		
		
		//PortalEmail
		@FindBy(xpath="//input[@id='sPortalEmail']")
		public static WebElement portalEmailTxt;
		
		
		/////Print Layout Elements	
		//Voucher Type
		@FindBy(xpath="//label[contains(text(),'Voucher Type')]")
		public static WebElement gridVoucherTypeTxt;
		
		@FindBy(xpath="//*[@id='iVoucherType_input_image']/span")
		public static WebElement gridVoucher_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iVoucherType_input_settings']/span")
		public static WebElement gridVoucher_SettingBtn;

		
		///////Print layout
		@FindBy(xpath="//label[contains(text(),'Print Layout')]")
		public static WebElement gridPrintLayoutTxt;

		@FindBy(xpath="//*[@id='iPrintLayout_input_image']/span")
		public static WebElement gridPrintLayout_ExpansionBtn;

		@FindBy(xpath="//*[@id='iPrintLayout_input_settings']/span")
		public static WebElement gridPrintLayout_SettingBtn;
		
		
		
		
		//Item General Elements
		
		
		@FindBy(xpath="//select[@id='iProductType']")
		public static WebElement itemTypeDropdown;
		
		@FindBy(xpath="//input[@id='fReorderLevel']")
		public static WebElement reorderLevelTxt;
		
		@FindBy(xpath="//input[@id='iCapacity']")
		public static WebElement binCapacityTxt;
		
		@FindBy(xpath="//input[@id='iColNo']")
		public static WebElement binColNoTxt;
		
		@FindBy(xpath="//select[@id='iValuationMethod']")
		public static WebElement valuationMethodDropdown;
		
		@FindBy(xpath="//input[@id='iCategory']")
		public static WebElement categoryTxt;
		
		@FindBy(xpath="//*[@id=iCategory_input_image']/span")
		public static WebElement category_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iCategory_input_settings']/span")
		public static WebElement category_SettingBtn;
		
		@FindBy(xpath="//select[@id='iProductMake']")
		public static WebElement itemMakeDropdown;
		
		@FindBy(xpath="//input[@id='Printer']")
		public static WebElement printerTxt;
		
		@FindBy(xpath="//input[@id='iAlternateCategory']")
		public static WebElement alternateCategorytxt;
		
		@FindBy(xpath="//*[@id='iAlternateCategory_input_image']/span")
		public static WebElement alternateCategory_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iAlternateCategory_input_settings']/span")
		public static WebElement alternate_SettingBtn;
		
		@FindBy(xpath="//textarea[@id='sDescription']")
		public static WebElement descriptionTxt;
		
		@FindBy(xpath="//input[@id='bPerishableItem']")
		public static WebElement perishableItemCheckbox;
		
		@FindBy(xpath="//input[@id='iBin']")
		public static WebElement binTxt;
		
		@FindBy(xpath="//*[@id='iBin_input_image']/span")
		public static WebElement bin_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iBin_input_settings']/span")
		public static WebElement bin_SettingBtn;
		
		
		
		/////Item---New---Units
		
		@FindBy(xpath="//input[@id='iDefaultBaseUnit']")
		public static WebElement defaultBaseUnitTxt;
		
		@FindBy(xpath="//*[@id='iDefaultBaseUnit_input_image']/span")
		public static WebElement defaultBaseUnit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iDefaultBaseUnit_input_settings']/span")
		public static WebElement defaultBaseUnit_SettingBtn;
		
		@FindBy(xpath="//input[@id='iDefaultSalesUnit']")
		public static WebElement defaultSalesUnit_Txt;
		
		@FindBy(xpath="//*[@id='iDefaultSalesUnit_input_image']/span")
		public static WebElement defaultSalesUnit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iDefaultSalesUnit_input_settings']/span")
		public static WebElement defaultSalesUnit_SettingBtn;
		
		@FindBy(xpath="//input[@id='iDefaultPurchaseUnit']")
		public static WebElement defaultPurchaseUnitTxt;
		
		@FindBy(xpath="//*[@id='iDefaultPurchaseUnit_input_image']/span")
		public static WebElement defaultPurchaseUnit_ExpansioinBtn;
		
		@FindBy(xpath="//*[@id='iDefaultPurchaseUnit_input_settings']/span")
		public static WebElement defaultPurchaseUnit_SettingBtn;
		
		@FindBy(xpath="//input[@id='fLength']")
		public static WebElement lengthTxt;
		
		@FindBy(xpath="//input[@id='fWidth']")
		public static WebElement widthTxt;
		
		@FindBy(xpath="//input[@id='fHeight']")
		public static WebElement heightTxt;
		
		@FindBy(xpath="//input[@id='fCBM']")
		public static WebElement CBMTxt;
		
		
		/////Master--Item--Item--New--Settings
		
		@FindBy(xpath="//input[@id='fStandardCost']")
		public static WebElement standardCostTxt;
		
		@FindBy(xpath="//input[@id='fOverheadCost']")
		public static WebElement overheadCostTxt;
		
		@FindBy(xpath="//input[@id='fIndirectCost']")
		public static WebElement indirectCostTxt;
		
		@FindBy(xpath="//input[@id='fProfit']")
		public static WebElement profitTxt;
		
		@FindBy(xpath="//input[@id='iDontshowproductexpireddays']")
		public static WebElement dontshowproductexpiringindaysTxt;
		
		@FindBy(xpath="//input[@id='iTaxCode']")
		public static WebElement taxCodeTxt;
		
		@FindBy(xpath="//*[@id='iTaxCode_input_image']/span")
		public static WebElement taxCode_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iTaxCode_input_settings']/span")
		public static WebElement taxCode_SettingBtn;
		
		
		
		/////////Master--Item--Item--New--Classification
		
			
		@FindBy(xpath="//select[@id='iABCCodeValue']")
		public static WebElement ABCCodeValueDropdown;
		
		@FindBy(xpath="//select[@id='iABCCodeMargin']")
		public static WebElement ABCCodeMarginDropdown;
		
		@FindBy(xpath="//select[@id='iABCCodeRevenue']")
		public static WebElement ABCCodeRevenueDropdown;
		
		@FindBy(xpath="//select[@id='iABCCodeCarryingCost']")
		public static WebElement ABCCodeCarryingCostDropdown;
		
		@FindBy(xpath="//*[@id='sBarcode1']")
		public static WebElement barcode1Txt;
		
		@FindBy(xpath="//input[@id='sBarcode2']")
		public static WebElement barcode2Txt;
		
		@FindBy(xpath="//input[@id='sBarcode3']")
		public static WebElement barcode3Txt;
		
		
		///Units ---Grid---First Row
		@FindBy(xpath="//input[@id='iUnit1']")
		public static WebElement gridUnitTxt;
		
		@FindBy(xpath="//*[@id='iUnit_input_image']/span")
		public static WebElement gridUnit_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iUnit_input_settings']/span")
		public static WebElement gridUnit_SettingBtn;
		
		@FindBy(xpath="//tr[@class='tableRow']//input[@id='sBarcode1']")
		public static WebElement barcodeTxt;
		
		@FindBy(xpath="//input[@id='sBatch1']")
		public static WebElement batchTxt;
		
		
		
		
	    //Master--Item--Item--New--Other Details
		
		@FindBy(xpath="//input[@id='iCostOfIssueAccount']")
		public static WebElement costOfIssueAccountTxt;
		
		@FindBy(xpath="//*[@id='iCostOfIssueAccount_input_image']/span")
		public static WebElement costOfIssueAccount_ExpansiionBtn;
		
		@FindBy(xpath="//*[@id='iCostOfIssueAccount_input_settings']/span")
		public static WebElement costOfIssueAccount_SettingBtn;
		
		@FindBy(xpath="//input[@id='iStocksAccount']")
		public static WebElement stocksAccountTxt;
		
		@FindBy(xpath="//*[@id='iStocksAccount_input_image']/span")
		public static WebElement stocksAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iStocksAccount_input_settings']/span")
		public static WebElement stocksAccount_SettingBtn;
		
		@FindBy(xpath="//input[@id='iSalesAccount']")
		public static WebElement salesAccount_Txt;
		
		@FindBy(xpath="//*[@id='iSalesAccount_input_image']/span")
		public static WebElement salesAccount_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iSalesAccount_input_settings']/span")
		public static WebElement salesAccount_SettingBtn;
		
		@FindBy(xpath="//input[@id='iWIPAccount']")
		public static WebElement WIPAccountTxt;
		
		@FindBy(xpath="//*[@id='iWIPAccount_input_image']/span")
		public static WebElement WIPAccoun_tExpansionBtn;
		
		@FindBy(xpath="//*[@id='iWIPAccount_input_settings']/span")
		public static WebElement WIPAccount_SettingBtn;
		
		@FindBy(xpath="//input[@id='iCostofShortageStockAC']")
		public static WebElement costofShortageStockACTxt;
		
		@FindBy(xpath="//*[@id='iCostofShortageStockAC_input_image']/span")
		public static WebElement costofShortageStockAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iCostofShortageStockAC_input_settings']/span")
		public static WebElement costofShortageStockAC_SettingBtn;
		
		@FindBy(xpath="//input[@id='iCostofExcessStockAC']")
		public static WebElement otherDetails_CostofExcessStockAC;
		
		@FindBy(xpath="//*[@id='iCostofExcessStockAC_input_image']/span")
		public static WebElement costofExcessStockAC_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='iCostofExcessStockAC_input_settings']/span")
		public static WebElement costofExcessStockAC_SettingBtn;
		
		
		
		@FindBy(xpath="//input[@id='optionBaseUnit']")
		public static WebElement unitConversionBaseUnitTxt;
		
		@FindBy(xpath="//input[@id='optionProduct']")
		public static WebElement unitConversionItemTxt;
		
		@FindBy(xpath="//td[@id='myTagsTable_col_1-2']")
		public static WebElement unitConversionTableRow1Col1;
		
		@FindBy(xpath="//td[@id='myTagsTable_col_1-3']")
		public static WebElement unitConversionTableRow1Col2;
		
		@FindBy(xpath="//td[@id='myTagsTable_col_1-4']")
		public static WebElement unitConversionTableRow1Col3;
		
		@FindBy(xpath="//td[@id='myTagsTable_col_1-5']")
		public static WebElement unitConversionTableRow1Col4;
		
		@FindBy(xpath="//td[@id='myTagsTable_col_1-6']")
		public static WebElement unitConversionTableRow1Col5;
		
		@FindBy(xpath="//input[@id='myTagsTable_UnitName']")
		public static WebElement unitConversion_EnterUnitNameTxt;
		
		@FindBy(xpath="//input[@id='myTagsTable_XFactor']")
		public static WebElement unitConversion_EnterXFactorTxt;
		
		@FindBy(xpath="//*[@id='ucCancel']/div")
		public static WebElement unitConversionCancelBtn;
		
		@FindBy(xpath="//*[@id='btnDeleteUnitConversion']/div")
		public static WebElement unitConversionDeleteBtn;
		
		
		
		
		
		//Grid---OtherDetails---1 row elements
		
		@FindBy(xpath="//input[@id='ioWarehouse']")
		public static WebElement otherDetailsGrid_WarehouseTxt;
		
		@FindBy(xpath="//*[@id='ioWarehouse_input_image']/span")
		public static WebElement otherDetailsGrid_Warehouse_ExpansionBtn;
		
		@FindBy(xpath="//*[@id='ioWarehouse_input_settings']/span")
		public static WebElement otherDetailsGrid_Warehouse_SettingBtn;
		
		@FindBy(xpath="//input[@id='iSupplier1']")
		public static WebElement grid_Supplier1Txt;
		
		@FindBy(xpath="//input[@id='sSupCode1']")
		public static WebElement grid_SupCode1Txt;
		
		@FindBy(xpath="//input[@id='iStartDate1']")
		public static WebElement grids_StartDate1Txt;
		
		//Master----Item---New---Replenishment

		@FindBy(xpath="//select[@id='iDefaultReplenishment']")
		public static WebElement defaultReplenishmentDropDown;

		@FindBy(xpath="//select[@id='iManufacturePolicy']")
		public static WebElement manufacturePolicyDropDown;

		@FindBy(xpath="//input[@id='iPackingBOM']")
		public static WebElement packingBOMTxt;

		@FindBy(xpath="//*[@id='iPackingBOM_input_image']/span")
		public static WebElement packingBOMExpansionBtn;

		@FindBy(xpath="//*[@id='iPackingBOM_input_settings']/span")
		public static WebElement packingBOMSettingBtn;

		@FindBy(xpath="//input[@id='iBOM']")
		public static WebElement BOMTxt;

		@FindBy(xpath="//*[@id='iBOM_input_image']/span")
		public static WebElement BOMExpansionBtn;

		@FindBy(xpath="//*[@id='iBOM_input_settings']/span")
		public static WebElement BOMSettingBtn;

		@FindBy(xpath="//select[@id='iFlushing']")
		public static WebElement flushingDropdown;

		@FindBy(xpath="//input[@id='irEnddate']")
		public static WebElement grid_EndingDate;

		@FindBy(xpath="//input[@id='iReplenishqty1']")
		public static WebElement grid_Replenishqty1;

		@FindBy(xpath="//input[@id='irWarehouse']")
		public static WebElement replenishmentGrid_WarehouseTxt;

		@FindBy(xpath="//*[@id='irWarehouse_input_image']/span")
		public static WebElement replenishmentGrid_Warehouse_ExpansionBtn;

		@FindBy(xpath="//*[@id='irWarehouse_input_settings']/span")
		public static WebElement replenishmentGrid_Warehouse_SettingBtn;

		@FindBy(xpath="//input[@id='irStartdate1']")
		public static WebElement grid_StartDateTxt;

		
		
		//OutLet Elements
		
		
		@FindBy(xpath="//input[@id='txtsrch-term0']")
		public static WebElement searchBox;

		@FindBy(xpath="//*[@id='liSearchOn']/a")
		public static WebElement search_SearchOnBtn;

		@FindBy(xpath="//*[@id='liAdvanceSearch']/a")
		public static WebElement search_AdvanceSearch ;

		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		public static WebElement cmbSearchTxt;

		@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_image']/span")
		public static WebElement cmbSearchExpansionBtn;

		@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_settings']/span")
		public static WebElement cmbSearchSettingBtn;

		@FindBy(xpath="//a[@id='chkResizeGrid0']")
		public static WebElement resizeGridBtn ;

		@FindBy(xpath="//input[@id='chkRetainSelection']")
		public static WebElement retainSelectionCheckbox;

		@FindBy(xpath="//label[@id='oncheckaccorderan0']")
		public static WebElement checkAccorderanBtn;
		
		@FindBy(xpath="//*[@id='iTreeId0']")
		public static WebElement treeIdDropdown;
		
		@FindBy(xpath="//*[@id='iTreeViewId0']")
		public static WebElement treeViewIdDropdown;
		
		
		
		
		
		
		
		//WareHouse
		
		
		@FindBy(xpath="//input[@id='iBins']")
		public static WebElement binsText;

		@FindBy(xpath="//*[@id='iBins_input_image']/span")
		public static WebElement bins_ExpansionBtn;

		@FindBy(xpath="//*[@id='iBins_input_settings']/span")
		public static WebElement bins_SettingBtn;

		@FindBy(xpath="//input[@id='iPhysInventoryCountingFrequency']")
		public static WebElement physInventoryCountingFrequencyTxt;

		@FindBy(xpath="//select[@id='iWarehouseType']")
		public static WebElement warehouseTypeDropdown;

		@FindBy(xpath="//input[@id='bDontMaintainBin']")
		public static WebElement dontMaintainBinCheckBox;


		// State

		@FindBy(xpath="//input[@id='iCountry']")
		public static WebElement countryTxt;

		@FindBy(xpath="//*[@id='iCountry_input_image']/span")
		public static WebElement country_ExpansionBtn;

		@FindBy(xpath="//*[@id='iCountry_input_settings']/span")
		public static WebElement country_SettingBtn;


		// City

		@FindBy(xpath="//input[@id='iState']")
		public static WebElement stateTxt;

		@FindBy(xpath="//*[@id='iState_input_image']/span")
		public static WebElement state_ExpansionBtn;

		@FindBy(xpath="//*[@id='iState_input_settings']/span")
		public static WebElement state_SettingBtn;



	   //Master------>Delete Field
		
		
		
		@FindBy(xpath="//*[@id='btnDelete']/i")
		public static WebElement deleteBtn;
		
		@FindBy(xpath="//div[@id='idGlobalError']")
		public static WebElement validationConfirmationMessage;

		@FindBy(xpath="//div[@class='theme_color font-6']")
		public static WebElement errorMessage;
		
		@FindBy(xpath="//span[@class='icon-reject2 theme_color']")
		public static WebElement errorMessageCloseBtn;
		
		@FindBy(xpath="//div[@id='idGlobalError']//td[3]")
		public static WebElement closeValidationConfirmationMessage;
		
		@FindBy(xpath="//*[@id='LandingGridBody']/tr[1]/td[11]")
		public static WebElement accountCreation;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
		public static WebElement accountNewCreationName;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[11]")
		public static WebElement accountNewCreationNameOfLane;               
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement accountFirstCheckBoxToSelection;

		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[5]/span[1]")
		public static WebElement accountGroupTitleDisplay;
		
		
		//Master Customization
		
		@FindBy(xpath="//i[@class='icon-expand']")
		public static WebElement plusBtn;

		@FindBy(xpath="//i[@class='icon-collepse']")
		public static WebElement minusBtn;

		@FindBy(xpath="//span[contains(text(),'Master Fields')]")
		public static WebElement masterFieldsOption;
		
			@FindBy(xpath="//*[@id='masterFields_list']/li[1]/span")
			public static WebElement generalTab;
			
				@FindBy(xpath="//span[@class='font-5'][contains(text(),'Main')]")
				public static WebElement generalMainTab;
				
					@FindBy(xpath="//div[@id='mainTab_0']//tbody//tr[1]//td[4]")
					public static WebElement accountCustomizeName;

					@FindBy(xpath="//div[@id='mainTab_0']//tr[2]//td[4]")
					public static WebElement accountCustomizeCode;

					@FindBy(xpath="//div[@id='mainTab_0']//tr[3]//td[4]")
					public static WebElement accountCustomizeAccountType;

					@FindBy(xpath="//div[@id='mainTab_0']//tr[4]//td[4]")
					public static WebElement accountCustomizeCreditLimit;

					@FindBy(xpath="//div[@id='mainTab_0']//tr[5]//td[4]")
					public static WebElement accountCustomizeCreditDays;				
				
				@FindBy(xpath="//div[@id='tabId_1']//span[@class='font-5'][contains(text(),'Header Details')]")
				public static WebElement generalHeaderDetailsTab;
						
					@FindBy(xpath="//div[@id='tabId_1']//tbody[contains(@class,'ui-sortable')]//tr[1]//td[4]")
					public static WebElement accountCustomizeChequeDiscountLimit;

					@FindBy(xpath="//div[@id='HeaderDetails_0']//tr[2]//td[4]")
					public static WebElement accountCustomizeRateOfInterest;

					@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[3]/td[4]")
					public static WebElement accountCustomizeBankAc;

					@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[4]/td[4]")
					public static WebElement accountCustomizePDCDiscountedAccount;
					
					@FindBy(xpath="//*[@id='btnMove_Field_MasterCust']/div[1]/span")
					public static WebElement accountHeaderMoveFiledBtn;

					@FindBy(xpath="//div[contains(text(),'Preview')]")
					public static WebElement accountHeaderPreview;
					
					@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
					public static WebElement accountSaveBtn;
								     
					@FindBy(xpath="//*[@id='btnAdd_Field_MasterCust']/div[1]/span")
					public static WebElement accountAddBtn;
											     
					@FindBy(xpath="//*[@id='btnCloseMasterCutomizationFromMasterScreen']/div[1]/span")
					public static WebElement accountCloseBtn;
	
			@FindBy(xpath="//span[@class='Flabel theme_icon-color'][contains(text(),'Settings')]")
			public static WebElement settingOption;

					@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Header Details')]")
					public static WebElement settingsHeaderDetailsTab;
					
					@FindBy(xpath="//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Header Details')]")
					public static WebElement settingsHeaderDetailsTab;
			
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[1]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditFirstRowBtn;
							                  
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[2]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditSecondRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[3]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditThirdRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[4]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditFourthRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[5]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditFifthRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[6]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditSixthRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[7]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditSeventhRowBtn;
					
							  @FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[8]/td[1]/i[1]")
							  public static WebElement accountSettingsHeaderEditEighthRowBtn;
							  
							  @FindBy(xpath="//div[contains(text(),'Move Field')]")
							  public static WebElement accountSettingsHeaderMoveFiledBtn;

							  @FindBy(xpath="//div[contains(text(),'Preview')]")
							  public static WebElement accountSettingsHeaderPreview;
							  						
							  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
							  public static WebElement accountSettingsSaveBtn;
							  									    
							  @FindBy(xpath="//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
							  public static WebElement accountSettingsAddBtn;						

							  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
							  public static WebElement accountSettingsCloseBtn;
							  
					
					@FindBy(xpath="//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Body Details')]")
					public static WebElement settingsBodyDetailsTab;
					
					@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Body Details')]")
					public static WebElement settingsBodyDetailsTab;
					
					                @FindBy(xpath="//div[@id='BodyDetails_1']//div[@class='scrollable tbl-emptyfields-mastercust']")
					                public static WebElement settingsBodyDetailsEmptyTab;
			

			@FindBy(xpath="//span[@class='Flabel theme_icon-color'][contains(text(),'Details')]")
			public static WebElement accountMasterFieldDetailsOption;
			
				@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Header Details')]")
		        public static WebElement detailsHeaderDetailsTab;
		        
		         @FindBy(xpath="//div[@id='tabId_69']//tbody[@class='ui-sortable']//tr[1]//td[4]")
								  public static WebElement detailsHeaderAddress;
								  
								  @FindBy(xpath="//div[@id='tabId_69']//tr[2]//td[4]")
								  public static WebElement detailsHeaderTelNo;
								  									    
								  @FindBy(xpath="//div[@id='tabId_69']//tr[3]//td[4]")
								  public static WebElement detailsHeaderFaxNo;		
								                  
								  @FindBy(xpath="//div[@id='tabId_69']//tr[4]//td[4]")
								  public static WebElement detailsHeaderCity;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[5]//td[4]")
								  public static WebElement detailsHeaderPin;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[6]//td[4]")
								  public static WebElement detailsHeaderDeliveryAddress;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[7]//td[4]")
								  public static WebElement detailsHeaderCityOne;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[8]//td[4]")
								  public static WebElement detailsHeaderPinOne;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[9]//td[4]")
								  public static WebElement detailsHeaderSendEmailToCustomer;
						
								  @FindBy(xpath="//div[@id='tabId_69']//tr[10]//td[4]")
								  public static WebElement detailsHeaderAllowCustomerPortal;
								  
								  @FindBy(xpath="//div[@id='tabId_69']//tr[11]//td[4]")
								  public static WebElement detailsHeaderEmail;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[12]//td[4]")
								  public static WebElement detailsHeaderPassword;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[13]//td[4]")
								  public static WebElement detailsHeaderBankAccountName;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[14]//td[4]")
								  public static WebElement detailsHeaderBankAccountNumber;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[15]//td[4]")
								  public static WebElement detailsHeaderIFSCCode;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[16]//td[4]")
								  public static WebElement detailsHeaderPaymentType;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[17]//td[4]")
								  public static WebElement detailsHeaderFinanceEmail;							  
						
	                              @FindBy(xpath="//div[@id='tabId_69']//tr[18]//td[4]")
								  public static WebElement detailsHeaderPortalEmail;	

	                              @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
								  public static WebElement detailsHeaderBankSaveBtn;

								  @FindBy(xpath="//div[contains(text(),'Move Field')]")
								  public static WebElement detailsHeaderMoveFieldBtn;

								  @FindBy(xpath="//div[contains(text(),'Add')]")
								  public static WebElement detailsHeaderAddBtn;

								  @FindBy(xpath="//div[contains(text(),'Preview')]")
								  public static WebElement detailsHeaderPreviewBtn;

								  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
								  public static WebElement detailsHeaderCloseBtn;	
		        
		        
				
				@FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Header Details')]")
		        public static WebElement detailsHeaderDetailsTab;
							
								  @FindBy(xpath="//div[@id='tabId_70']//tbody[@class='ui-sortable']//tr[1]//td[4]")
								  public static WebElement detailsHeaderAddress;
								  
								  @FindBy(xpath="//div[@id='tabId_70']//tr[2]//td[4]")
								  public static WebElement detailsHeaderTelNo;
								  									    
								  @FindBy(xpath="//div[@id='tabId_70']//tr[3]//td[4]")
								  public static WebElement detailsHeaderFaxNo;		
								                  
								  @FindBy(xpath="//div[@id='tabId_70']//tr[4]//td[4]")
								  public static WebElement detailsHeaderCity;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[5]//td[4]")
								  public static WebElement detailsHeaderPin;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[6]//td[4]")
								  public static WebElement detailsHeaderDeliveryAddress;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[7]//td[4]")
								  public static WebElement detailsHeaderCityOne;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[8]//td[4]")
								  public static WebElement detailsHeaderPinOne;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[9]//td[4]")
								  public static WebElement detailsHeaderSendEmailToCustomer;
						
								  @FindBy(xpath="//div[@id='tabId_70']//tr[10]//td[4]")
								  public static WebElement detailsHeaderAllowCustomerPortal;
								  
								  @FindBy(xpath="//div[@id='tabId_70']//tr[11]//td[4]")
								  public static WebElement detailsHeaderEmail;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[12]//td[4]")
								  public static WebElement detailsHeaderPassword;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[13]//td[4]")
								  public static WebElement detailsHeaderBankAccountName;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[14]//td[4]")
								  public static WebElement detailsHeaderBankAccountNumber;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[15]//td[4]")
								  public static WebElement detailsHeaderIFSCCode;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[16]//td[4]")
								  public static WebElement detailsHeaderPaymentType;

								  @FindBy(xpath="//div[@id='tabId_70']//tr[17]//td[4]")
								  public static WebElement detailsHeaderFinanceEmail;							  
						
	                              @FindBy(xpath="//div[@id='tabId_70']//tr[18]//td[4]")
								  public static WebElement detailsHeaderPortalEmail;	

	                              @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
								  public static WebElement detailsHeaderBankSaveBtn;

								  @FindBy(xpath="//div[contains(text(),'Move Field')]")
								  public static WebElement detailsHeaderMoveFieldBtn;

								  @FindBy(xpath="//div[contains(text(),'Add')]")
								  public static WebElement detailsHeaderAddBtn;

								  @FindBy(xpath="//div[contains(text(),'Preview')]")
								  public static WebElement detailsHeaderPreviewBtn;

								  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
								  public static WebElement detailsHeaderCloseBtn;						  

						@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Body Details')]")
						public static WebElement detailsBodyDetailsTab;
						
						@FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Body Details')]")
						public static WebElement detailsBodyDetailsTab;
						
						        @FindBy(xpath="//div[@id='BodyDetails_2']//div[@class='scrollable tbl-emptyfields-mastercust']")
						        public static WebElement detailsBodyDetailsEmptyTab;
			
			@FindBy(xpath="//*[@id='masterFields_list']/li[4]/span")
			public static WebElement accountMasterFieldPrintLayoutOption;
		
					  @FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Header Details')]")
					  public static WebElement printlayoutHeaderDetailsTab;
					                  
					  @FindBy(xpath="//div[@id='tabId_71']//span[@class='font-5'][contains(text(),'Header Details')]")
					  public static WebElement printlayoutHeaderDetailsTab;
					  
					    @FindBy(xpath="//div[@id='HeaderDetails_3']//div[@class='scrollable tbl-emptyfields-mastercust']")
					    public static WebElement printLayoutHeaderDetailsEmpty;
			
					  @FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Body Details')]")
					  public static WebElement printLayouBodyDetailsTab;
			
					  @FindBy(xpath="//div[@id='tabId_71']//span[@class='font-5'][contains(text(),'Body Details')]")
					  public static WebElement printLayouBodyDetailsTab;
					  
					      @FindBy(xpath="//div[@id='BodyDetails_3']/div/div/table/tbody/tr[1]/td[4]")
					      public static WebElement printlayoutBodyVoucherType;
			
			    	      @FindBy(xpath="//div[@id='tabId_70']//tr[2]//td[4]]")
					      public static WebElement printLayoutBodyPrintlayout;
			
					  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
					  public static WebElement printLayoutSaveBtn;
			
					  @FindBy(xpath="//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
					  public static WebElement printLayoutAddBtn;
			
					  @FindBy(xpath="//div[contains(text(),'Preview')]")
					  public static WebElement printLayoutPreviewBtn;
					  
					  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
					  public static WebElement printLayoutCloseBtn;
	
	    @FindBy(xpath="//span[contains(text(),'Unique Constraints')]")
		public static WebElement accountMasterFieldsUniqueConstraintsOption; 
		
			 @FindBy(xpath="//div[@id='tabContent_UConstraints_MasterCust']//div[@id='btnAddOrEdit_UniqueConstraints']")
			 public static WebElement UniqueConstraintsAddBtn;
					     
			 @FindBy(xpath="//div[@id='tabContent_UConstraints_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
			 public static WebElement UniqueConstraintsDeleteBtn;
					     
			 @FindBy(xpath="//div[@id='tabContent_UConstraints_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
			 public static WebElement UniqueConstraintsCloseBtn;
			 
				 @FindBy(xpath="//input[@id='txtConstraintName']")
				 public static WebElement ConstraintNameTxt;
			
			     @FindBy(xpath="//select[@id='ddlConstraintTabList']")
			     public static WebElement UniqueConstraints_TabsDropdown;

			     @FindBy(xpath="//*[@id='tab_Main_UcFields']/i")
			     public static WebElement UniqueConstraints_MainExpansionBtn;
			   
				     @FindBy(xpath="//*[@id='chkList_MainFields_1']/div[1]")
				     public static WebElement accountUniqueConstraints_Main_NameChekbox;
				     
				     @FindBy(xpath="//div[@id='chkList_MainFields_1']//div[2]")
				     public static WebElement accountUniqueConstraints_Main_CodeChekbox;
				     
				     @FindBy(xpath="//div[@id='chkList_MainFields_1']//div[3]")
				     public static WebElement accountUniqueConstraints_Main_AccountTypeCheckbox;
				     
				     @FindBy(xpath="//div[@id='chkList_MainFields_1']//div[4]")
				     public static WebElement accountUniqueConstraints_Main_CreditLimitCheckBox;
				     
				     @FindBy(xpath="//div[@id='chkList_MainFields_1']//div[5]")
				     public static WebElement accountUniqueConstraints_Main_CreditDays;
				     
				 @FindBy(xpath="//div[@id='tab_Header_UcFields']//i[@class='pull-right icon-expand theme_icon-color']")
				 public static WebElement UniqueConstraints_HeaderExpansionBtn;

				     @FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[1]")
				     public static WebElement UniqueConstraints_Header_ChequeDiscountLimitChekbox;
				     
				     @FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[2]")
				     public static WebElement UniqueConstraints_Header_RateOfInterestChekbox;
				     
				     @FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[3]")
				     public static WebElement UniqueConstraints_Header_BankAcChekbox;
				     
				     @FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[4]")
				     public static WebElement UniqueConstraints_Header_PDCDiscountedChekbox;
				  
				 @FindBy(xpath="//*[@id='tab_Body_UcFields']/i")
			     public static WebElement UniqueConstraints_BodyExpansionBtn;
				 
		@FindBy(xpath="//span[contains(text(),'Rules')]")
		public static WebElement RulesOption;
		
			 @FindBy(xpath="//div[@id='newRuleTab_div_MasterRules']//span[@class='icon-save icon-font7']")
			 public static WebElement accountRules_SaveBtn;
			               
			 @FindBy(xpath="//div[@class='pull-right']//span[@class='icon-new icon-font7']")
			 public static WebElement accountRules_NewBtn;
			
			 @FindBy(xpath="//div[@id='newRuleTab_div_MasterRules']//span[@class='icon-delete icon-font7']")
			 public static WebElement accountRules_DeleteBtn;
			 
			 @FindBy(xpath="//div[@id='newRuleTab_div_MasterRules']//div[@class='pull-right']//span[@class='icon-close icon-font7']")
			 public static WebElement accountRules_CloseBtn;   
			 
			 @FindBy(xpath="//*[@id='txtMasterRuleName_MasterRules']")
			 public static WebElement Rules_RuleNameText ;
				     

			 @FindBy(xpath="//*[@id='chkCreatingGroup_Rule_MasterRules']")
			 public static WebElement Rules_CreatingGroupChekbox ;

			 @FindBy(xpath="//*[@id='chkNewRecord_Rule_MasterRules']")
			 public static WebElement Rules_NewRecordChekbox ;

			 @FindBy(xpath="//*[@id='chkEdit_Rule_MasterRules']")
			 public static WebElement Rules_EditChekbox ;

			 @FindBy(xpath="//*[@id='chkLoad_Rule_MasterRules']")
			 public static WebElement Rules_LoadChekbox ;

			 @FindBy(xpath="//*[@id='chkBeforeSave_Rule_MasterRules']")
			 public static WebElement Rules_BeforeSaveChekbox ;

			 @FindBy(xpath="//*[@id='chkOnLeave_Rule_MasterRules']")
			 public static WebElement Rules_OnLeaveChekbox ;

			 @FindBy(xpath="//*[@id='chkBeforeDelete_Rule_MasterRules']")
			 public static WebElement Rules_BeforeDeleteChekbox ;

			 @FindBy(xpath="//*[@id='chkOnEnter_Rule_MasterRules']")
			 public static WebElement Rules_OnEnterChekbox ;
			 
			 @FindBy(xpath="//label[contains(text(),'Active')]")
			 public static WebElement Rules_ActiveChekbox ;

			 @FindBy(xpath="//*[@id='Conditions-Context_Menu']/li[3]")
			 public static WebElement Rules_NoConditionChekbox;	  

		@FindBy(xpath="//*[@id='allMasterCustTabs']/li[4]/span")
		public static WebElement rules_ExternalModules;

			@FindBy(xpath="//select[@id='ddlOnEvent_MasterExternalModule']")
			public static WebElement rules_ExternalModulesOnEventDropdown;	
			
			@FindBy(xpath="//input[@id='txtbuttonCaption_MasterExternalModule']")
			public static WebElement rules_ExternalModulesButtonCaption;

			@FindBy(xpath="//select[@id='ddlModuleType_MasterExternalModule']")
			public static WebElement rules_ExternalModules_ModuleTypeBtn;

			@FindBy(xpath="//select[@id='ddlAllDllFiles_MasterExternalModule']")
			public static WebElement rules_ExternalModules_ModuleNameDropdown;

			@FindBy(xpath="//select[@id='ddlClassNames_MasterExternalModule']")
			public static WebElement rules_ExternalModulesClassNameDropdown;
		
			@FindBy(xpath="//select[@id='ddlClassMethods_MasterExternalModule']")
			public static WebElement rules_ExternalModulesFuctionalNameDropdown;
	
			@FindBy(xpath="//div[contains(text(),'Update')]")
			public static WebElement rules_ExternalModulesUpdateBtn;

			@FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
			public static WebElement rules_ExternalModulesSaveBtn;

			@FindBy(xpath="//div[contains(text(),'Edit')]")
			public static WebElement rules_ExternalModulesEditBtn;

			@FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
			public static WebElement rules_ExternalModulesDeleteBtn;

		    @FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
			public static WebElement rules_ExternalModulesCloseBtn;

	    @FindBy(xpath="//span[contains(text(),'Info Panel Customization')]")
		public static WebElement itemInfoPanelCustomizationTab;

		    @FindBy(xpath="//body[@class='custom_scrollbar']/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[@class='content-wrapper']/section[@id='page_Content']/div[@class='container']/div[@id='mainLandingDiv']/div[@id='masterFirstDiv']/div[@class='tab-content']/div[@id='divLanding']/div[@id='divSecondsub']/div/div[@class='col-xs-12 col-sm-8 col-md-9 col-lg-9 padding-left-right5 mainDivCustomWidth']/div[@id='tabContent_IPCust_MasterCust']/div[@class='col-xs-12 col-sm-12 padding0']/div[@class='pull-right']/div[1]")
		    public static WebElement iteminfoPanelCust_AddBtn;

		    @FindBy(xpath="//div[@id='tabContent_IPCust_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
		    public static WebElement infoPanelCust_DeleteBtn;

		    @FindBy(xpath="//div[@id='tabContent_IPCust_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
		    public static WebElement infoPanelCust_CloseBtn;

		    @FindBy(xpath="//strong[contains(text(),'Credit History')]")
		    public static WebElement infoPanelCustCreditHistory;

		    @FindBy(xpath="//div[@id='divPanel_2']//strong[contains(text(),'Ageing Analysis')]")
		    public static WebElement infoPanelCustAgeingAnalysis;

		    @FindBy(xpath="//strong[contains(text(),'Ageing Analysis Base')]")
		    public static WebElement infoPanelCustAgeingAnalysisBase;

		    @FindBy(xpath="//strong[contains(text(),'Ageing Analysis Local')]")
		    public static WebElement infoPanelCustAgeingAnalysisLocal;

		    @FindBy(xpath="//strong[contains(text(),'Authorization')]")
		    public static WebElement infoPanelAuthorization;
		   
	    @FindBy(xpath="//span[@class='Flabel'][contains(text(),'Reports')]")
	    public static WebElement accountReportsTab;
			
			@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
			public static WebElement  accountReports_SaveBtn;
			
			@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
			public static WebElement  accountReports_CloseBtn;
			
					@FindBy(xpath="//*[@id='AllReportsDiv_MasterCust']/div[1]/label/input")
					public static WebElement  reports_AdvancedbudgetReportChkBox;
					
					@FindBy(xpath="//div[@id='AllReportsDiv_MasterCust']//div[1]//label[1]")
					public static WebElement  reports_MasterInfoChkBox;
					
					
					@FindBy(xpath="//div[@class='col-xs-12 col-sm-8 col-md-8 col-lg-9 padding0']//div[2]//label[1]")
					public static WebElement  reports_ABCAnalysisAmountChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[3]//label[1]")
					public static WebElement  reports_BankBookChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[4]//label[1]")
					public static WebElement  reports_BankreconciliationstatementChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[5]//label[1]")
					public static WebElement  reports_CashBookChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[6]//label[1]")
					public static WebElement  reports_ComparativeAnalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[7]//label[1]")
					public static WebElement  reports_CustomerAgeingDetailsAnalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[8]//label[1]")
					public static WebElement  reports_CustomerageingdetailbyduedateChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[9]//label[1]")
					public static WebElement  reports_CustomerageingsummaryanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[10]//label[1]")
					public static WebElement  reports_CustomerbillwisesummaryChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[11]//label[1]")
					public static WebElement  reports_CustomerduedateanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[12]//label[1]")
					public static WebElement  reports_CustomerlistingofoutstandingbillsChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[13]//label[1]")
					public static WebElement  reports_CustomeroverdueanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[14]//label[1]")
					public static WebElement  reports_CustomeroverduesummaryChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[15]//label[1]")
					public static WebElement  reports_CustomerstatementsChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[16]//label[1]")
					public static WebElement  reports_CustomersummaryageingbyduedateChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[17]//label[1]")
					public static WebElement  reports_IncomeExpenseTrendChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[18]//label[1]")
					public static WebElement  reports_InterestcalculationChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[19]//label[1]")
					public static WebElement  reports_LedgerChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[20]//label[1]")
					public static WebElement  reports_LedgerdetailChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[21]//label[1]")
					public static WebElement  reports_MonthlySalesChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[22]//label[1]")
					public static WebElement  reports_PeakandlowbalanceamountChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[23]//label[1]")
					public static WebElement  reports_PettycashbookChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[24]//label[1]")
					public static WebElement  reports_PurchaseregisterChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[25]//label[1]")
					public static WebElement  reports_PurchasereturnregisterChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[26]//label[1]")
					public static WebElement  reports_PurchasesgroupedbydepartmentChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[27]//label[1]")
					public static WebElement  reports_PurchasesgroupedbyItemChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[28]//label[1]")
					public static WebElement  reports_PurchasesgroupedbyvendorChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[29]//label[1]")
					public static WebElement  reports_SalesdaybookChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[30]//label[1]")
					public static WebElement  reports_SalesgroupedbycustomerChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[31]//label[1]")
					public static WebElement  reports_salesgroupedbydepartmentrChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[32]//label[1]")
					public static WebElement  reports_SalesgroupedbyItemChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[33]//label[1]")
					public static WebElement  reports_SalesreturnregisterChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[34]//label[1]")
					public static WebElement  reports_SchedulesChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[35]//label[1]")
					public static WebElement  reports_SubledgerChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[36]//label[1]")
					public static WebElement  reports_SummarypurchaseregisterChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[37]//label[1]")
					public static WebElement  reports_SummarysalesregisterChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[38]//label[1]")
					public static WebElement  reports_TopCustomersChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[39]//label[1]")
					public static WebElement  reports_TradingaccountrChkBox;
					
					@FindBy(xpath="//div[40]//label[1]")
					public static WebElement  reports_TransactionstypeanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[41]//label[1]")
					public static WebElement  reports_VendorageingdetailanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[42]//label[1]")
					public static WebElement  reports_VendorageingdetailbyduedateChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[43]//label[1]")
					public static WebElement  reports_VendorageingsummaryanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[44]//label[1]")
					public static WebElement  reports_VendorbillwisesummaryChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[45]//label[1]")
					public static WebElement  reports_VendorduedateanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[46]//label[1]")
					public static WebElement  reports_VendorlistingofoutstandingbillsChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[47]//label[1]")
					public static WebElement  reports_VendoroverdueanalysisChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[48]//label[1]")
					public static WebElement  reports_VendoroverduesummaryChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[49]//label[1]")
					public static WebElement  reports_VendorstatementsChkBox;
					
					@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[50]//label[1]")
					public static WebElement  reports_VendorsummaryageingbyduedateChkBox;
				
                 //Create Tabs
					
					@FindBy(xpath="//button[@id='btnCreateTab_MCust']")
					public static WebElement createTab;  
						
						@FindBy(xpath="//a[contains(text(),'Tree Tab')]")
						public static WebElement createTabTreeTab; 

							@FindBy(xpath="//input[@id='txtNewTreeTabCaption']")
							public static WebElement  treeTabCaptionTxt;
							
							@FindBy(xpath="//input[@id='txtNewTreeTabName']")
							public static WebElement  treeTabTabNameTxt;
							
							@FindBy(xpath="//input[@id='fOption_tab_masterName']")
							public static WebElement  treeTabNewMastertxt;
							
							@FindBy(xpath="//*[@id='fOption_tab_masterName_input_image']/span")
							public static WebElement  treeTabNewMasterdropdown;
							
							@FindBy(xpath="//*[@id='fOption_tab_masterName_input_settings']/span")
							public static WebElement  treeTab_NewMasterSettingsBtn;
	
							@FindBy(xpath="//input[@id='txtNewTreeTabFieldCaption']")
							public static WebElement  treeTab_FieldCaptiontxt;
							
							@FindBy(xpath="//input[@id='txtNewTreeTabFieldName']")
							public static WebElement  treeTab_FieldNameTxt;
							
							@FindBy(xpath="//input[@id='bIsTreeHiddenTab']")
							public static WebElement  treeTab_HiddenChkBox;
						
									@FindBy(xpath="//div[@id='fOption_tab_masterName_customize_popup_container']")
									public static WebElement  treeTab_NewMaster_ContainerTxt;
									
									@FindBy(xpath="//div[@id='fOption_tab_masterName_customize_popup_footer']//input[1]")
									public static WebElement  treeTab_NewMaster_StanadrdfieldsBtn;
									
											@FindBy(xpath="//select[@id='fOption_tab_masterName_customize_popup_standardfields_list']")
											public static WebElement treeTab_NewMaster_Stanadrdfields_Fielddropdown;
											
											@FindBy(xpath="//input[@id='fOption_tab_masterName_customize_popup_standardfields_header']")
											public static WebElement  treeTab_NewMaster_Stanadrdfields_headerTxt;
											
											@FindBy(xpath="//select[@id='fOption_tab_masterName_customize_popup_standardfields_alignment']")
											public static WebElement  treeTab_NewMaster_Stanadrdfields_Allignmentdropdown;
											
											@FindBy(xpath="//input[@id='fOption_tab_masterName_customize_popup_standardfields_width']")
											public static WebElement  treeTab_NewMaster_Stanadrdfields_WidthTxt;
											
											@FindBy(xpath="//div[@id='divSecondsub']//input[3]")
											public static WebElement  treeTab_NewMaster_Stanadrdfields_OkBtn;
											
											@FindBy(xpath="//div[@id='divSecondsub']//input[4]")
											public static WebElement  treeTab_NewMaster_Stanadrdfields_CancelBtn;
									
									@FindBy(xpath="//div[@id='fOption_tab_masterName_search_container']//input[2]")
									public static WebElement  treeTab_NewMaster_deleteColumnBtn;
									
									@FindBy(xpath="//div[@id='divSecondsub']//input[3]")
									public static WebElement  treeTab_NewMaster_OkBtn;
									
									@FindBy(xpath="//div[@id='divSecondsub']//input[4]")
									public static WebElement  treeTab_NewMaster_CancelBtn;
						
							@FindBy(xpath="//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[1]")
							public static WebElement  treeTab_OkBtn;

							@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
							public static WebElement  treeTab_UpdateOkBtn;
							
							@FindBy(xpath="//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[2]")
							public static WebElement  treeTab_CancelBtn;
							
						@FindBy(xpath="//a[contains(text(),'Document Tab')]")
						public static WebElement createTab_DocumentTab;  

						            @FindBy(xpath="//input[@id='txtNewDocTabCaption']")
						            public static WebElement documentTab_TabCaption;  
						
									@FindBy(xpath="//input[@id='txtNewDocTabName']")
									public static WebElement documentTab_TabName;  
									
									@FindBy(xpath="//input[@id='bIsDocHiddenTab']")
									public static WebElement documentTab_HiddenChkbox;  
									
									@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
									public static WebElement documentTab_OkBtn;  
									
									@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
									public static WebElement documentTab_CancelBtn; 
									
									@FindBy(xpath="//label[@id='lblNameError_DocTab']")
									public static WebElement customizeMasterCreateTabDocumentTabMessage; 
								
								        @FindBy(xpath="//span[contains(text(),'Document Tab')]")
								        public static WebElement customizeMasterCreateDocumentTabNewlyCreate; 
									
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[1]/a[1]/span[1]")
										public static WebElement customizeMasterCreateDocumentTabNewlyHeaderDetails; 	
													
										@FindBy(xpath="//div[@id='HeaderDetails_5']//div[@class='scrollable tbl-emptyfields-mastercust']")
										public static WebElement customizeMasterCreateDocumentTabNewlyBlankInHeaderDetails;
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[2]/a[1]/span[1]")
										public static WebElement customizeMasterCreateDocumentTabNewlyBodyDetails; 			
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
										public static WebElement customizeMasterCreateDocumentTabFieldName; 
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
										public static WebElement customizeMasterCreateDocumentTabDocument; 
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[4]")
										public static WebElement customizeMasterCreateDocumentTabCreatedDate; 
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[4]/td[4]")
										public static WebElement customizeMasterCreateDocumentTabLastModified; 
										
										@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[5]/td[4]")
										public static WebElement customizeMasterCreateDocumentFileSize; 
										
						@FindBy(xpath="//a[contains(text(),'Create Tab')]")
						public static WebElement createTab_CreateTab;  

							@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//h4[@class='modal-title'][contains(text(),'Tab Details')]")
							public static WebElement createTab_TabDetailsLabel;  
			                                                  
							@FindBy(xpath="//input[@id='txtNewTabCaption']")
							public static WebElement createTab_TabCaptionTxt;  
			                                                   
							@FindBy(xpath="//input[@id='txtNewTabName']")
							public static WebElement createTab_TabNameTxt;  
							
							@FindBy(xpath="//input[@id='bIsHiddenTab']")
							public static WebElement createTab_PopHiddenChkbox;  
							
							@FindBy(xpath="//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[1]")
							public static WebElement createTab_PopOkBtn;  
							
							@FindBy(xpath="//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[2]")
							public static WebElement createTab_PopCancelBtn; 

							@FindBy(xpath="//label[@id='lblNameError_NewTab']")
							public static WebElement customizeMasterCreateTabCreateTabMessage;  
							
							
                          //Newly Created Create Tab  

							@FindBy(xpath="//span[contains(text(),'Create Tab')]")
							public static WebElement customizeMasterCreateCreateTabNewlyCreateTabCaption; 	
							
							              
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[1]/a[1]/span[1]")
							public static WebElement customizeMasterCreateCreateTabHeaderDetails; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]")
							public static WebElement customizeMasterCreateCreateTabBlankHeaderDetails; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[2]/a[1]/span[1]")
							public static WebElement customizeMasterCreateCreateTabBodyDetails; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[2]/div[1]/div[1]")
							public static WebElement customizeMasterCreateCreateTabBlankBodyDetails; 
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[1]/div[2]")
							public static WebElement customizeMasterCreateCreateTabNewlyCreateTabSaveButton; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[3]/div[2]")
							public static WebElement customizeMasterCreateCreateTabAddButton; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
							public static WebElement customizeMasterCreateCreateTabPreviewButton; 	
							
							@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[5]/div[2]")
							public static WebElement customizeMasterCreateCreateTabCloseButton; 	

				@FindBy(xpath="//button[@id='btnDeleteTab_MCust']")
				public static WebElement tabs_DeleteBtn; 
		
		@FindBy(xpath="//label[@id='lblNameError_TreeTab']")
		public static WebElement customizeMasterCreateTabsMessage; 		
		
		@FindBy(xpath="//label[@id='lblMasterNameError_TreeTab']")
		public static WebElement customizeMasterCreateTabsMasterNameMessage; 	
	
		@FindBy(xpath="//span[contains(text(),'Tree Tab')]")
		public static WebElement customizeMasterCreateTreeTabNewlyCreate; 	
		
		@FindBy(xpath="//input[@id='txtEditTabCaption']")
		public static WebElement customizeMasterCreateTreeTabNewlyCreateTabCaption; 	
		
		@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//label[@class='col-sm-12 col-xs-12 col-md-5 col-lg-5 form-control-static Flabel'][contains(text(),'Hidden')]")
		public static WebElement customizeMasterCreateTreeTabNewlyCreateHidden; 	
		
		@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
		public static WebElement customizeMasterCreateTreeTabNewlyCreateOkButton; 	
		
		@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
		public static WebElement customizeMasterCreateTreeTabNewlyCreateCancelButton; 	
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[1]/a[1]/span[1]")
		public static WebElement customizeMasterCreateTreeTabNewlyHeaderDetails; 	
		
		//               
		@FindBy(xpath="//div[@id='HeaderDetails_4']//div[@class='scrollable tbl-emptyfields-mastercust']")
		public static WebElement customizeMasterCreateTreeTabNewlyBlankInHeaderDetails; 	
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[2]/a[1]/span[1]")
		public static WebElement customizeMasterCreateTreeTabNewlyBodyDetails; 	
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
		public static WebElement customizeMasterCreateTreeTabNewlyFieldInBodyDetails; 	
		
		@FindBy(xpath="//span[contains(text(),'Tree Tab Delete')]")
		public static WebElement  CustomizeCreateTreeTab;
		
		@FindBy(xpath="//*[@id='lblWarnMessage_TabModal']")
		public static WebElement  CustomizeDeleteTabMessage;

		@FindBy(xpath="//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Yes')]")
		public static WebElement  CustomizeDeleteTabMessageYesBtn;

		@FindBy(xpath="//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'No')]")
		public static WebElement  CustomizeDeleteTabMessageNoBtn;
		
		
		//Master Customization Extra Fields Creation On Click Add button
	
		
		     @FindBy(xpath="//input[@id='ExtraField_FieldCaption']")
		     public static WebElement extraFields_FieldDetailsTab;   
		     
		     @FindBy(xpath="//span[contains(text(),'Field Details')]")
		     public static WebElement extraFields_ClickOnFieldDetailsTab; 

			     @FindBy(xpath="//*[@id='ExtraField_FieldCaption']")
			     public static WebElement extraFields_FieldDetailsCaption;   
			     
			     @FindBy(xpath="//div[@id='tab_FieldDetails_ExtraField']//div[1]//div[2]//div[1]//input[1]")
			     public static WebElement extraFields_FieldDetailsName;  
			     
			     @FindBy(xpath="//*[@id='ddlDatatype_ExtraField']")
			     public static WebElement extraFields_FieldDetailsDatTypeDropdown;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_DefaultValue']")
			     public static WebElement extraFields_FieldDetailsDefaultValue;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_BannerText']")
			     public static WebElement extraFields_FieldDetailsBannerText;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_MaxSize']")
			     public static WebElement extraFields_FieldDetails_MaxSize;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_ControlType']")
			     public static WebElement extraFields_FieldDetailsControlTypeDropdown;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_ToolTipText']")
			     public static WebElement extraFields_FieldDetailsToolTipText;  
			     
			     @FindBy(xpath="//*[@id='ExtraField_RegularExpression']")
			     public static WebElement extraFields_FieldDetailsRegularExpressionText;  
			     
			     @FindBy(xpath=" //*[@id='btnLoad_RExp']")
			     public static WebElement extraFields_RegularExperssionLoadExpansionBtn;
		
			     
		     @FindBy(xpath="//*[@id='extraFieldContainer_div']/ul/li[2]/a/span")
			 public static WebElement extraFields_PropertiesTab;		     
						     
				@FindBy(xpath="//*[@id='tab_Properties_ExtraField']/div[1]/div[1]")
				public static WebElement extraFields_PropertiesTabPartOfDeliveryAddressChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_PartOfBillingAddress']")
				public static WebElement extraFields_PropertiesPartOfBillingAddressChekbox;
				
				@FindBy(xpath="//input[@id='FieldsDetails_IsMandatory']")
				public static WebElement extraFields_PropertiesMandatoryChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_AllowAsParameter']")
				public static WebElement extraFields_PropertiesAllowAsParameterChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_IsHidden']")
				public static WebElement extraFields_PropertiesHiddenChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_HiddenInGroup']")
				public static WebElement extraFields_PropertiesHiddenInGroupChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_SpellCheck']")
				public static WebElement extraFields_PropertiesSpellCheckChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_MandatoryInGroup']")
				public static WebElement extraFields_PropertiesMandatoryInGroupChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_AuditTrial']")
				public static WebElement extraFields_PropertiesAuditTrialChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_NotAvailableForReports']")
				public static WebElement extraFields_PropertiesNotAvailableForReportsChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_MergeField']")
				public static WebElement extraFields_PropertiesMergeFieldChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_MassUpdate']")
				public static WebElement extraFields_PropertiesMassUpdateChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_IncludeInQuickCreate']")
				public static WebElement extraFields_PropertiesIncludeInQuickCreateChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_CannotBeExported']")
				public static WebElement extraFields_PropertiesCannotBeExportedChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_CannotBeImported']")
				public static WebElement extraFields_PropertiesCannotBeImportedChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_CopyFromParent']")
				public static WebElement extraFields_PropertiesCopyFromParentChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_ReadOnly']")
				public static WebElement extraFields_PropertiesReadOnlyChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_InformationField']")
				public static WebElement extraFields_PropertiesInformationFieldChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_IsMandatoryInRevision']")
				public static WebElement extraFields_PropertiesIsMandatoryInRevisionChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_AvailableinCustomerPortal']")
				public static WebElement extraFields_PropertiesAvailableinCustomerPortalChekbox;
				
				@FindBy(xpath="//*[@id='FieldsDetails_EditableinCustomerPortal']")
				public static WebElement extraFields_PropertiesEditableinCustomerPortalChekbox;
				
				@FindBy(xpath="//*[@id='Behaviour']")
				public static WebElement extraFields_PropertiesBehaviourDropdown;     

			@FindBy(xpath="//*[@id='extraFieldContainer_div']/ul/li[3]/a/span")
			public static WebElement  extraFields_FormattingTab;
		        
		        @FindBy(xpath="//*[@id='FieldsDetails_ColumnSpan']")
				public static WebElement extraFields_FormattingColumnSpan ;
		        
		        @FindBy(xpath="//*[@id='FieldsDetails_RowSpan']")
				public static WebElement extraFields_FormattingRowSpan ;
		        
		        @FindBy(xpath="//*[@id='CharacterCasing']")
				public static WebElement extraFields_FormattingCharacterCasingDropdown ;
		        
		        @FindBy(xpath="//*[@id='TextAlign']")
				public static WebElement extraFields_FormattingTextAlignDropdown ;
		        
		        @FindBy(xpath="//*[@id='FieldsDetails_Font']")
				public static WebElement extraFields_FormattingFieldsDetailsFont ;
		        
		        @FindBy(xpath="//*[@id='FieldsDetails_BackColor']")
		        public static WebElement extraFields_FormattingBackColor ;
		        
		        @FindBy(xpath="//*[@id='FieldsDetails_Font_Button']")
				public static WebElement extraFields_FormattingFieldsDetailsFont_Btn ;
			       
			        //Elements are used for font edit option pop in field details and rules 
			        
			        @FindBy(xpath="//*[@id='fontFamily_ExtraField_FontCtrl']")
					public static WebElement FontAreialDropdown ;
			        
			        @FindBy(xpath="//*[@id='fontStyle_ExtraField_FontCtrl']")
					public static WebElement fontStyleDropdown ;
			        
			        @FindBy(xpath="//*[@id='fontWeight_ExtraField_FontCtrl']")
					public static WebElement fontWeightDropdown ;

			        @FindBy(xpath="//*[@id='fontSizes_ExtraField_FontCtrl']")
					public static WebElement fontSizeDropdown ;
			        
			        @FindBy(xpath="//*[@id='fontForeColor_ExtraField_FontCtrl']")
					public static WebElement foreColourDropdown ;
			        
			        @FindBy(xpath="//*[@id='fontBackColor_ExtraField_FontCtrl']")
					public static WebElement backColorDropdown ;
			        
			        @FindBy(xpath="//*[@id='chkBaseline_ExtraField_FontCtrl']")
					public static WebElement baselineChekbox ;
			        
			        @FindBy(xpath="//*[@id='chkOverLine_ExtraField_FontCtrl']")
					public static WebElement overLineChekbox ;
			        
			        @FindBy(xpath="//*[@id='chkStrikeThrough_ExtraField_FontCtrl']")
					public static WebElement strikeThroughChekbox ;
			        
			        @FindBy(xpath="//*[@id='chkUnderline_ExtraField_FontCtrl']")
					public static WebElement underlineChekbox ;
			        
			        @FindBy(xpath="//*[@id='chkEnableFont_ExtraField_FontCtrl']")
					public static WebElement enableFontChekbox ;
			        
			        @FindBy(xpath="//*[@id='previewfont_ExtraField_FontCtrl']")
					public static WebElement frontPriveiw ;
			        
			        @FindBy(xpath="//*[@id='myFontControl_IF_Save']/i")
					public static WebElement frontSaveBtn ;
			        
			        @FindBy(xpath="//*[@id='myFontControl_IF_Close']")
					public static WebElement frontCloseBtn ;
			        
				   
			 @FindBy(xpath="//*[@id='extraFieldContainer_div']/ul/li[4]/a/span")
			 public static WebElement extraFields_RulesTab ;
					                   
			    @FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[1]/div[2]")
				public static WebElement extraFields_RulesSaveBtn ;
		                  
		        @FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[2]/div[2]")
				public static WebElement extraFields_RulesNewBtn ;
		        
		        @FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[3]/div[2]")
				public static WebElement extraFields_RulesDeleteBtn ;
		        
		        @FindBy(xpath="//div[@id='newRuleTab_div_FieldRules']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
				public static WebElement extraFields_RulesCloseBtn ;
		        
	            @FindBy(xpath="//input[@class='btn btn-link']")
			    public static WebElement extraFields_RulesClickHereAddRuleButtonBtn ;
	        
		        @FindBy(xpath="//input[@id='txtMasterRuleName_FieldRules']")
				public static WebElement extraFields_RuleNameDropdown ;
		        
		        @FindBy(xpath="//*[@id='txtMasterRuleName_FieldRules_input_settings']/span")
				public static WebElement extraFields_RuleNameSetingBtn ;      
			        
			        
			        
	        @FindBy(xpath="//*[@id='extraFieldContainer_div']/ul/li[5]/a/span")
	        public static WebElement extraFields_ExternalModulesTab;			     
		         
		        @FindBy(xpath="//*[@id='ddlOnEvent_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModulesOnEventDropdown;	

		        @FindBy(xpath="//*[@id='txtbuttonCaption_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModulesButtonCaption;

		        @FindBy(xpath="//*[@id='ddlModuleType_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModules_ModuleTypeBtn;

		        @FindBy(xpath="//*[@id='ddlAllDllFiles_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModules_ModuleNameDropdown;

		        @FindBy(xpath="//*[@id='ddlClassNames_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModulesClassNameDropdown;

		        @FindBy(xpath="//*[@id='ddlClassMethods_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModulesFuctionalNameDropdown;

		        @FindBy(xpath="//*[@id='ddlAvailability_mExtraFieldExternalModule']")
		        public static WebElement extraFields_ExternalModulesAvabileInDropdown;        
		        
		        @FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[1]")
			    public static WebElement extraFields_ExternalModulesForMatFieldDeatailsOkBtn ;
			        
			    @FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[2]")
			    public static WebElement extraFields_externalModulesForMatFieldDeatailsCanceBtn ;
				        
			 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]")
			 public static WebElement extraFields_OkBtn;
			    
			 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[1]/div[2]/div[2]")
			 public static WebElement extraFields_CloseBtn;
			 
	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	 public static WebElement extraFields_CreatedByUserInHeaderDetailsTab;
			 
	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[1]")
	 public static WebElement extraFields_EditOptionInHeaderDetailsTab;
	 
	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
	 public static WebElement extraFields_DeleteOptionInHeaderDetailsTab;
	 
	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
	 public static WebElement extraFields_SecondFieldInHeaderDetailsTab;
	 
	 
	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[2]/div[2]")
	 public static WebElement extraFields_MoveFieldOption;
	 
		 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/select[1]")
		 public static WebElement extraFields_MoveFieldTabName;
		 
		 @FindBy(xpath="//div[@id='tableType_div']//div[1]//label[1]")
		 public static WebElement extraFields_MoveFieldHeader;
		 
		 @FindBy(xpath="//div[@id='rdbBodyDiv_MoveField_Modal']//label[1]")
		 public static WebElement extraFields_MoveFieldBody;
		 
		 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[1]")
		 public static WebElement extraFields_MoveFieldOkButton;
		 
		 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[2]")
		 public static WebElement extraFields_MoveFieldCancelButton;
		 
		 
	     //Settings Tab Move Field
		 
		 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[1]")
		 public static WebElement extraFields_SettingsTab_MoveField;
	 
		 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
		 public static WebElement extraFields_SettingsTab_First;
	 
     	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
		 public static WebElement extraFields_SettingsTab_FirstDelete;
	 
     	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[2]")
		 public static WebElement extraFields_SettingsTab_MoveFieldOptsDelete;
     	 
     	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[2]/div[1]/div[1]/label[1]")
		 public static WebElement extraFields_SettingsTab_DeleteMessage;
     	 
     	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[2]")
		 public static WebElement extraFields_SettingsTab_DeleteMessageNoOption;
     	
     	 @FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[1]")
		 public static WebElement extraFields_SettingsTab_DeleteMessageYesOption;
     	
     	 

     	 @FindBy(xpath="//a[@class='icon-font7 theme_color-inverse']")
		 public static WebElement extraFields_GeneralTab;
     	 
     	 @FindBy(xpath="//a[contains(text(),'Settings')]")
		 public static WebElement extraFields_SettingsTab;
     	
     	 @FindBy(xpath="//a[contains(text(),'Details')]")
		 public static WebElement extraFields_DetailsTab;
     	
     	 @FindBy(xpath="//a[contains(text(),'Print Layout')]")
		 public static WebElement extraFields_PrintLayout;
     	
     	 @FindBy(xpath="//a[contains(text(),'Tree Tab Update')]")
		 public static WebElement extraFields_TreeTabUpdate;
     	
     	 @FindBy(xpath="//a[@class='icon-font7 theme_color'][contains(text(),'Document Tab')]")
		 public static WebElement extraFields_DocumentTab;
     	
     	 @FindBy(xpath="//a[@class='icon-font7 theme_color'][contains(text(),'Create Tab')]")
		 public static WebElement extraFields_CreateTab;
     	

     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
		public static WebElement extraFields_PreviewTab;
     	
     	
     	@FindBy(xpath="//input[@id='sFileName1']")
		public static WebElement extraFields_PreviewTab_DocumentTab_FileName;
     	
     	@FindBy(xpath="//input[@id='biDocument1']")
		public static WebElement extraFields_PreviewTab_DocumentTab_Document;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[1]")
		public static WebElement extraFields_PreviewTab_DocumentTab_UploadDocument;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[2]")
		public static WebElement extraFields_PreviewTab_DocumentTab_SaveDocument;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]")
		public static WebElement extraFields_PreviewTab_DocumentTab_DeleteDocument;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[7]/table[1]/tbody[1]/tr[1]/td[2]/input[2]")
		public static WebElement extraFields_PreviewTab_DocumentTab_CreateDate;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[9]/div[1]/input[1]")
		public static WebElement extraFields_PreviewTab_DocumentTab_FileSize;
     	
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
		public static WebElement extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[2]/i[1]")
		public static WebElement extraFields_PreviewTab_SaveBtn;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[5]")
		public static WebElement extraFields_PreviewTab_CloseBtn;
     	
     	
     	@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[2]/td[8]/div[1]/label/input")
		public static WebElement selectVendorB;
     	
     	
     	
     	@FindBy(xpath="//input[@id='iPDCDiscountedAC']")
		public static WebElement pdcDicountAccount;
     
    	
     	@FindBy(xpath="//input[@id='uploadBtnbiDocument1']")
		public static WebElement addGroupDocumentTab_UploadDocument;
     	
     	@FindBy(xpath="//tr[1]//td[5]//div[1]//div[1]//div[2]")
		public static WebElement addGroupDocumentTab_SaveDocument;
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]/i[1]")
		public static WebElement addGroupDocumentTab_DeleteDocument;
     	
     	
     	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
		public static WebElement addGroupCreateCreateTab_ExtraFieldUpdate;
     	
		@FindBy(xpath="//td[contains(@class,'tdName padding0')][contains(text(),'Vendor Group')]")
		public static WebElement accountGroupCreation;
		
		               
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement accSelect;
     	
		
	
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
		public static WebElement accSelectBySingleClick;
	
		
		
		

		@FindBy(xpath="//span[contains(text(),'Vendor Group')]")
		public static WebElement clickOnAccountGroupToDisplayTitle;
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
		public static WebElement clickOnAccountGroup;
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
		public static WebElement getCpationOfGroup;
		
	
		@FindBy(xpath="//label[@class='msgInfo']")
		public static WebElement clickOnEmptyGroup;
		
		
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[3]/ul[1]/li[1]/ul[6]/li[1]/ul[3]/li[1]/ul[1]/li[1]/a[2]")
		public static WebElement selectVendorGroupCheckbox;
		
		@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[1]/td[8]/div[1]/label/input")
		public static WebElement selectVendorGroup;
			
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[9]/div[1]/div[1]/div[1]/div[2]/div[1]/label[1]")
		public static WebElement getMsgOnDelete;
		
		@FindBy(xpath="//button[@id='btnOkForDelete']")
		public static WebElement clickOnOkInDelete;
		
		@FindBy(xpath="//button[@id='btnCancelForDelete']")
		public static WebElement clickOnCancelInDelete;
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
		public static WebElement clickOnVendorGroup;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
		public static WebElement getVendorGroupName;
		
		@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']//i[@class='icon-font6 icon-close']")
		public static WebElement closeAccountCreationScreen;
	
		@FindBy(xpath="//input[@id='chkRetainSelection']")
		public static WebElement accountMasterRetain;
		
		@FindBy(xpath="//input[@id='liSelectAllMasters']")
		public static WebElement accountMasterSelect;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement accountFirstCheckBox;
		                
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
		public static WebElement accountSecondCheckBox;
		
		@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']")
		public static WebElement closeAccMasterCreationScreen;
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/ul[1]/li[2]/button[5]/i[1]")
		public static WebElement closeMaster;
		
		
		//Dash board Page
		
		@FindBy(xpath="//*[@id='dashName']")
	    public static WebElement labelDashboard ;
		
		@FindBy(xpath="//*[@id='Select_dash']")
		public static WebElement selectDashboard ;
			
		@FindBy(xpath="//*[@id='Dashboard_AddDash']")
	    public static WebElement newAddDashBoard;
		 
	    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
        public static WebElement dashboardCustomizationSettings;
	
		
	   
	    //Properties Page
	   
	    @FindBy(xpath="//span[contains(text(),'Account Properties')]")
	    public static WebElement accountPropertiesLabel;
	     
		@FindBy(xpath="//input[@id='rbnNormal']")
		public static WebElement normalRadioBtn;

		@FindBy(xpath="//input[@id='rbnDisplayDebitCreditTotalForEachAccountUnderGroup']")
		public static WebElement  displayDebitCreditTotalForEachAccountUnderGroup;
		
		@FindBy(xpath="//input[@id='rbnClubTranOfAllAcctsUnderGrpWhenDispInLedger']")
		public static WebElement  ClubTheTransactionsofAllTheAccountsUnderGroup;
							
		@FindBy(xpath="//input[@id='rbnShowSummaryOfAccount']")
		public static WebElement showSummaryOfTheAccountRadioBtn ;	
		
		@FindBy(xpath="//input[@id='chkSuspendCreditLimit']")
		public static WebElement suspendCreditLimitChkbox ;
								
		@FindBy(xpath="//input[@id='rbnDisplayDebitCreditTotalForEachMonth']")
		public static WebElement  displayDebitCreditTotalForEachMonthRadioBtn;
							
		@FindBy(xpath="//input[@id='rbnrbnDisplayDebitCreditTotalForEachDay']")
		public static WebElement  displayDebitCreditTotalForEachDayRadioBtn;
		
		@FindBy(xpath="//input[@id='rbnNone']")
		public static WebElement  noneRadioBtn;
		
		@FindBy(xpath="//input[@id='rbnConsolidateWhenBothAccountsAreSame']")
		public static WebElement consolidateWhenBothAccountsAreSameRadioBtn ;
		
		@FindBy(xpath="//input[@id='rbnConsolidateAlways']")
		public static WebElement consolidateAlwaysRadioBtn ;
		
		@FindBy(xpath="//select[@id='ddlStatus']")
		public static WebElement  statusDropdown;
		
		@FindBy(xpath="//input[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted']")
		public static WebElement  doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox;
		
		@FindBy(xpath="//input[@id='chkAllowOtherCompaniesToViewRecords']")
		public static WebElement allowOtherCompaniesToViewRecordsCheckbox;
		
		@FindBy(xpath="//input[@id='chkGenerateLedgerByCurrency']")
		public static WebElement generateLedgerByCurrencyCheckbox;
		
		@FindBy(xpath="//input[@id='chkSendSmsEmailWhereverAcDebitedCredited']")
		public static WebElement sendSmsEmailWhereverAcDebitedCreditedCheckbox;
		
		@FindBy(xpath="//span[@id='btnPropOk']")
		public static WebElement properties_okBtn;
		
		@FindBy(xpath="//*[@id='divMasterProperty']/ul/li/span[2]")
		public static WebElement  properties_cancelBtn;
	     
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[5]/span[1]")
		public static WebElement  customizeTabWithTreeTabUpdate;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[6]/span[1]")
		public static WebElement  customizeTabWithDocumentTab;
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[7]/span[1]")
		public static WebElement  customizeTabWithCreateTreeTab;
		
	    @FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
		public static WebElement noIn;
	    
		@FindBy(xpath="//*[@id='dashName']")
		public static WebElement dashboard;
		
		
		@FindBy(xpath="//div[@id='chartdiv0']")
		public static WebElement dashboardGraph;
					
		@FindBy(xpath="//div[@id='DBdashlate1']")
		public static WebElement dashboardLedger;
		
		@FindBy(xpath="//div[@id='DBdashlate2']")
		public static WebElement dashboardInfoPanel;

		
		
		//Logout and Login Screen
		
		@FindBy(xpath="//*[@id='txtUsername']")
		public static WebElement username;

		@FindBy(id="txtPassword")
		public static WebElement password;

		@FindBy(id="btnSignin")
		public static WebElement signIn;

	    @FindBy(id="ddlCompany")
	    public static WebElement companyDropDownList;

		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/header[1]/nav[1]/div[1]/ul[1]/li[5]/a[1]/span[1]")
		public static WebElement userNameDisplay;

		@FindBy(xpath="//span[@class='hidden-xs']")
		public static WebElement userNameDisplay;
		
		
		@FindBy(xpath="//*[@id='companyLogo']")
		public static WebElement companyLogo;

		@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
		public static WebElement companyName;

	    @FindBy(xpath="//*[@id='userprofile']/li/span[2]")
        public static WebElement logoutOption;
		
	    
	    @FindBy(xpath="//input[@id='donotshow']")
		public static WebElement doNotShowCheckbox;
	    
	    @FindBy(xpath="//span[@class='pull-right']")
		public static WebElement closeBtnInDemoPopupScreen;
	    
	    
	    
	    @FindBy(xpath="//div[contains(text(),'Settings')]")
		public static WebElement  settingsmenuBtn;
		
		@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
		public static WebElement  configureTransactionBtn;
		
		@FindBy(xpath="//label[contains(text(),'Preferences')]")
		public static WebElement  preferencesBtn;
		
		@FindBy(xpath="//div[@id='docCustomization']")
		public static WebElement  documentCustomization45Btn;
		
		@FindBy(xpath="//span[@class='icon-general icon-font6 theme_button_color']")
		public static WebElement  createVoucherBtn;
		
		@FindBy(xpath="//span[@id='spanDeleteVoucher']")
		public static WebElement  deletevoucherBtn;
		
		@FindBy(xpath="//a[@id='4608']")
		public static WebElement  receiptsBtn;
		
		@FindBy(xpath="//a[@id='4864']")
		public static WebElement  paymentsBtn;
		
		@FindBy(xpath="//a[@id='5120']")
		public static WebElement  pettyCashBtn;
		
		@FindBy(xpath="//a[@id='5888']")
		public static WebElement  postDatedreceiptsBtn;
		
		@FindBy(xpath="//a[@id='7168']")
		public static WebElement  postDatedpaymentsBtn;
		
		@FindBy(xpath="//a[@id='768']")
		public static WebElement  purchaseVouchersBtn;
		
		@FindBy(xpath="//a[@id='1023']")
		public static WebElement  stockAdjustmentBtn;
		
		@FindBy(xpath="//a[@id='6400']")
		public static WebElement  purchaseReturnsBtn;
		
		@FindBy(xpath="//a[@id='2560']")
		public static WebElement  purcahseOrdersBtn;
		
		@FindBy(xpath="//a[@id='2561']")
		public static WebElement  jobOrdersBtn;
		
		@FindBy(xpath="//a[@id='1280']")
		public static WebElement  materialReceiptsNotesBtn;
		
		@FindBy(xpath="//a[@id='3328']//i[contains(@class,'icon-font7')]")
		public static WebElement  salesInvoiceBtn;
		
		@FindBy(xpath="//a[@id='3329']")
		public static WebElement  cashSalesBtn;
		
		@FindBy(xpath="//a[@id='3330']")
		public static WebElement  hirePurcahseSalesBtn;
		
		@FindBy(xpath="//a[@id='3331']")
		public static WebElement  posSalesBtn;
		
		@FindBy(xpath="//a[@id='1792']")
		public static WebElement  salesReturnsBtn;
		
		@FindBy(xpath="//a[@id='5632']")
		public static WebElement  salesOrdersBtn;
		
		@FindBy(xpath="//a[@id='5633']")
		public static WebElement  productionOrderBtn;
		
		@FindBy(xpath="//a[@id='6144']")
		public static WebElement  deliveryNotesBtn;
		
		@FindBy(xpath="//a[@id='3584']")
		public static WebElement  nonStandardjournalEntriesBtn;
		
		@FindBy(xpath="//a[@id='3585']")
		public static WebElement  interDepartmentalJVBtn;
		
		@FindBy(xpath="//a[@id='3586']")
		public static WebElement  debitNotesLineWiseBtn;
		
		@FindBy(xpath="//a[@id='3587']")
		public static WebElement  creditNotesLineWiseBtn;
		
		@FindBy(xpath="//a[@id='3588']")
		public static WebElement  fixedAssetDepreciationVoucherBtn;
		
		@FindBy(xpath="//a[@id='8704']")
		public static WebElement  journalEntriesBtn;
		
		@FindBy(xpath="//a[@id='3840']")
		public static WebElement  debitNotesBtn;
		
		@FindBy(xpath="//a[@id='4096']")
		public static WebElement  creditNotesBtn;
		
		@FindBy(xpath="//a[@id='4097']")
		public static WebElement  payRollPostingsBtn;
		
		@FindBy(xpath="//a[@id='256']")
		public static WebElement  openingBalancesBtn;
		
		@FindBy(xpath="//a[@id='5376']")
		public static WebElement  shortageInStocksBtn;
		
		@FindBy(xpath="//div[@class='col-xs-12']//a[@id='2048']")
		public static WebElement  excessInStocksBtn;
		
		@FindBy(xpath="//a[@id='3072']")
		public static WebElement  stockTransfersBtn;
		
		@FindBy(xpath="//div[@class='col-xs-12']//a[@id='512']")
		public static WebElement  openingStocksBtn;
		
		@FindBy(xpath="//a[@id='6656']")
		public static WebElement  issuesToProductionBtn;
		
		@FindBy(xpath="//a[@id='1024']")
		public static WebElement  receiptsFromProductionBtn;
		
		@FindBy(xpath="//a[@id='1056']")
		public static WebElement  returnsFromShopfloorBtn;
		
		@FindBy(xpath="//a[@id='6912']")
		public static WebElement  jobWorkIssuesBtn;
		
		@FindBy(xpath="//a[@id='1536']")
		public static WebElement  jobWorkReeceiptsBtn;
		
		@FindBy(xpath="//a[@id='2304']")
		public static WebElement  purchaseQuotationsBtn;
		
		@FindBy(xpath="//a[@id='7424']")
		public static WebElement  salesQuotationsBtn;
		
		@FindBy(xpath="//a[@id='7680']")
		public static WebElement  jobOrderBtn;
		
		@FindBy(xpath="//a[@id='2816']")
		public static WebElement  productionProcessBtn;
		
		@FindBy(xpath="//a[@id='7936']")
		public static WebElement  materialRequisitionBtn;
		
		@FindBy(xpath="//a[@id='8192']")
		public static WebElement  requestForQuoteBtn;
		
		@FindBy(xpath="//a[@id='8448']")
		public static WebElement  forecxJVBtn;
		
		@FindBy(xpath="//span[@id='updateButton']")
		public static WebElement  updateBtn;

		 
	    @FindBy(xpath="//input[@id='donotshow']")
		public static WebElement DontShowChkBox;
	   		    
	    @FindBy(xpath="//span[@class='pull-right']")
	    public static WebElement PopUpcloseBtn;	
		
	   
	    
	    @FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
		public static WebElement  documentsTab;
		
		@FindBy(xpath="//li[@id='navigationtab1']")
		public static WebElement  documentsTabForMaterialReceiptNotes;
		

		@FindBy(xpath="//i[@class='icon-load-from icon-font7']")
		public static WebElement  loadMastersBtn;
		
					@FindBy(xpath="//select[@id='doc_voucherDropDown']")
					public static WebElement  loadmasterDropDown;
					
					@FindBy(xpath="//button[@id='btnSelectDependMaster']")
					public static WebElement  selectAllBtn;
					
					@FindBy(xpath="//button[contains(text(),'Reset')]")
					public static WebElement  resetBtn;
					
					@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
					public static WebElement  okBtn;
		
		@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
		public static WebElement  deleteTagBtn;
		
		@FindBy(xpath="//i[@class='icon-add-group icon-font7']")
		public static WebElement  addGroupBtn;
		
					@FindBy(xpath="//input[@id='doc_GroupName']")
					public static WebElement  groupNameTXt;
					
					@FindBy(xpath="//button[contains(text(),'Add')]")
					public static WebElement  addBtn;
					
					@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
					public static WebElement  cancelBtn;

		@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
		public static WebElement  deletegroupBtn;
		
		
		
		
		
		@FindBy(xpath="//input[@id='doc_baseDocument']")
		public static WebElement  baseDocumentTxt;
		
		@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
		public static WebElement  accountDependencyTxt;
		
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
					public static WebElement  iExchangeAdjustmentGainACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
					public static WebElement  iExchangeAdjustmentLossACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
					public static WebElement  iPrimaryAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCity')]")
					public static WebElement  iCityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
					public static WebElement  iDeliverycityChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBankAc')]")
					public static WebElement  iBankACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
					public static WebElement  iPDCDiscountedACChkBox;
					
		@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
		public static WebElement  itemDependencyTxt;
		
					@FindBy(xpath="//span[contains(text(),'Outlet__')]")
					public static WebElement  outletChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
					public static WebElement  iCostofShortageStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
					public static WebElement  iCostofExcessStockACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
					public static WebElement  iCostofSaleReturnACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
					public static WebElement  iPurchaseVarianceACChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
					public static WebElement  iDefaultBaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
					public static WebElement  iDefaultSalesUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
					public static WebElement  iDefaultPurchaseUnitChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
					public static WebElement  iCostOfIssueAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
					public static WebElement  iStocksAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
					public static WebElement  iSalesAccountChkBox;
					
					@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
					public static WebElement  otherdetails1Box;
					
					@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
					public static WebElement  replenishment1ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Reorder__')]")
					public static WebElement  reorderChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iCategory')]")
					public static WebElement  iCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
					public static WebElement  iWIPAccountChkBox;
					
					@FindBy(xpath="//span[contains(text(),'Classification__')]")
					public static WebElement  classificationChkBox;
					
					@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
					public static WebElement  repelenishment2ChkBox;
					
					@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
					public static WebElement  otherDetails2ChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iBin')]")
					public static WebElement  iBinChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
					public static WebElement  iAlternateCategoryChkBox;
					
					@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
					public static WebElement  iTaxCodeChkBox;
		
		@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
		public static WebElement  accountfilterDropdown;
		
		@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
		public static WebElement  itemfilterDropdown;
		
		
		
		@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/input[1]")
		public static WebElement  titleTxt;
		
		
		
		// Documents Grid Elements
		
			// first row 
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
		public static WebElement  firstrow;
		
		@FindBy(xpath="//div[contains(text(),'Delete Row')]")
		public static WebElement  deleterowBtn;
		
		@FindBy(xpath="//div[contains(text(),'Insert Row')]")
		public static WebElement  insertRowBtn;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
		public static WebElement  masters1;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
		public static WebElement  position1;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
		public static WebElement  showDependency1;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
		public static WebElement  group1;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
		public static WebElement  filter1;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
		public static WebElement  mandatory1;
		
		
		// Second Row... delete and insert row are same
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
		public static WebElement  secondRow;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
		public static WebElement  masters2;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
		public static WebElement  position2;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
		public static WebElement  showDependency2;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
		public static WebElement  group2;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
		public static WebElement  filter2;
		
		@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
		public static WebElement  mandatory2;
		
		
		// Third Row... delete and insert row are same
		
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-0']")
			public static WebElement  thirdRow;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-1']")
			public static WebElement  masters3;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-2']")
			public static WebElement  position3;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-3']")
			public static WebElement  showDependency3;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-4']")
			public static WebElement  group3;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-5']")
			public static WebElement  filter3;
			
			@FindBy(xpath="//td[@id='doc_TagsTable_col_3-6']")
			public static WebElement  mandatory3;
			
			
			// Forth Row... delete and insert row are same
			
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-0']")
				public static WebElement  forthRow;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-1']")
				public static WebElement  masters4;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-2']")
				public static WebElement  position4;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-3']")
				public static WebElement  showDependency4;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-4']")
				public static WebElement  group4;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-5']")
				public static WebElement  filter4;
				
				@FindBy(xpath="//td[@id='doc_TagsTable_col_4-6']")
				public static WebElement  mandatory4;
		
		
		
		// After clicking *** Properties Changes which are same for all rows
		
		@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
		public static WebElement  masterDropDown;
		
		@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
		public static WebElement  positionDropdown;
		
		@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
		public static WebElement  showDependencyDropdown;
		
		@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
		public static WebElement  groupTxt;
		
		@FindBy(xpath="//select[@id='docFilter']")
		public static WebElement  filterDropdown;
		
		@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
		public static WebElement  mandatoryDropDown;
		
		// Grid Elements completed
		
		// Right Panel 
		
		// Home ***************************
		
		@FindBy(xpath="//*[@id='id_menu_tree_1']/a/i")
		public static WebElement  homeExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_2']/a/i")
					public static WebElement  companyExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_3']/a/i")
								public static WebElement  newComapanyBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_131']/a/i")
								public static WebElement  yearEndProcesBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_125']/a/i")
								public static WebElement  interComapnyTransactionBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_134']/a/i")
								public static WebElement  synchronizationBtn;
								
					@FindBy(xpath="//*[@id='id_menu_tree_6']/a/i")
					public static WebElement  securityBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_1000']/a/i")
					public static WebElement  mastersExpandBtn;
				
								@FindBy(xpath="//*[@id='id_menu_tree_220']/a/i")
								public static WebElement  currencyBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_221']/a/i")
								public static WebElement  itemBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_8002']/a/i")
								public static WebElement  schemesExpandBtn;
								
											@FindBy(xpath="//*[@id='id_menu_tree_8015']/a/i")
											public static WebElement  discountDefinitionBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_224']/a/i")
								public static WebElement  mrpBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_225']/a/i")
								public static WebElement  qcBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_234']/a/i")
								public static WebElement  warehouseManagementSystemBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_251']/a/i")
								public static WebElement  maintainceBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8001']/a/i")
								public static WebElement  pointofSaleExpandBtn;
								
											@FindBy(xpath="//*[@id='id_menu_tree_8005']/a/i")
											public static WebElement  memberBtn;
											
											@FindBy(xpath="//*[@id='id_menu_tree_8006']/a/i")
											public static WebElement  giftVoucherBtn;
											
											@FindBy(xpath="//*[@id='id_menu_tree_1025']/a/i")
											public static WebElement  pointOfSaleTableManagementBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_1103']/a/i")
								public static WebElement  payrollBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_1056']/a/i")
								public static WebElement  tdsAnnexureBtn;
								
					@FindBy(xpath="//*[@id='id_menu_tree_16']/a/i")
					public static WebElement  settingsExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_66']/a/i")
								public static WebElement  authorizationBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_25']/a/i")
					public static WebElement  datamanagementBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_20']/a/i")
					public static WebElement  utilitiesBtn;
		
					
		// Finance *************************			
					
		@FindBy(xpath="//*[@id='id_menu_tree_60']/a/i")
		public static WebElement  financeExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_61']/a/i")
					public static WebElement  financeTransactionExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_2001']/a/i")
								public static WebElement  cashBankBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_2007']/a/i")
								public static WebElement  financePurchasesBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_2014']/a/i")
								public static WebElement  financeSalesBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_2023']/a/i")
								public static WebElement  journalsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_2039']/a/i")
								public static WebElement  manufacturingBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_219']/a/i")
								public static WebElement  autoPostingsBtn;
								
					@FindBy(xpath="//*[@id='id_menu_tree_62']/a/i")
					public static WebElement  creditManagementExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_217']/a/i")
								public static WebElement  delinquencyBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_81']/a/i")
					public static WebElement  financeReportsExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_82']/a/i")
								public static WebElement  cashAndBankBookBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_502']/a/i")
								public static WebElement  salesReportBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_506']/a/i")
								public static WebElement  purchaseReportBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_207']/a/i")
								public static WebElement  vatBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_514']/a/i")
								public static WebElement  registersBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_523']/a/i")
								public static WebElement  salesAndPurchaseAnalysisBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_568']/a/i")
								public static WebElement  miscellaneousAnalysisBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_536']/a/i")
								public static WebElement  masterInformationBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_520']/a/i")
								public static WebElement  financeReportsAuditTrialBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_50001']/a/i")
					public static WebElement  fixedAssetBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_530']/a/i")
					public static WebElement  finalAccountsBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_558']/a/i")
					public static WebElement  receiveableAndPayableAnalysisExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_605']/a/i")
								public static WebElement  customerDetailBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_607']/a/i")
								public static WebElement  customerSummaryBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_606']/a/i")
								public static WebElement  vendorDetailBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_608']/a/i")
								public static WebElement  vendorSummaryBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_3301']/a/i")
					public static WebElement  budgetExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_3304']/a/i")
								public static WebElement  reviseBudgetBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_3321']/a/i")
								public static WebElement  budgetReportsBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_3311']/a/i")
					public static WebElement  onlinepaymentsBtn;
					
	//Inventory   *************************
					
		@FindBy(xpath="//*[@id='id_menu_tree_135']/a/i")
		public static WebElement  inventoryExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_137']/a/i")
					public static WebElement  inventoryTransactionExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_139']/a/i")
								public static WebElement  inventoryPurchasesBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_140']/a/i")
								public static WebElement  inventorySalesBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_2033']/a/i")
								public static WebElement  stocksBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_200']/a/i")
					public static WebElement  inventoryReportsExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_540']/a/i")
								public static WebElement  binsReportBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_621']/a/i")
								public static WebElement  stockAgeingAnalysisBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_550']/a/i")
					public static WebElement  ordermanagementExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_600']/a/i")
								public static WebElement  analysisOfLinkedUnlinkedDocumentsBtn;
								
	//Fixed Asset************************							
		
		@FindBy(xpath="//*[@id='id_menu_tree_136']/a/i")
		public static WebElement  fixedAssetExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_138']/a/i")
					public static WebElement  fixedAssetTransactionExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_50010']/a/i")
								public static WebElement  fixedAssetReportsBtn;
								
	//Production ***********************							
		
		@FindBy(xpath="//*[@id='id_menu_tree_3000']/a/i")
		public static WebElement  productionExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_3001']/a/i")
					public static WebElement  productionTransactionBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_625']/a/i")
					public static WebElement  productionReportBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_3006']/a/i")
					public static WebElement  mrpSettingsBtn;
					
	//Point Of Sale ***********************************				
		
		@FindBy(xpath="//*[@id='id_menu_tree_8000']/a/i")
		public static WebElement  pointofSale_ExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_8004']/a/i")
					public static WebElement  mainScreenBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_8500']/a/i")
					public static WebElement  posReportsExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_8501']/a/i")
								public static WebElement  retailSaleReportBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8507']/a/i")
								public static WebElement  summarysalesReportBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8513']/a/i")
								public static WebElement  preOrderReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8523']/a/i")
								public static WebElement  memberReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8530']/a/i")
								public static WebElement  memberPointsReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8535']/a/i")
								public static WebElement  itemReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8540']/a/i")
								public static WebElement  cashReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8545']/a/i")
								public static WebElement  stockReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8550']/a/i")
								public static WebElement  periodicSalesReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8556']/a/i")
								public static WebElement  lastYearComaprisionReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8562']/a/i")
								public static WebElement  miscellaneousReportsBtn;
								
								@FindBy(xpath="//*[@id='id_menu_tree_8571']/a/i")
								public static WebElement  restaurantReportsBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_8900']/a/i")
					public static WebElement  reportsTableManagementBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_8003']/a/i")
					public static WebElement  utilitiesExpandBtn;
					
								@FindBy(xpath="//*[@id='id_menu_tree_8027']/a/i")
								public static WebElement  bbqConversionBtn;
		
		
	//Quality Control *****************  	
		
		
		
		@FindBy(xpath="//*[@id='id_menu_tree_150']/a/i")
		public static WebElement  qualityControlExpandBtn;
		
					@FindBy(xpath="//*[@id='id_menu_tree_151']/a/i")
					public static WebElement  qualityControlTransactionBtn;
					
					@FindBy(xpath="//*[@id='id_menu_tree_152']/a/i")
					public static WebElement  qualityControlReportsBtn;


	    
	 // Views Tab
		
	    
		@FindBy(xpath="//span[@class='icon-views'")
		public static WebElement  viewsTab;
		

		
	// Export Fields 
		
		@FindBy(xpath="//span[contains(text(),'Export Fields')]")
		public static WebElement exportFieldsTab;
		
	// Triggers
		
		@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
		public static WebElement  triggersTab;	
		
	//  Document Numbering
		
		@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
		public static WebElement  documentNumberingTab;
		
	// Hire Purchase	
		
		@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
		public static WebElement hirePurchasetab;
		

		
	// Reports Tab	
		
		@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
		public static WebElement  reportsTab;	
		
	// Schemes

		@FindBy(xpath="//span[contains(text(),'Schemes')]")
		public static WebElement schemestab;	
			
	    
	    
		
		
	////////////////////////////////////////////////////////////////////////////////
		
		
		//-*-------------------------------------------------------------------------------------------------------------	
			
		// Miscellaneous Tab
						
			@FindBy(xpath="//span[@class='icon-miscellaneous']")
			public static WebElement  miscellaneousTab;
			
			@FindBy(xpath="//input[@id='misc_Abbrivation']")
			public static WebElement  abbreviationTxt;
			
			@FindBy(xpath="//input[@id='misc_defaultAcc']")
			public static WebElement  defaultAccount1Txt;
			
			@FindBy(xpath="//*[@id='misc_defaultAcc_input_image']/span")
			public static WebElement  defaultAccount1Dropdown;
			
			@FindBy(xpath="//*[@id='misc_defaultAcc_input_settings']/span")
			public static WebElement  defaultAccount1SettingBtn;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_container']")
			public static WebElement  defaultAccount1ContainerTxt;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc_customize_popup_footer']//input[1]")
			public static WebElement  defaultAccount1StandardfieldsBtn;
			
						@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_list']")
						public static WebElement  defaultAccount1FieldsDropdown;
						
						@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_header']")
						public static WebElement  defaultAccount1HeaderTxt;
						
						@FindBy(xpath="//select[@id='misc_defaultAcc_customize_popup_standardfields_alignment']")
						public static WebElement  defaultAccount1AllignmentDropdown;
						
						@FindBy(xpath="//input[@id='misc_defaultAcc_customize_popup_standardfields_width']")
						public static WebElement  defaultAccount1WidthTxt;
						
						@FindBy(xpath="//section[@id='page_Content']//input[3]")
						public static WebElement  defaultAccount1StandardFieldsokBtn;
						
						@FindBy(xpath="//section[@id='page_Content']//input[4]")
						public static WebElement  defaultAccount1StanadardFieldscancelBtn;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc_search_container']//input[2]")
			public static WebElement  defaultAccount1DeleteColumnBtn;
			
			@FindBy(xpath="//section[@id='page_Content']//input[3]")
			public static WebElement  defaultAccount1okBtn;
			
			@FindBy(xpath="//section[@id='page_Content']//input[4]")
			public static WebElement  defaultAccount1cancelBtn;
			
			@FindBy(xpath="//input[@id='misc_defaultAcc2']")
			public static WebElement  defaultAccount2Txt;

			@FindBy(xpath="//*[@id='misc_defaultAcc2_input_image']/span")
			public static WebElement  defaultAccount2Dropdown;
			
			@FindBy(xpath="//*[@id='misc_defaultAcc2_input_settings']/span")
			public static WebElement  defaultAccount2SettingBtn;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_container']")
			public static WebElement  defaultAccount2ContainerTxt;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc2_customize_popup_footer']//input[1]")
			public static WebElement  defaultAccount2StandardfieldsBtn;
			
						@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_list']")
						public static WebElement  defaultAccount2FieldsDropdown;
						
						@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_header']")
						public static WebElement  defaultAccount2HeaderTxt;
						
						@FindBy(xpath="//select[@id='misc_defaultAcc2_customize_popup_standardfields_alignment']")
						public static WebElement  defaultAccount2AllignmentDropdown;
						
						@FindBy(xpath="//input[@id='misc_defaultAcc2_customize_popup_standardfields_width']")
						public static WebElement  defaultAccount2WidthTxt;
						
						@FindBy(xpath="//section[@id='page_Content']//input[3]")
						public static WebElement  defaultAccount2StandardFieldsokBtn;
						
						@FindBy(xpath="//section[@id='page_Content']//input[4]")
						public static WebElement  defaultAccount2StanadardFieldscancelBtn;
			
			@FindBy(xpath="//div[@id='misc_defaultAcc2_search_container']//input[2]")
			public static WebElement  defaultAccount2DeleteColumnBtn;
			
			@FindBy(xpath="//section[@id='page_Content']//input[3]")
			public static WebElement  defaultAccount2okBtn;
			
			@FindBy(xpath="//section[@id='page_Content']//input[4]")
			public static WebElement  defaultAccount2cancelBtn;
			
			@FindBy(xpath="//input[@id='misc_chkallowDeptAppropriation']")
			public static WebElement  allowDeptAppropriationChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkTransDateWhnAuthzed']")
			public static WebElement  changeTransactionDateWhenAuthorizedChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdateCntbePriorPrevDocDate']")
			public static WebElement  dateCannotBePriortoPrevdateChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdetailedDisinSummryBar']")
			public static WebElement  detailedDisplayInSummaryBarChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdontAllowEditThisDoc']")
			public static WebElement  dontAllowEditThisDocChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkDontAllowInputDate']")
			public static WebElement  dontAllowInputDateChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdontRestrictAcc1Type']")
			public static WebElement  dontRestrictAccount1TypeChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdontRestrictAcc2Type']")
			public static WebElement  dontRestrictAccount2TypeChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdontRestrictonLoginAcc']")
			public static WebElement  dontRestrictOnLoginAccountChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdontRestrictLoginTag']")
			public static WebElement  dontRestrictOnLoginTagChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkenableVersion']")
			public static WebElement  enableVersionChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkPrintUsingDefaultPrintFormat']")
			public static WebElement  printUsingDefaultPrinterAndFormatChkBox;
			
			@FindBy(xpath="//select[@id='misc_chkCheckBudget']")
			public static WebElement  checkbudgetDropdown;
			
			@FindBy(xpath="//select[@id='misc_PickEmailFrom']")
			public static WebElement  pickEmailFromDropdown;
			
			// Restrictions Sections
			
			@FindBy(xpath="//input[@id='misc_restrictionRdStop']")
			public static WebElement  stopRadio;
			
			@FindBy(xpath="//input[@id='misc_restrictionRdwarnandAllow']")
			public static WebElement  warnAndAllowRadio;
			
			@FindBy(xpath="//input[@id='misc_restrictionentryCondition_textbox']")
			public static WebElement  entryRestrictConditionTxt;
			
						@FindBy(xpath="//input[@id='misc_restrictionentryCondition_formulaText']")
						public static WebElement  miscformulaTxt;
						
						@FindBy(xpath="//div[@id='misc_restrictionentryCondition_expandedFormula']")
						public static WebElement  miscexpandeFormula;
						
						 // Grid Elements 
						
						@FindBy(xpath="//span[@class='icon-collepse icon-font8']")
						public static WebElement  miscTransactionExpandBtn;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-2']")
						public static WebElement  miscQuantity;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_2-3']")
						public static WebElement  miscqty;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-2']")
						public static WebElement  miscRate;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_3-3']")
						public static WebElement  miscrt;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-2']")
						public static WebElement  miscAlternateQty;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_4-3']")
						public static WebElement  miscqtya;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-2']")
						public static WebElement  miscGrossAmount;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_5-3']")
						public static WebElement  miscgr;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-2']")
						public static WebElement  miscStockValue;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_6-3']")
						public static WebElement  miscstkv;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-2']")
						public static WebElement  miscAccount;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_7-3']")
						public static WebElement  miscacc;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-2']")
						public static WebElement  miscAccount2;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_8-3']")
						public static WebElement  miscacc2;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-2']")
						public static WebElement  miscExchangeRate;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_9-3']")
						public static WebElement  miscexrt;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-2']")
						public static WebElement  miscQtyinBaseUnit;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_10-3']")
						public static WebElement  miscqtyb;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-2']")
						public static WebElement  miscCurrency;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_11-3']")
						public static WebElement  misccrn;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-2']")
						public static WebElement  miscValueOfThetagMasterIDofTheTag;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_12-3']")
						public static WebElement  misctgval;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-2']")
						public static WebElement  miscNetAmount;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_13-3']")
						public static WebElement  miscnet;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-2']")
						public static WebElement  miscNetAmountInOriginalCurrency;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_14-3']")
						public static WebElement  miscneto;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-2']")
						public static WebElement  miscTotalQuantity;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_15-3']")
						public static WebElement  misctqty;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-2']")
						public static WebElement  miscTotalGross;
						
						@FindBy(xpath="//td[@id='formulaGridmisc_restrictionentryCondition_col_16-3']")
						public static WebElement  misctgr;
						
						// grid completed
						
						
						@FindBy(xpath="//input[@id='misc_restrictionentryCondition_availableVariables']")
						public static WebElement  searchTxt;
						
						@FindBy(xpath="//button[@id='misc_restrictionentryCondition_PlusOpt']")
						public static WebElement  plusBtn;
						
						@FindBy(xpath="//button[contains(text(),'-')]")
						public static WebElement  minusBtn;
						
						@FindBy(xpath="//button[contains(text(),'/')]")
						public static WebElement  divideBtn;
						
						@FindBy(xpath="//button[contains(text(),'*')]")
						public static WebElement  multiplyBtn;
				
						@FindBy(xpath="//button[5]")
						public static WebElement  brackets1Btn;
						
						@FindBy(xpath="//button[6]")
						public static WebElement  brackets2Btn;
						
						@FindBy(xpath="//button[contains(text(),'~')]")
						public static WebElement  tildeBtn;
						
						@FindBy(xpath="//button[contains(text(),'&')]")
						public static WebElement  andBtn;
						
						@FindBy(xpath="//button[contains(text(),'%')]")
						public static WebElement  percentBtn;
						
						@FindBy(xpath="//button[contains(text(),']')]")
						public static WebElement  squarebracketBtn;
						
						@FindBy(xpath="//button[contains(text(),'|')]")
						public static WebElement  verticalBarBtn;
						
						@FindBy(xpath="//button[contains(text(),'\')]")
						public static WebElement  backSlashBtn;
						
						@FindBy(xpath="//button[contains(text(),'<')]")
						public static WebElement  lessThanbtn;
						
						@FindBy(xpath="//button[contains(text(),'>')]")
						public static WebElement  greaterThanBtn;
						
						@FindBy(xpath="//button[contains(text(),'!')]")
						public static WebElement  exclamationBtn;
						
						@FindBy(xpath="//button[contains(text(),'=')]")
						public static WebElement  equalBtn;
						
						@FindBy(xpath="//button[contains(text(),'?:')]")
						public static WebElement  questionBtn;
					
						@FindBy(xpath="//button[contains(text(),'^')]")
						public static WebElement  caretBtn;
						
						@FindBy(xpath="//button[contains(text(),'DateDiff()')]")
						public static WebElement  dateDiffBtn;
						
						@FindBy(xpath="//button[contains(text(),'Cond()')]")
						public static WebElement  condBtn;
						
						@FindBy(xpath="//button[contains(text(),'Min()')]")
						public static WebElement  minBtn;
						
						@FindBy(xpath="//button[contains(text(),'Max()')]")
						public static WebElement  maxBtn;
						
						@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Ok']")
						public static WebElement  entryRestrictConditionokBtn;
						
						@FindBy(xpath="//button[@id='misc_restrictionentryCondition_Cancel']")
						public static WebElement  entryRestrictConditioncancelBtn;
						
			@FindBy(xpath="//input[@id='misc_restrictionEntryMessage']")
			public static WebElement  entryRestrictMessageTxt;
			
		// Apply Rules On	
			
			@FindBy(xpath="//input[@id='misc_chkRulesExtMod']")
			public static WebElement applyRulesOnExternalModuleChkbox;
			
			@FindBy(xpath="//input[@id='misc_chkRulesLink']")
			public static WebElement applyRulesOnLinkChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkRulesItems']")
			public static WebElement applyRulesOnSetItemsChkBox;
			
//			Apply Dependency On
			
			@FindBy(xpath="//input[@id='misc_chkdependencyExtMod']")
			public static WebElement applyDependencyOnExternalModuleChkbox;
			
			@FindBy(xpath="//input[@id='misc_chkdependencyLink']")
			public static WebElement applyDependencyOnLinkChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkdependencyItems']")
			public static WebElement applyDependencyOnSetItemsChkBox;
			
		// Posting Details	
			
			@FindBy(xpath="//input[@id='misc_PostingUpdateFA']")
			public static WebElement updateFAChkBox;
			
			@FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
			public static WebElement selectAmountInEveryLineChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkDetailedPosting']")
			public static WebElement detailedPostingChkbox;
			
			@FindBy(xpath="//input[@id='misc_chkUpdateStock']")
			public static WebElement updateStockChkBox;
			
			@FindBy(xpath="//input[@id='misc_chkFixUpdateStock']")
			public static WebElement allowChangingUpdateStock;
			
			@FindBy(xpath="//input[@id='misc_PostingPostServiceTax']")
			public static WebElement postServicetaxChkBox;
			
			@FindBy(xpath="//input[@id='misc_PostingPostTDS']")
			public static WebElement postTDSchkBox;
			
			@FindBy(xpath="//input[@id='misc_PostingPostVAT']")
			public static WebElement postVATchkBox;
			
			@FindBy(xpath="//input[@id='misc_PostingLinkToLetterOfCredit']")
			public static WebElement linkToLetterOfCreditChkBox;
			
			@FindBy(xpath="//input[@id='misc_Dontcheckcreditlimit']")
			public static WebElement dontcheckcreditlimitChkBox;
			
		// Currency	
			
			@FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
			public static WebElement addCurrencyInDropdown;
			
			@FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
			public static WebElement inputExchangeRateChkBox;
			
			@FindBy(xpath="//input[@id='misc_currencyPostExgRateDiff']")
			public static WebElement postExchangeRateChkDifferrenceBox;
			
			@FindBy(xpath="//input[@id='misc_currencyPostExchgRateBasedOnStd']")
			public static WebElement postExchangeRateDifferenceBasedOnStandardRuleChkBox;
			
		// AR/AP	
			
			
			@FindBy(xpath="//select[@id='misc_arapDueDate']")
			public static WebElement dueDateDropdown;
			
			@FindBy(xpath="//select[@id='misc_arapARAPOptions']")
			public static WebElement arapOptionsDropdown;
			
			@FindBy(xpath="//select[@id='misc_arapOptions']")
			public static WebElement optionsdDropdown;
					       
			@FindBy(xpath="//input[@id='misc_arapchkSelectbillsbeforeamt']")
			public static WebElement selectbillsbeforeAmountChkBox;
			
			@FindBy(xpath="//input[@id='misc_arapchkPostdiscountbasedoncrdays']")
			public static WebElement postDiscountBasedOnCrediDaysChkBox;
			
			@FindBy(xpath="//input[@id='misc_arapchkInputPaymentTerms']")
			public static WebElement inputPaymenttermsChkBox;
			
			@FindBy(xpath="//select[@id='misc_arapNarration']")
			public static WebElement narrationDropdown;
				

	//**----------------------------------------------------------------------------------------------------------    
	// Edit Screen Tab     
		    
		    @FindBy(xpath="//span[contains(text(),'Edit Screen')]")
		   	public static WebElement  editScreenTab; 
			
			@FindBy(xpath="//i[@class='icon-add icon-font7']")
			public static WebElement editScreenaddBtn;

			@FindBy(xpath="//a[contains(text(),'Field Details')]")
			public static WebElement editScreenFieldDetailsTab;
	   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
			public static WebElement  editScreenCaptionTxt;

			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_DataType']")
			public static WebElement  editScreenCaptionDataTypeDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_DefaultValue']")
			public static WebElement editScreenDefaultValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
			public static WebElement editScreenNoOfDecimalsTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_toolTip']")
			public static WebElement editScreenToolTipTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_bannerText']")
			public static WebElement editScreenBannerTextTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MinValue']")
			public static WebElement editScreenMinimunValueTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_MaxValue']")
			public static WebElement editScreenMaximunValueTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
			public static WebElement editScreenAddFieldsBehaviourDropdown;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
			public static WebElement  editScreenAddBehaviourformulaTxt;
			
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_Formula_Ok']")
			public static WebElement  editScreenAddBehaviourFormulaokBtn;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			public static WebElement editScreenPreloadTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
			public static WebElement editScreenRestrictformulaTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
			public static WebElement editScreenRoundOffsDropdown;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
			public static WebElement editScreenRoundOffToTxt;
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
			public static WebElement editScreenRestrictMessageTxt;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
			public static WebElement editScreenAddToNetDropdown;
		   
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
			public static WebElement EditScreenAddToStockDropDown;
		
			@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
			public static WebElement editScreenpositionDropdown;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
			public static WebElement editScreenColumnWidthTxt;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			public static WebElement editScreenValueInBaseCurrencyChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkValinBaseCurency']")
			public static WebElement editScreenHideFromSummaryChkBox;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkPostToAcc']")
			public static WebElement editScreenPostToAccountChkBox;  
		 
			@FindBy(xpath="//input[@id='acc1-1']")
			public static WebElement editScreenAccount1Radio;  
		   
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
			public static WebElement editScreenAccount1Txt;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_image']/span")
			public static WebElement editScreenAccount1ExpandBtn;  
		   
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc1_input_settings']/span")
			public static WebElement editScreenAccount1SettingsBtn;  
		   
					    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_container']")
						public static WebElement editScreenAccount1Container;  
					    
					    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_footer']//input[1]")
						public static WebElement editScreenAccount1StandardFiledsBtn;  
					    
								    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_list']")
									public static WebElement editScreenAccount1StandardFiledsDropdown;  
								    
								    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_header']")
									public static WebElement editScreenAccount1StandardFiledsHeaderTxt;  
								    
								    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_alignment']")
									public static WebElement editScreenAccount1StandardFiledsAllignmentDropdown; 
								    
								    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1_customize_popup_standardfields_width']")
									public static WebElement editScreenAccount1StandardFiledsWidthTxt;  
								    
								    @FindBy(xpath="//section[@id='page_Content']//input[3]")
									public static WebElement editScreenAccount1StandardFiledsokBtn;  
								    
								    @FindBy(xpath="//section[@id='page_Content']//input[4]")
									public static WebElement editScreenAccount1StandardFiledscancelBtn;  
					    
					    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc1_search_container']//input[2]")
						public static WebElement editScreenAccount1deleteColumnBtn;
					    
					    @FindBy(xpath="//section[@id='page_Content']//input[3]")
					   	public static WebElement editScreenAccount1okBtn;  
					       
					       @FindBy(xpath="//section[@id='page_Content']//input[4]")
					   	public static WebElement editScreenAccount1cancelBtn;
		
		
	        @FindBy(xpath="//input[@id='chkPostToAccountAllowEntry']")
			public static WebElement editScreenAccount1AllowEntryChkBox;
	        
			@FindBy(xpath="//input[@id='acc2-2']")
			public static WebElement editScreenAccount2Radio;  
			    
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2']")
			public static WebElement editScreenAccount2Txt;  
			    
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_image']/span")
			public static WebElement editScreenAccount2ExpandBtn;
		  
		   @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_defaultAcc2_input_settings']/span")
		  	public static WebElement editScreenAccount2SettingsBtn;  
		      
		  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_container']")
		  				public static WebElement editScreenAccount2Container;  
		  			    
		  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_footer']//input[1]")
		  				public static WebElement editScreenAccount2StandardFiledsBtn;  
		  			    
		  						    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_list']")
		  							public static WebElement editScreenAccount2StandardFiledsDropdown;  
		  						    
		  						    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_header']")
		  							public static WebElement editScreenAccount2StandardFiledsHeaderTxt;  
		  						    
		  						    @FindBy(xpath="//select[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_alignment']")
		  							public static WebElement editScreenAccount2StandardFiledsAllignmentDropdown; 
		  						    
		  						    @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc2_customize_popup_standardfields_width']")
		  							public static WebElement editScreenAccount2StandardFiledsWidthTxt;  
		  						    
		  						    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		  							public static WebElement editScreenAccount2StandardFiledsokBtn;  
		  						    
		  						    @FindBy(xpath="//section[@id='page_Content']//input[4]")
		  							public static WebElement editScreenAccount2StandardFiledscancelBtn;  
		  			    
		  			    @FindBy(xpath="//div[@id='editScreen_FieldsCustomization_defaultAcc2_search_container']//input[2]")
		  				public static WebElement editScreenAccount2deleteColumnBtn;
		  			    
		  			    @FindBy(xpath="//section[@id='page_Content']//input[3]")
		  			   	public static WebElement editScreenAccount2okBtn;  
		  			       
		  			       @FindBy(xpath="//section[@id='page_Content']//input[4]")
		  			   	public static WebElement editScreenAccount2cancelBtn;
		   
		   @FindBy(xpath="//input[@id='chkPostToAccount1AllowEntry']")
		   public static WebElement editScreenAccount2AllowEntryChkBox;
		  			       
		   @FindBy(xpath="//input[@id='acc1-3']")
		   public static WebElement editScreenAccount1VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_1Var']")
		   public static WebElement editScreenAccount1VariableTxt;
		   
		   @FindBy(xpath="//input[@id='acc2-4']")
		   public static WebElement editScreenAccount2VariableRadio; 
		  
		   @FindBy(xpath="//input[@id='Account_2Var']")
		   public static WebElement editScreenAccount2VariableTxt;
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RegularExpr']")
		   public static WebElement editScreenRegularExpTxt; 
		   
		   @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_ErrorMsg']")
		   public static WebElement editScreenerrorMessageTxt; 
		
		 // properties  
		   
		  @FindBy(xpath="//a[contains(text(),'Properties')]")
		  public static WebElement editScreenPropertiesTab;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkAuditTrail']")
		  public static WebElement editScreenauditTrailChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantExprt']")
		  public static WebElement editScreencantExportChkBox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkCantImprt']")
		  public static WebElement editScreencantImportChkbox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkHidden']")
		  public static WebElement editScreenhiddenChkbox;  
		  
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkMandatory']")
		  public static WebElement editScreenmandatorychkBox; 
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkNotAvailForReports']")
		  public static WebElement editScreennotAvailableForReportsChkBox;  
		     
		  @FindBy(xpath="//input[@id='editScreen_FieldsCustomization_chkReadOnly']")
		  public static WebElement editScreenreadOnlyChkBox;  
		 
		     
		  @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_btns']/span[1]")
		  public static WebElement editScreenApplyBtn;  
		     
		  @FindBy(xpath="//span[@id='editScreen_FieldsCustomization_Close']")
		  public static WebElement editScreencloseBtn;  
		  
		
		 
		  @FindBy(xpath="//a[@href='#editScreen_FieldsCustomization_ExternalModules']")
		  public static WebElement editScreenExternalModulesTab; 
		  
		  @FindBy(xpath="//select[@id='cmbOnEvent_VT_769_7']")
		  public static WebElement editScreenOnEventDrpDwn; 
		  
		  @FindBy(xpath="//select[@id='cmbModuleType_VT_769_7']")
		  public static WebElement editScreenModuleTypeDrpDwn; 
		  
		  @FindBy(xpath="//select[@id='cmbClassname_VT_769_7']")
		  public static WebElement editScreenClassNameDrpDwn; 
		  
		  @FindBy(xpath="//input[@id='txtModuleName_VT_769_7']")
		  public static WebElement editScreenModuleNameTxt; 
		  
		  @FindBy(xpath="//select[@id='cmbFunctionName_VT_769_7']")
		  public static WebElement editScreenFunctionNameDrpDwn; 
		  
		  @FindBy(xpath="//input[@id='btnInsert_VT_769_7']")
		  public static WebElement editScreenInsertBtn; 
		  
		  @FindBy(xpath="//input[@id='btnRemove_VT_769_7']")
		  public static WebElement editScreenRemoveBtn; 
		  
		  
		// External Module Tab is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
		// External Functions(External Fields) Changes From Screen to Screen
		
		  
		  // Formatting Tab
		  
		  @FindBy(xpath="//*[@id='editScreen_FieldsCustomization_tabs']/li[3]/a")
		    public static WebElement editScreenformattingTab;

			@FindBy(xpath="//*[@id='fontFamily_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontFamilyDropdown;
			
		    @FindBy(xpath="//*[@id='fontStyle_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontStyleDropdown;

		    @FindBy(xpath="//*[@id='fontWeight_editScreen_FieldsCustomization_FontCtrl']")
		    public static WebElement editScreenFontWeightDropdown;

			@FindBy(xpath="//*[@id='fontSizes_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenFontSizeDropdown;
			
			@FindBy(xpath="//*[@id='fontForeColor_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenForeColourDropdown;
			
			@FindBy(xpath="//*[@id='fontBackColor_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenBackColourDropdown;
			
			@FindBy(xpath="//*[@id='chkBaseline_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenBaseLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkOverLine_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenOverLineCheckbox;
			
			@FindBy(xpath="//*[@id='chkStrikeThrough_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement EditScreenStrikeThroughCheckbox;
			
			@FindBy(xpath="//*[@id='chkUnderline_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenUnderlineCheckbox;
			
			@FindBy(xpath="//*[@id='previewfont_editScreen_FieldsCustomization_FontCtrl']")
			public static WebElement editScreenFontPreviewTxt;
			
			@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Formatting_chkenableFont']")
			public static WebElement editScreenenableFontChkbox;
		
			
			@FindBy(xpath="//div[@id='EditScreen']//div[@id='editScreen_CustomizeButtons']//span[2]")
			public static WebElement editScreenLoadFieldsBtn;
			
			
			
		  @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
		  public static WebElement editScreenLoadFieldsBtn;
		  
		  @FindBy(xpath="//span[@class='dropdown-toggle theme_button_color']")
		  public static WebElement editScreenCustomizeGridBtn;
		     
		  @FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
		  public static WebElement editScreenLoadFieldsDropdown;  
		     
		  @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[1]")
		  public static WebElement editScreenselectAllBtn;  
		  
		  @FindBy(xpath="//div[@id='editScreen_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
		  public static WebElement editScreenokBtn;  
		     
		  @FindBy(xpath="//input[@id='searchlayout2']")
		  public static WebElement editScreenSearchTxt;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenPrev']")
		  public static WebElement editScreenPreviousBtn;  
		     
		  @FindBy(xpath="//button[@id='btnEditScreenNext']")
		  public static WebElement editScreenNextBtn;  
		  
		  @FindBy(xpath="//*[@id='editScreen_tabContent']/label")
			public static WebElement editScreenRatePreloadLabel;
		  
		  @FindBy(xpath="//select[@id='cmbBehaviour']")
		  public static WebElement editScreenBehaviourDropdown;
		  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
		  public static WebElement editScreenQuantityPreloadedTxt;
		  
		  
		  @FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
		  public static WebElement  formulaTxt;
			
		  @FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
		  public static WebElement  expandeFormula;
			
		 // Grid Elements 
		
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_1-2']//span[@class='icon-collepse icon-font8']")
		public static WebElement  editScreenTransactionExpandBtn;
		
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-2']")
					public static WebElement  editScreenQuantity;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_2-3']")
					public static WebElement  editScreenqty;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-2']")
					public static WebElement  editScreenRate;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_3-3']")
					public static WebElement  editScreenrt;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-2']")
					public static WebElement  editScreenAlternateQty;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_4-3']")
					public static WebElement  editScreenqtya;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-2']")
					public static WebElement  editScreengrossAmount;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_5-3']")
					public static WebElement  editScreengr;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-2']")
					public static WebElement  editScreenStockValue;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_6-3']")
					public static WebElement  editScreenstkv;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-2']")
					public static WebElement  editScreenAccount;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_7-3']")
					public static WebElement  EditScreenacc;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-2']")
					public static WebElement  editScreenAccount2;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_8-3']")
					public static WebElement  editScreenacc2;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-2']")
					public static WebElement  editScreenExchangeRate;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_9-3']")
					public static WebElement  editScreenexrt;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-2']")
					public static WebElement  editScreenqtyinBaseUnit;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_10-3']")
					public static WebElement  editScreenqtyb;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-2']")
					public static WebElement  editScreenCurrency;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_11-3']")
					public static WebElement  editScreencrn;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-2']")
					public static WebElement  editScreenValueOfThetagMasterIDofTheTag;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_12-3']")
					public static WebElement  editScreentgval;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-2']")
					public static WebElement  editScreenNetAmount;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_13-3']")
					public static WebElement  EditScreennet;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-2']")
					public static WebElement  editScreenNetAmountInOriginalCurrency;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_14-3']")
					public static WebElement  editScreenneto;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-2']")
					public static WebElement  editScreenTotalQuantity;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_15-3']")
					public static WebElement  editScreentqty;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-2']")
					public static WebElement  editScreenTotalGross;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_16-3']")
					public static WebElement  editScreentgr;
					
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_17-2']//span[@class='icon-expand icon-font8']")
		public static WebElement  screenFiledExpandBtn;
		
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-2']")
					public static WebElement  mrnQtyInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_18-3']")
					public static WebElement  sb1;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-2']")
					public static WebElement  mrnQtyCalculatedValue;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_19-3']")
					public static WebElement  sbo1;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-2']")
					public static WebElement  qtyBalancedInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_20-3']")
					public static WebElement  sb2;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-2']")
					public static WebElement  qtyCalculatedValue;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_21-3']")
					public static WebElement  sbO2;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-2']")
					public static WebElement  averagerateInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_22-3']")
					public static WebElement  sb3;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-2']")
					public static WebElement  avreageRateCalculatedValue;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_23-3']")
					public static WebElement  sbO3;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-2']")
					public static WebElement  addValueInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_24-3']")
					public static WebElement  sb4;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-2']")
					public static WebElement  addValueInputCalculatedValue;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_25-3']")
					public static WebElement  sbO4;
		
		@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_26-2']//span[@class='icon-collepse icon-font8']")
		public static WebElement  layoutFieldExpandBtn;
		
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-2']")
					public static WebElement  appropriateBasedOnInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_27-3']")
					public static WebElement  lh0;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-2']")
					public static WebElement  additionalValueInput;
					
					@FindBy(xpath="//td[@id='formulaGrideditScreen_qtyPreLoaded_col_28-3']")
					public static WebElement  lh1;
					
		// grid completed
		
		
		@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
		public static WebElement  editScreenqtyFormulaSearchTxt;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_PlusOpt']")
		public static WebElement  editScreenqtyPlusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'-')]")
		public static WebElement  editScreenqtyMinusBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[3]")
		public static WebElement  editScreenqtyDivideBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'*')]")
		public static WebElement  editScreenqtyMultiplyBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[5]")
		public static WebElement  editScreenqtyBrackets1Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded']//button[6]")
		public static WebElement  editScreenqtyBrackets2Btn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'~')]")
		public static WebElement  editScreenqtyTildeBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'&')]")
		public static WebElement  editScreenqtyAndBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'%')]")
		public static WebElement  editScreenqtyPercentBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//div[@id='operationButtons']//button[@class='btn btn-link'][contains(text(),']')]")
		public static WebElement  editScreenqtySquarebracketBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'|')]")
		public static WebElement  editScreenqtyVerticalBarBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'\')]")
		public static WebElement  editScreenqtyBackSlashBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'<')]")
		public static WebElement  editScreenqtyLessThanbtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'>')]")
		public static WebElement  editScreenqtyGreaterThanBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		public static WebElement  editScreenqtyExclamationBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'=')]")
		public static WebElement  editScreenqtyEqualBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'?:')]")
		public static WebElement  editScreenqtyQuestionBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'^')]")
		public static WebElement  editScreenqtyCaretBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'DateDiff()')]")
		public static WebElement  editScreenqtyDateDiffBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Cond()')]")
		public static WebElement  editScreenqtyCondBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Min()')]")
		public static WebElement  editScreenqtyMinBtn;
		
		@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_formulaDiv']//button[@class='btn btn-link'][contains(text(),'Max()')]")
		public static WebElement  editScreenqtyMaxBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
		public static WebElement  editScreenqtyConditionokBtn;
		
		@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
		public static WebElement  editScreenqtyConditioncancelBtn;
		
		
		///////////
		@FindBy(xpath="//*[@id='editScreen_qtyFormula_textbox']")
		public static WebElement  editScreenformulaTxt;
		
		
		// CustomizeGrid
		
		@FindBy(xpath="//i[@class='icon-custamize icon-font7']")
		public static WebElement editScreencustomizeGridBtn;  
		  
		@FindBy(xpath="//span[contains(text(),'Apportion')")
		public static WebElement editScreenApportionBtn;
		     
		@FindBy(xpath="//span[contains(text(),'Audit Trial')]")
		public static WebElement editScreenAuditTrialBtn;  
		    
		@FindBy(xpath="//span[contains(text(),'Back color')]")
		public static WebElement editScreenbackColorBtn;  
		     
		@FindBy(xpath="//span[contains(text(),'Banner text')]")
		public static WebElement editScreenbannerTextBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
		  public static WebElement editScreencannotBeExportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
		  public static WebElement editScreencannotBeImportedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Column Span')]")
		  public static WebElement editScreencolumnSpanBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
		  public static WebElement editScreencopyFromParentBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'DataType')]")
		  public static WebElement editScreendataTypeBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Default Value')]")
		  public static WebElement editScreenDefaultValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Error message')]")
		  public static WebElement editScreenerrorMessageBtn;  
		 
		  @FindBy(xpath="//span[contains(text(),'External module attached')]")
		  public static WebElement editScreenExternalModuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Field Order')]")
		  public static WebElement editScreenFilterOrderBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Font')]")
		  public static WebElement editScreenFontBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Group Name')]")
		  public static WebElement editScreengroupNameBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
		  public static WebElement editScreenHideLeftPanelBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Information Field')]")
		  public static WebElement editScreenInformationFieldBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mandatory')]")
		  public static WebElement editScreenMandatoryBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Mass Update')]")
		  public static WebElement editScreenMassupdateBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
		  public static WebElement editScreenMaximumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Merge Field')]")
		  public static WebElement editScreenMergerFieldBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
		  public static WebElement editScreenMinimumValueBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'No Of Decimals')]")
		  public static WebElement editScreenNoOfDecimalsBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
		  public static WebElement editScreenNotAvailableForReportsBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Read Only')]")
		  public static WebElement editScreenReadOnlyBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Regular expression')]")
		  public static WebElement editScreenRegularExpressionBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Restrict formula')]")
		  public static WebElement editScreenRestrictFormulaBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Restrict Message')]")
		  public static WebElement editScreenRestrictMessageBtn;  
		  
		  @FindBy(xpath="//span[contains(text(),'Round Offs')]")
		  public static WebElement editScreenRoundsOffsBtn;  
		
		  @FindBy(xpath="//span[contains(text(),'Row Span')]")
		  public static WebElement editScreenRowSpanBtn; 
		     
		  @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
		  public static WebElement editScreenRuleAttachedBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Tooltip')]")
		  public static WebElement editScreenToolTipBtn;  
		     
		  @FindBy(xpath="//span[contains(text(),'Variable name')]")
		  public static WebElement editScreenVariableNameBtn;  
		 
		  
		  
		  
		
		 // Body Tab 
		  
		  @FindBy(xpath="//a[contains(text(),'Body')]")
		  public static WebElement  editScreenBodyTab;
		  
		  @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr")
		  public static List<WebElement> editScreenBodyTabRowsCount;
		  
		  @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody")
		  public static WebElement editScreenBodyTabTable;
		
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='editIcon']")
		  public static WebElement  editScreenBody1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenBody1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _3']")
		  public static WebElement  editScreenBody1stRowCaption;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_1 _8']")
		  public static WebElement  editScreenBody1stRowFormula;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='editIcon']")
		  public static WebElement  editScreenBody2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenBody2ndRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _3']")
		  public static WebElement  editScreenBody2ndRowCaption;
		  
		  @FindBy(xpath="//td[@id='editScreen_bodyrow_2 _8']")
		  public static WebElement  editScreenBody2ndRowFormula;
		  
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-up-arrow Fbutton']")
		  public static WebElement  editScreenBodyUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_body']//button[@class='icon-down-arrow Fbutton']")
		  public static WebElement  editScreenBodyDownArrowBtn;
						
		// Footer Tab
		  
		  @FindBy(xpath="//a[contains(text(),'Footer')]")
		  public static WebElement  editScreenFooterTab;  
		  
		  @FindBy(xpath="//*[@id='editScreen_footerTable']/tbody/tr")
		  public static List<WebElement> editScreenFooterTabRowsCount;
		  
		  @FindBy(xpath="//*[@id='editScreen_footerTable']/tbody")
		  public static WebElement editScreenFooterTabTable;
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='editIcon']")
		  public static WebElement  editScreenFooter1stRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenFooter1stRowDeleteBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _3']")
		  public static WebElement  editScreenFooter1stRowCaption; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_1 _8']")
		  public static WebElement  editScreenFooter1stRowFormula; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='editIcon']")
		  public static WebElement  editScreenFooter2ndRowEditBtn; 
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_2 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenFooter2ndRowDeleteBtn; 
		  
		  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_4 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenFooter4thRowDeleteBtn; 
		  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_5 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenFooter5thRowDeleteBtn; 
		  
		  
		  @FindBy(xpath="//td[@id='editScreen_footerrow_6 _1']//span[@id='deleteIcon']")
		  public static WebElement  editScreenFooter6thRowDeleteBtn; 
		  
		  
		  
		  
		  
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-up-arrow Fbutton']")
		  public static WebElement  editScreenFooterUpArrowBtn; 
		
		  @FindBy(xpath="//div[@id='editScreen_footer']//button[@class='icon-down-arrow Fbutton']")
		  public static WebElement  editScreenFooterDownArrowBtn; 
		  
		/////
		  	@FindBy(xpath="//label[contains(text(),'Quantity preloaded')]")
			public static WebElement qtyPreloadedLabel;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
			public static WebElement qtyPreloadedTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
			public static WebElement qtyPreloadedformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_availableVariables']")
			public static WebElement qtyPreloadedFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Ok']")
			public static WebElement qtyPreloadedFormulaokBtn;
			
			@FindBy(xpath="//button[@id='editScreen_qtyPreLoaded_Cancel']")
			public static WebElement qtyPreloadedFormulacancelBtn;


			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[1]/label/span")
			public static WebElement editScreenLoadFields1stChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[2]/label/span")
			public static WebElement editScreenLoadFields2ndChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[3]/label/span")
			public static WebElement editScreenLoadFields3rdChkBox;
			
			@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div[4]/label/span")
			public static WebElement editScreenLoadFields4thChkBox;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_formulaText']")
			public static WebElement  preloadformulaTxt;
			
			@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_availableVariables']")
			public static WebElement  preloadFormulaSearchTxt;
			
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Ok']")
			public static WebElement  preloadFormulaokBtn;
				
			@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_PreLoad_Cancel']")
			public static WebElement  preloadFormulacancelBtn;
			
			
			///////////////////////////////////////////////////////////////////////////////////


	//**------------------------------------------------------------------------------------------------------------- 

	// Edit Layout Tab  
	   
	   @FindBy(xpath="//span[contains(text(),'Edit Layout')]")
		public static WebElement editLayoutTab;
	   
	   @FindBy(xpath="//*[@id='editLayout_tabContent']/div[1]/span[1]")
	  	public static WebElement editLayoutAddFieldsBtn;
	   
	   @FindBy(xpath="//a[contains(text(),'Field Details')]")
		public static WebElement editLayoutFieldDetailsTab;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption']")
		public static WebElement  editLayoutCaptionTxt;

		@FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_input_image']/span")
		public static WebElement  editLayOutCaptionExpandBtn;
		
		@FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_input_settings']/span")
		public static WebElement  editLayoutCaptionSettingsBtn;

					@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_container']")
					public static WebElement  editLayoutCaptionSettingsContainer;
											
					@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_footer']//input[1]")
					public static WebElement  editLayoutCaptionSettingsStandardFieldsBtn;
											
								@FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_list']")
								public static WebElement  editLayoutCaptionSettingsStandardFieldFielddropdown;
																	
								@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_header']")
								public static WebElement  editLayoutCaptionSettingsStandardFieldHeaderTxt;
																
								@FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_alignment']")
								public static WebElement  editLayoutCaptionSettingsStandardFieldAlignmentdropdown;
																	
								@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_customize_popup_standardfields_width']")
								public static WebElement  editLayoutCaptionSettingStandardFieldsWidthTxt;
																	
								@FindBy(xpath="//section[@id='page_Content']//input[3]")
								public static WebElement  editLayoutCaptionSettingsStandardFieldokBtn;
																	
								@FindBy(xpath="//section[@id='page_Content']//input[4]")
								public static WebElement  editLayoutCaptionSettingsStandardFieldcancelBtn;
											
											
					@FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_Caption_search_container']//input[2]")
					public static WebElement  editLayoutCaptionSettingsDeleteColumnBtn;
											
					@FindBy(xpath="//section[@id='page_Content']//input[3]")
					public static WebElement  editLayoutCaptionSettingsokBtn;
								
					@FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement  editLayoutCaptionSettingscancelBtn;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Name']")
		public static WebElement editLayoutNameTxt;
	   
	   @FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_DataType']")
		public static WebElement editLayoutDataTypeDropdown;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Maxsize']")
		public static WebElement editLayoutMaxSizeTxt;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_defaultValue']")
		public static WebElement editLayoutDefaultValueTxt;
	   
	   @FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_controlType']")
		public static WebElement editLayoutControlTypeDropdown;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_toolTip']")
		public static WebElement editLayoutToolTipTxt;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_toolTip']")
		public static WebElement editlayoutUniqueDropdown;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_groupName']")
		public static WebElement editLayoutgroupNameTXt;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_entryValidation']")
		public static WebElement editLayoutEntryValidationTxt;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_entryValidationMsg']")
		public static WebElement editLayoutValidationMessageTxt;
	   
	   @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_chkPostToAcc']")
		public static WebElement editLayoutPostToAccountChkBox;
	   
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_FieldDetails_defaultAcc1']")
		public static WebElement editLayoutAccount1Txt;
	   
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_FieldDetails_defaultAcc2']")
		public static WebElement editLayoutAccount2Txt;
	   
	   @FindBy(xpath="//input[@id='txtEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement editLayoutRegularExpTxt;
	   
	   //  PopUp  RegularExpresiion Window
	   
	   @FindBy(xpath="//input[@id='txtREditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement regularExpTxt;  
	   
	   @FindBy(xpath="//input[@id='txtTestStringEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement testStringTxt;  
	   
	   @FindBy(xpath="//button[contains(text(),'Test')]")
		public static WebElement testBtn;  
	   
	   @FindBy(xpath="//a[contains(text(),'Characters and Repetitions')]")
		public static WebElement characterAndRepetitionsTab;  
	   
	   @FindBy(xpath="//input[@id='txtCharAndRepititionEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement characterAndRepetitionsRegularExpTxt;  
	 
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[1]/div[2]/button")
		public static WebElement characterAndRepetitionsRegularExpInsertBtn;  
	   
	   @FindBy(xpath="//input[@id='chkMatchOnlyIfAbsentEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement matchOnlyIfAbsentChkbox;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[1]/label/input")
		public static WebElement anyCharacterRadio;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[2]/label/input")
		public static WebElement alphanumericRadio;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[3]/label/input")
		public static WebElement digitRadio;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[4]/label/input")
		public static WebElement whiteSpaceRadio;  
	   
	   @FindBy(xpath="//div[@class='col-sm-10 Fradiobox padding']//input[1]")
		public static WebElement specificCharacterRadio;  
	   
	   @FindBy(xpath="//input[@id='txtSpecificCharEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement specificCharacterBtn;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[7]/label/input")
		public static WebElement namedClassRadio; 
	   
	   @FindBy(xpath="//select[@id='ddlNamedClassEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement namedClassdropdown;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[2]/fieldset/div/div[2]/div[9]/label/input")
		public static WebElement specifiedSetRadio;  
	   
	   @FindBy(xpath="//select[@id='ddlSpecifiedSetEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement specifiedsetDropdown;  
	   
	   @FindBy(xpath="//input[@id='chkAsFewAsPossibleEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement asFewAsPossibleChkBox;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[1]/label/input")
		public static WebElement justOnceRadio;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[2]/label/input")
	  	public static WebElement anyNumberRadio; 
	  
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[3]/label/input")
	  	public static WebElement oneOrMoreRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp0']/div[3]/fieldset/div/div[2]/div[1]/div[4]/label/input")
	  	public static WebElement zeroOrOneRadio; 
	   
	   @FindBy(xpath="//div[@class='col-sm-12 padding border']//div[1]//label[1]//input[1]")
	  	public static WebElement exactlyRadio; 
	   
	   @FindBy(xpath="//input[@id='nExactlyNEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement exactlyDropdown;  
	   
	   @FindBy(xpath="//div[@class='col-sm-12 padding border']//div[3]//label[1]//input[1]")
		public static WebElement atleastRadio;  
	   
	   @FindBy(xpath="//input[@id='mAtLeastNEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement atleastDropdown;  
	   
	   @FindBy(xpath="//div[@class='Fradiobox col-sm-12']//input[1]")
		public static WebElement betweenNandMBtn;  
	   
	   @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
		public static WebElement regularExpokBtn;  
	   
	   @FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Close')]")
		public static WebElement regularExpcancelBtn;  
	   
	   
	   //
	   
	   @FindBy(xpath="//a[contains(text(),'Groups and Options')]")
		public static WebElement groupAndOptionsTab;  
	   
	   @FindBy(xpath="//input[@id='txtGrpAndOptEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement groupAndOptionRegularExpTxt;  
	   
	   @FindBy(xpath="//button[contains(text(),'Result')]")
		public static WebElement resultBtn;  
	   
	   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[@class='col-sm-12']//div[1]//label[1]//input[1]")
		public static WebElement numbereedCapturedRadio;  
	   
	   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[2]//label[1]//input[1]")
		public static WebElement nonCapturingGroupRadio;  
	   
	   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[3]//label[1]//input[1]")
		public static WebElement namedCaptureRadio;  
	   
	   @FindBy(xpath="//input[@id='txtNamedCaptureEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement namedCaptureTxt;  
	   
	   @FindBy(xpath="//fieldset[@id='dvDefineAMatchGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[5]//label[1]//input[1]")
		public static WebElement balancingGrpRadio;  
	   
	   @FindBy(xpath="//input[@id='txtBalancingGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
		public static WebElement balancingGrpTxt;  
	   
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[7]//label[1]//input[1]")
		public static WebElement matchSuffixButEcludeItRadio;  
	   
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[8]//label[1]//input[1]")
	  	public static WebElement matchPrefixButEcludeItRadio;  
	      
	   @FindBy(xpath="//label[text()='Match if suffix is not present (?']")
	  	public static WebElement matchIfSuffixIsNotPresentRadio;  
	      
	   @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[10]//label[1]")
	  	public static WebElement matchIfPrefixIsNotPresentRadio;  
	      
	    @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[11]//label[1]")
	  	public static WebElement greedySubExpressionRadio;  
	      
	   @FindBy(xpath="//div[@id='editLayout_FieldsCustomization_FieldDetails_validationDiv']//div[12]//label[1]")
	  	public static WebElement commentRadio;  
	      
	   @FindBy(xpath="//input[@id='txtCommentEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	  	public static WebElement commentTxt;  
	      
	   @FindBy(xpath="//input[@id='chkWithANewNonCaptureGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	  	public static WebElement withInANonCapturingGroupChkBox;  
	      
	   @FindBy(xpath="//input[@id='chkUntilEndOfEncloseGrpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	  	public static WebElement untilEndOfEnclosingGroupChkBox;  
	      
	   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[@class='col-sm-12']//div[1]//label[1]//input[1]")
	  	public static WebElement ignoreCaseChkBox;  
	      
	   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[2]//label[1]//input[1]")
	  	public static WebElement multiLineChkBox;  
	      
	   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[3]//label[1]//input[1]")
	  	public static WebElement singleLineChkBox;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp1']//div[4]//label[1]//input[1]")
	  	public static WebElement explicitCaptureChkBox;  
	      
	   @FindBy(xpath="//fieldset[@id='dvOptionsEditLayout_FieldsCustomization_FieldDetails_regularExp']//div[5]//label[1]//input[1]")
	  	public static WebElement ignorePatternWhiteSpaceChkBox;  
	     
	  // 
	   
	   @FindBy(xpath="//a[contains(text(),'Special Characters')]")
	  	public static WebElement sepecialCharactersTab;  
	      
	   @FindBy(xpath="//input[@id='txtSpecialCharEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	  	public static WebElement specialCharacterRegularExpTxt;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']//button[@class='Fbutton'][contains(text(),'Insert')]")
	  	public static WebElement specialCharacterRegularExpInsertBtn;  
	      
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[1]/label/input")
	  	public static WebElement bellRadio;  
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[2]/label/input")
	  	public static WebElement backSpaceRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[3]/label/input")
	  	public static WebElement tabRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[4]/label/input")
	  	public static WebElement carriageReturnRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[5]/label/input")
	  	public static WebElement verticalTabRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[6]/label/input")
	  	public static WebElement formfeedRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[7]/label/input")
	  	public static WebElement newLineRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[1]/div[8]/label/input")
	  	public static WebElement escapeRadio; 
	      
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[1]/label/input")
	  	public static WebElement beginningOfStringOrLineRadio; 
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[2]/label/input")
	  	public static WebElement endOfStringOrLineRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[1]/div/div[3]/label/input")
	  	public static WebElement alterNationRadio;
	 
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[1]/label/input")
	  	public static WebElement beginningOfStringRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[2]/label/input")
	  	public static WebElement endOfStringOrBeforeNewLineAtEndRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[3]/label/input")
	  	public static WebElement endOfStringRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[4]/label/input")
	  	public static WebElement beginningOfCurrentSearchRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[5]/label/input")
	  	public static WebElement firsOrLastCharacterInWordRadio;
	   
	   @FindBy(xpath="//*[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp2']/div[2]/fieldset/div/div[2]/fieldset[2]/div/div[6]/label/input")
	  	public static WebElement noOfFirstOfLastCharacterInWordRadio;
	     
	   //
	   
	   @FindBy(xpath="//a[contains(text(),'Exiting')]")
	  	public static WebElement excitngTab;
	   
	   //
	      
	   @FindBy(xpath="//ul[@class='nav nav-tabs']//a[contains(text(),'Help')]")
	  	public static WebElement helpTab;  
	      
	   @FindBy(xpath="//div[@class='col-xs-12 col-sm-3']//div[1]//label[1]//input[1]")
	  	public static WebElement syntaxElementsRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[2]//label[1]//input[1]")
	  	public static WebElement charactersRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[3]//label[1]//input[1]")
	  	public static WebElement quantifierRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[4]//label[1]//input[1]")
	  	public static WebElement anchorsRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[5]//label[1]//input[1]")
	  	public static WebElement characterClassradio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[6]//label[1]//input[1]")
	  	public static WebElement extendedgroupsRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[7]//label[1]//input[1]")
	  	public static WebElement backReferenceRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[8]//label[1]//input[1]")
	  	public static WebElement subExpcallRadio;  
	      
	   @FindBy(xpath="//div[@id='EditLayout_FieldsCustomization_FieldDetails_regularExp4']//div[9]//label[1]//input[1]")
	  	public static WebElement capturedGroupRadio;  
	      
	   @FindBy(xpath="//pre[@id='preHelpEditLayout_FieldsCustomization_FieldDetails_regularExp']")
	  	public static WebElement helpField;  
	   
	    @FindBy(xpath="//span[contains(text(),'Apply')]")
	  	public static WebElement editLayoutApplyBtn;  
	      
	    @FindBy(xpath="//span[@id='editLayout_FieldsCustomization_Close']//i[@class='icon-cancel icon-font7']")
	  	public static WebElement editLayoutcloseBtn;
	   
	   
	   
	    @FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_errorMsg']")
	  	public static WebElement editLayouterrorMessageTxt;
	  
	    @FindBy(xpath="//*[@id='editLayout_copyFieldsOptFields']/div[1]/label/span")
		public static WebElement editLayoutLoadFields1stChkBox;
		
		@FindBy(xpath="//*[@id='editLayout_copyFieldsOptFields']/div[2]/label/span")
		public static WebElement editLayoutLoadFields2ndChkBox;
		
		@FindBy(xpath="//*[@id='editLayout_copyFieldsOptFields']/div[3]/label/span")
		public static WebElement editLayoutLoadFields3rdChkBox;
	   
	   
	   
	   
	   
	   
	   
	   
	 //Properties Tab 

	      
	    @FindBy(xpath="//a[contains(text(),'Properties')]")
	  	public static WebElement editLayoutPropertiesTab;  
	      
	    @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkauditTrail']")
	  	public static WebElement auditTrailChkBox;  
	      
	    @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkhidden']")
	  	public static WebElement hiddenChkbox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkmergeFld']")
	  	public static WebElement mergeFieldChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chknotAvailFrReports']")
	  	public static WebElement notAvailableForReportsChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkinfoFld']")
	  	public static WebElement informationFieldChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkreadOnly']")
	  	public static WebElement readOnlyChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkcantExport']")
	  	public static WebElement cantExportChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkmandatory']")
	  	public static WebElement mandatorychkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkspellCheck']")
	  	public static WebElement spellCheckChkBox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkcantImport']")
	  	public static WebElement cantImportChkbox;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Properties_chkmassUpdate']")
	  	public static WebElement massUpdateChkBox;  
	      
	   @FindBy(xpath="//select[@id='editLayout_FieldsCustomization_Properties_behavoir']")
	  	public static WebElement behaviourDropdown;  
	      
	//   Formatting Tab 
	      
	   @FindBy(xpath="//a[contains(text(),'Formatting')]")
	  	public static WebElement formattingTab;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Formatting_colSpan']")
	  	public static WebElement columnSpanDropdown;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Formatting_rowSpan']")
	  	public static WebElement rowSpandropdown;  
	      
	   @FindBy(xpath="//select[@id='editLayout_FieldsCustomization_Formatting_charCasing']")
	  	public static WebElement characterCasingDropdown;  
	      
	   @FindBy(xpath="//select[@id='editLayout_FieldsCustomization_Formatting_textAlign']")
	  	public static WebElement textAlignDropdown;  
	      
	   @FindBy(xpath="//input[@id='editLayout_FieldsCustomization_Formatting_chkenableFont']")
	  	public static WebElement enableFontChkbox;  
	      
	   
	   // External Module is named As EFES And ELV For Each Screen (ReceiptsEFES,ReceiptsELV )
	   // External Functions(External Fields) is same but Changes From Screen to Screen
	   
	   
	   @FindBy(xpath="//ul[@id='editScreen_FieldsCustomization_tabs']//li[4]//a[1]")
		public static WebElement  editLayoutRulesTab;
			
			@FindBy(xpath="//td[@id='editLayout_headerrow_1 _4']")
			public static WebElement  editLayoutHeader1stRowCaption;
			
			@FindBy(xpath="//td[@id='editLayout_headerrow_2 _4']")
			public static WebElement  editLayoutHeader2ndRowCaption;
			
			@FindBy(xpath="//td[@id='editLayout_bodyrow_1 _4']")
			public static WebElement  editLayoutbody1stRowCaption;
			
			
			
			@FindBy(xpath="//td[@id='editLayout_bodyrow_2 _4']")
			public static WebElement  editLayoutbody2ndRowCaption;
		
		@FindBy(xpath="//ul[@id='editScreen_FieldsCustomization_tabs']//li[5]")
		public static WebElement  editlayoutExternalModulesTab;
	      
	    @FindBy(xpath="//i[@class='icon-copyfields icon-font7']")
	  	public static WebElement editLayoutLoadFieldsBtn;  
	      
	    @FindBy(xpath="//*[@id='editLayout_voucherDropDown']")
	  	public static WebElement editLayoutLoadFieldsDropdown;  
	      
	    @FindBy(xpath="//button[@class='Fbutton pull-left']")
	  	public static WebElement editLayoutselectAllBtn;  
	      
	   @FindBy(xpath="//div[@id='editLayout_copyFieldsDiv']//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
	   public static WebElement editLayoutokBtn;     
	   
	   @FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[2]")
	   public static WebElement editScreenLayoutokBtn;
	   
	 
	   
	   
	    @FindBy(xpath="//input[@id='searchlayout']")
	  	public static WebElement editLayoutSearchTxt;  
	      
	    @FindBy(xpath="//button[@id='btnEditLayoutPrev']")
	  	public static WebElement editLayoutPreviousBtn;  
	      
	    @FindBy(xpath="//button[@id='btnEditLayoutNext']")
	  	public static WebElement editLayoutNextBtn;  
	      
	    @FindBy(xpath="//span[@class='dropdown-toggle theme_button_color']")
	  	public static WebElement customizeGridBtn;  
	      
	    @FindBy(xpath="//li[@id='editLayout_hiddenColumn_34']//span[contains(text(),'Audit Trail')]")
	  	public static WebElement editLayoutAuditTrialBtn;  
	      
	    @FindBy(xpath="//span[contains(text(),'Back color')]")
	  	public static WebElement backColorBtn;  
	      
	    @FindBy(xpath="//span[contains(text(),'Banner text')]")
	  	public static WebElement bannerTextBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Behaviour')]")
	  	public static WebElement behaviourBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Calender Type')]")
	  	public static WebElement calenderTypeBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Cannot be exported')]")
	  	public static WebElement cannotBeExportedBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Cannot be imported')]")
	  	public static WebElement cannotBeImportedBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Character casing')]")
	  	public static WebElement characterCasingBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Column Span')]")
	  	public static WebElement columnSpanBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Copy from Parent')]")
	  	public static WebElement copyFromParentBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'DataType')]")
	  	public static WebElement dataTypeBtn;  
	      
	   @FindBy(xpath="//li[@id='editLayout_hiddenColumn_11']//span[contains(text(),'Default')]")
	  	public static WebElement defaultBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Display Control Type')]")
	  	public static WebElement controlTypeBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'EntryValidation')]")
	  	public static WebElement entryValidationBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Error message')]")
	  	public static WebElement errorMessageBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'External Display Member')]")
	  	public static WebElement externalDisplaymemberBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'External module attached')]")
	  	public static WebElement externalModuleAttachedBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'External Table Name')]")
	  	public static WebElement externalTableNameBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'External Value Member')]")
	  	public static WebElement externalValuememberBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Filter condition')]")
	  	public static WebElement filterConditionBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Font')]")
	  	public static WebElement fontBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Group Name')]")
	  	public static WebElement groupNameBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Hidden in group')]")
	  	public static WebElement hiddenInGroupBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Hide left panel')]")
	  	public static WebElement hideLeftPanelBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Information Field')]")
	  	public static WebElement informationFieldBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Interval Value')]")
	  	public static WebElement intervalValueBtn;  
	      
	   @FindBy(xpath="//li[@id='editLayout_hiddenColumn_28']//span[contains(text(),'Mandatory')]")
	  	public static WebElement mandatoryBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Mandatory Fields')]")
	  	public static WebElement mandatoryFieldsBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Mandatory in group')]")
	  	public static WebElement mandatoryInGroupBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Mass Update')]")
	  	public static WebElement massupdateBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Maximum Value')]")
	  	public static WebElement maximumValueBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Merge Field')]")
	  	public static WebElement mergerFieldBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Minimum Value')]")
	  	public static WebElement minimumValueBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Not available for reports')]")
	  	public static WebElement notAvailableForReportsBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Read Only')]")
	  	public static WebElement readOnlyBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Regular expression')]")
	  	public static WebElement regularExpressionBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Row Span')]")
	  	public static WebElement rowSpanBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Rule Attached')]")
	  	public static WebElement ruleAttachedBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'ScrollBar')]")
	  	public static WebElement scrollBarBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Spellcheck')]")
	  	public static WebElement spellCheckBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Text Align')]")
	  	public static WebElement textAllignBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Tooltip')]")
	  	public static WebElement toolTipBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Validation Message')]")
	  	public static WebElement validationMessageBtn;  
	      
	   @FindBy(xpath="//span[contains(text(),'Word wrap')]")
	  	public static WebElement wordWrapBtn;  
	      
	 // Header Tab  
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/ul/li[1]/a")
	  	public static WebElement  editLayoutHeaderTab;  
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[1]/td[1]/span[1]")
	  	public static WebElement  editLayoutHeader1stRowEditBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[1]/td[1]/span[2]")
	  	public static WebElement  editLayoutHeader1stRowDeleteBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]/span[1]")
	  	public static WebElement  editLayoutHeader2ndRowEditBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]/span[2]")
	  	public static WebElement  editLayoutHeader2ndRowDeleteBtn; 
	    
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[3]/td[1]/span[1]")
	 	public static WebElement  editLayoutHeader3rdRowEditBtn; 
	  
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[3]/td[1]/span[2]")
	 	public static WebElement  editLayoutHeader3rdRowDeleteBtn; 
	  
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[4]/td[1]/span[1]")
		public static WebElement  editLayoutHeader4thRowEditBtn; 
	 
	  @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[1]/div[2]/table/tbody/tr[4]/td[1]/span[2]")
		public static WebElement  editLayoutHeader4thRowDeleteBtn; 
	   
	   
	   
	   @FindBy(xpath="//div[@id='editLayout_header']//button[@class='icon-up-arrow Fbutton']")
	  	public static WebElement  editLayoutHeaderUpArrowBtn; 

	   @FindBy(xpath="//div[@id='editLayout_header']//button[@class='icon-down-arrow Fbutton']")
	  	public static WebElement  editLayoutHeaderDownArrowBtn; 
	   
	 
	   
	  // Body Tab 
	                   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/ul/li[2]/a")
	  	public static WebElement  editLayoutBodyTab; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr/td[1]/span[1]")
	  	public static WebElement  editLayoutBody1stRowEditBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr/td[1]/span[2]")
	  	public static WebElement  editLayoutBody1stRowDeleteBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr[2]/td[1]/span[1]")
	  	public static WebElement  editLayoutBody2ndRowEditBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr[2]/td[1]/span[2]")
	  	public static WebElement  editLayoutBody2ndRowDeleteBtn; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr[3]/td[1]/span[1]")
	 	public static WebElement  editLayoutBody3rdRowEditBtn; 
	  
	  @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]/table/tbody/tr[3]/td[1]/span[2]")
	 	public static WebElement  editLayoutBody3rdRowDeleteBtn; 
	 
	   
	   
	   @FindBy(xpath="//div[@id='editLayout_body']//button[@class='icon-up-arrow Fbutton']")
	  	public static WebElement  editLayoutBodyUpArrowBtn; 

	   @FindBy(xpath="//div[@id='editLayout_body']//button[@class='icon-down-arrow Fbutton']")
	  	public static WebElement  editLayoutBodyDownArrowBtn;
	   

	//**-------------------------------------------------------------------------------------------------------  

		// External Functions/ External fields Tab 
		// External Module in Edit Screen.Edit Layout,Views Are Also in this
		// External Functions/Edit Screen===EFES
		// Edit Layout/ Views====ELV
		
		
		@FindBy(xpath="//span[contains(text(),'External Functions')]")
	  	public static WebElement  externalFunctionsTab; 
		
		
		/////////////
	   
		// Receipts External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4608_5']")
	  	public static WebElement  receiptsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4608_5']")
	  	public static WebElement  receiptsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4608_5']")
	  	public static WebElement  receiptsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4608_5']")
	  	public static WebElement  receiptsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4608_5']")
	  	public static WebElement  receiptsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4608_5']")
	  	public static WebElement  receiptsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_0']")
	  	public static WebElement  receiptsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_1']")
	  	public static WebElement  receiptsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_5+_2']")
	  	public static WebElement  receiptsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4608_5']")
	  	public static WebElement  receiptsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4608_5']")
	  	public static WebElement  receiptsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4608_5']")
	  	public static WebElement  receiptsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4608_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  receiptsEFES_closeBtn; 
	   
	   
	   // Receipts Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4608_7']")
	  	public static WebElement  receiptsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4608_7']")
	  	public static WebElement  receiptsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4608_7']")
	  	public static WebElement  receiptsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4608_7']")
	  	public static WebElement  receiptsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4608_7']")
	  	public static WebElement  receiptsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4608_7']")
	  	public static WebElement  receiptsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_0']")
	  	public static WebElement  receiptsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_1']")
	  	public static WebElement  receiptsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4608_7+_2']")
	  	public static WebElement  receiptsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4608_7']")
	  	public static WebElement  receiptsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4608_7']")
	  	public static WebElement  receiptsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4608_7']")
	  	public static WebElement  receiptsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4608_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  receiptsELV_closeBtn;
		
	   
	  ////// 
	   
		// Payments External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4864_5']")
	  	public static WebElement  paymentsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4864_5']")
	  	public static WebElement  paymentsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4864_5']")
	  	public static WebElement  paymentsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4864_5']")
	  	public static WebElement  paymentsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4864_5']")
	  	public static WebElement  paymentsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4864_5']")
	  	public static WebElement  paymentsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_0']")
	  	public static WebElement  paymentsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_1']")
	  	public static WebElement  paymentsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_5+_2']")
	  	public static WebElement  paymentsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4864_5']")
	  	public static WebElement  paymentsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4864_5']")
	  	public static WebElement  paymentsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4864_5']")
	  	public static WebElement  paymentsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4864_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  paymentsEFES_closeBtn; 
	   
	   
	   // Payments Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4864_7']")
	  	public static WebElement  paymentsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4864_7']")
	  	public static WebElement  paymentsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4864_7']")
	  	public static WebElement  paymentsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4864_7']")
	  	public static WebElement  paymentsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4864_7']")
	  	public static WebElement  paymentsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4864_7']")
	  	public static WebElement  paymentsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_0']")
	  	public static WebElement  paymentsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_1']")
	  	public static WebElement  paymentsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4864_7+_2']")
	  	public static WebElement  paymentsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4864_7']")
	  	public static WebElement  paymentsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4864_7']")
	  	public static WebElement  paymentsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4864_7']")
	  	public static WebElement  paymentsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4864_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  paymentsELV_closeBtn;
	   
	   
	 ////////////////  
	   
		// PettyCash External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_0']")
	  	public static WebElement  pettyCashEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_1']")
	  	public static WebElement  pettyCashEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_5+_2']")
	  	public static WebElement  pettyCashEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5120_5']")
	  	public static WebElement  pettyCashEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5120_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  pettyCashEFES_closeBtn; 
	   
	   
	   // PettyCash Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5120_7']")
	  	public static WebElement  pettyCashELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5120_7']")
	  	public static WebElement  pettyCashELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5120_7']")
	  	public static WebElement  pettyCashELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5120_7']")
	  	public static WebElement  pettyCashELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5120_7']")
	  	public static WebElement  pettyCashELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5120_7']")
	  	public static WebElement  pettyCashELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_0']")
	  	public static WebElement  pettyCashELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_1']")
	  	public static WebElement  pettyCashELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5120_7+_2']")
	  	public static WebElement  pettyCashELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5120_7']")
	  	public static WebElement  pettyCashELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5120_7']")
	  	public static WebElement  pettyCashELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5120_7']")
	  	public static WebElement  pettyCashELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5120_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  pettyCashELV_closeBtn;
	   
	 /////////////////////////////////
	   
	   
		// PostDatedReceipts External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_0']")
	  	public static WebElement  postDatedReceiptsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_1']")
	  	public static WebElement  postDatedReceiptsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_5+_2']")
	  	public static WebElement  postDatedReceiptsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5888_5']")
	  	public static WebElement  postDatedReceiptsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5888_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  postDatedReceiptsEFES_closeBtn; 
	   
	   
	   // PostDatedReceipts Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_0']")
	  	public static WebElement  postDatedReceiptsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_1']")
	  	public static WebElement  postDatedReceiptsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5888_7+_2']")
	  	public static WebElement  postDatedReceiptsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5888_7']")
	  	public static WebElement  postDatedReceiptsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5888_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  postDatedReceiptsELV_closeBtn;
	   
	   
	   ///////////////////////////////
	   
		// PostDatedPayments External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_0']")
	  	public static WebElement  postDatedPaymentsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_1']")
	  	public static WebElement  postDatedPaymentsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_5+_2']")
	  	public static WebElement  postDatedPaymentsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7168_5']")
	  	public static WebElement  postDatedPaymentsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7168_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  postDatedPaymentsEFES_closeBtn; 
	   
	   
	   // PostDatedPayments Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_0']")
	  	public static WebElement  postDatedPaymentsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_1']")
	  	public static WebElement  postDatedPaymentsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7168_7+_2']")
	  	public static WebElement  postDatedPaymentsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7168_7']")
	  	public static WebElement  postDatedPaymentsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7168_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  postDatedPaymentsELV_closeBtn;
	   
	   
	   
	   /////////////////////////
	   
	   
		// purchaseVouchers External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_0']")
	  	public static WebElement  purchaseVouchersEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_1']")
	  	public static WebElement  purchaseVouchersEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_5+_2']")
	  	public static WebElement  purchaseVouchersEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_768_5']")
	  	public static WebElement  purchaseVouchersEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_768_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchaseVouchersEFES_closeBtn; 
	   
	   
	   // purchaseVouchers Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_0']")
	  	public static WebElement  purchaseVouchersELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_1']")
	  	public static WebElement  purchaseVouchersELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_768_7+_2']")
	  	public static WebElement  purchaseVouchersELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_768_7']")
	  	public static WebElement  purchaseVouchersELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_768_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchaseVouchersELV_closeBtn;
	   
	   /////////////////
	   
	   
		// PurchaseReturns External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_0']")
	  	public static WebElement  purchaseReturnsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_1']")
	  	public static WebElement  purchaseReturnsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_5+_2']")
	  	public static WebElement  purchaseReturnsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_6400_5']")
	  	public static WebElement  purchaseReturnsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_6400_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchaseReturnsEFES_closeBtn; 
	   
	   
	   // PurchaseReturns Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_0']")
	  	public static WebElement  purchaseReturnsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_1']")
	  	public static WebElement  purchaseReturnsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6400_7+_2']")
	  	public static WebElement  purchaseReturnsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_6400_7']")
	  	public static WebElement  purchaseReturnsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_6400_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchaseReturnsELV_closeBtn;
	   
	   
	   /////////////////////////
	   
		// SalesInvoices External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_0']")
	  	public static WebElement  salesInvoicesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_1']")
	  	public static WebElement  salesInvoicesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_5+_2']")
	  	public static WebElement  salesInvoicesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3328_5']")
	  	public static WebElement  salesInvoicesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3328_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesInvoicesEFES_closeBtn; 
	   
	   
	   // SalesInvoices Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_0']")
	  	public static WebElement  salesInvoicesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_1']")
	  	public static WebElement  salesInvoicesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3328_7+_2']")
	  	public static WebElement  salesInvoicesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3328_7']")
	  	public static WebElement  salesInvoicesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3328_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesInvoicesELV_closeBtn;
	   
	   
	   ////////////////
	   
		// SalesReturns External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_0']")
	  	public static WebElement  salesReturnsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_1']")
	  	public static WebElement  salesReturnsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_5+_2']")
	  	public static WebElement  salesReturnsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_1792_5']")
	  	public static WebElement  salesReturnsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1792_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesReturnsEFES_closeBtn; 
	   
	   
	   // SalesReturns Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_0']")
	  	public static WebElement  salesReturnsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_1']")
	  	public static WebElement  salesReturnsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1792_7+_2']")
	  	public static WebElement  salesReturnsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_1792_7']")
	  	public static WebElement  salesReturnsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1792_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesReturnsELV_closeBtn;
	   
	   ///////////
	   
		// CashSales External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_0']")
	  	public static WebElement  cashSalesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_1']")
	  	public static WebElement  cashSalesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_5+_2']")
	  	public static WebElement  cashSalesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3329_5']")
	  	public static WebElement  cashSalesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3329_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  cashSalesEFES_closeBtn; 
	   
	   
	   // CashSales Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3329_7']")
	  	public static WebElement  cashSalesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3329_7']")
	  	public static WebElement  cashSalesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3329_7']")
	  	public static WebElement  cashSalesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3329_7']")
	  	public static WebElement  cashSalesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3329_7']")
	  	public static WebElement  cashSalesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3329_7']")
	  	public static WebElement  cashSalesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_0']")
	  	public static WebElement  cashSalesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_1']")
	  	public static WebElement  cashSalesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3329_7+_2']")
	  	public static WebElement  cashSalesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3329_7']")
	  	public static WebElement  cashSalesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3329_7']")
	  	public static WebElement  cashSalesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3329_7']")
	  	public static WebElement  cashSalesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3329_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  cashSalesELV_closeBtn;
	   
	   ////////////
	   
		// HirePurchaseSales External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_0']")
	  	public static WebElement  hirePurchaseSalesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_1']")
	  	public static WebElement  hirePurchaseSalesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_5+_2']")
	  	public static WebElement  hirePurchaseSalesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3330_5']")
	  	public static WebElement  hirePurchaseSalesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3330_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  hirePurchaseSalesEFES_closeBtn; 
	   
	   
	   // HirePurchaseSales Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_0']")
	  	public static WebElement  hirePurchaseSalesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_1']")
	  	public static WebElement  hirePurchaseSalesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3330_7+_2']")
	  	public static WebElement  hirePurchaseSalesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3330_7']")
	  	public static WebElement  hirePurchaseSalesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3330_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  hirePurchaseSalesELV_closeBtn;
	   
	   
	   /////////////////
	   
	   
		// JournalEntries External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_0']")
	  	public static WebElement  journalEntriesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_1']")
	  	public static WebElement  journalEntriesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_5+_2']")
	  	public static WebElement  journalEntriesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8704_5']")
	  	public static WebElement  journalEntriesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8704_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  journalEntriesEFES_closeBtn; 
	   
	   
	   // JournalEntries Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_0']")
	  	public static WebElement  JournalEntriesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_1']")
	  	public static WebElement  JournalEntriesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8704_7+_2']")
	  	public static WebElement  JournalEntriesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8704_7']")
	  	public static WebElement  JournalEntriesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8704_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  JournalEntriesELV_closeBtn;
	   
	   //////////////
	   
		// ForexJV External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_0']")
	  	public static WebElement  ForexJVEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_1']")
	  	public static WebElement  ForexJVEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_5+_2']")
	  	public static WebElement  ForexJVEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8448_5']")
	  	public static WebElement  ForexJVEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8448_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  ForexJVEFES_closeBtn; 
	   
	   
	   // ForexJV Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8448_7']")
	  	public static WebElement  ForexJVELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8448_7']")
	  	public static WebElement  ForexJVELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8448_7']")
	  	public static WebElement  ForexJVELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8448_7']")
	  	public static WebElement  ForexJVELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8448_7']")
	  	public static WebElement  ForexJVELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8448_7']")
	  	public static WebElement  ForexJVELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_0']")
	  	public static WebElement  ForexJVELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_1']")
	  	public static WebElement  ForexJVELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8448_7+_2']")
	  	public static WebElement  ForexJVELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8448_7']")
	  	public static WebElement  ForexJVELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8448_7']")
	  	public static WebElement  ForexJVELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8448_7']")
	  	public static WebElement  ForexJVELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8448_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  ForexJVELV_closeBtn;
	   
	   ///////////
	   
		// InterDepartmentalJV External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_0']")
	  	public static WebElement  InterDepartmentalJVEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_1']")
	  	public static WebElement  InterDepartmentalJVEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_5+_2']")
	  	public static WebElement  InterDepartmentalJVEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3585_5']")
	  	public static WebElement  InterDepartmentalJVEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3585_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  InterDepartmentalJVEFES_closeBtn; 
	   
	   
	   // InterDepartmentalJV Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_0']")
	  	public static WebElement  InterDepartmentalJVELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_1']")
	  	public static WebElement  InterDepartmentalJVELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3585_7+_2']")
	  	public static WebElement  InterDepartmentalJVELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3585_7']")
	  	public static WebElement  InterDepartmentalJVELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3585_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  InterDepartmentalJVELV_closeBtn;
	   
	   //////////////
	   
		// NonStandardJournalEntries External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_0']")
	  	public static WebElement  NonStandardjournalEntriesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_1']")
	  	public static WebElement  NonStandardjournalEntriesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_5+_2']")
	  	public static WebElement  NonStandardjournalEntriesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3584_5']")
	  	public static WebElement  NonStandardjournalEntriesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3584_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  NonStandardjournalEntriesEFES_closeBtn; 
	   
	   
	   // NonStandardJournalEntries Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_0']")
	  	public static WebElement  nonStandardJournalEntriesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_1']")
	  	public static WebElement  nonStandardJournalEntriesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3584_7+_2']")
	  	public static WebElement  nonStandardJournalEntriesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3584_7']")
	  	public static WebElement  nonStandardJournalEntriesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3584_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  nonStandardJournalEntriesELV_closeBtn;
	   
	   ///////////////
	   
		// DebitNotes External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_0']")
	  	public static WebElement  debitNotesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_1']")
	  	public static WebElement  debitNotesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_5+_2']")
	  	public static WebElement  debitNotesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3840_5']")
	  	public static WebElement  debitNotesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3840_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  debitNotesEFES_closeBtn; 
	   
	   
	   // DebitNotes Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3840_7']")
	  	public static WebElement  debitNotesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3840_7']")
	  	public static WebElement  debitNotesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3840_7']")
	  	public static WebElement  debitNotesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3840_7']")
	  	public static WebElement  debitNotesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3840_7']")
	  	public static WebElement  debitNotesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3840_7']")
	  	public static WebElement  debitNotesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_0']")
	  	public static WebElement  debitNotesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_1']")
	  	public static WebElement  debitNotesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3840_7+_2']")
	  	public static WebElement  debitNotesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3840_7']")
	  	public static WebElement  debitNotesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3840_7']")
	  	public static WebElement  debitNotesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3840_7']")
	  	public static WebElement  debitNotesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3840_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  debitNotesELV_closeBtn;
	   
	   /////////////
	   
		// DebitNotesLineWise External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_0']")
	  	public static WebElement  debitNotesLineWiseEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_1']")
	  	public static WebElement  debitNotesLineWiseEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_5+_2']")
	  	public static WebElement  debitNotesLineWiseEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3586_5']")
	  	public static WebElement  debitNotesLineWiseEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3586_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  debitNotesLineWiseEFES_closeBtn; 
	   
	   
	   // DebitNotesLineWise Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_0']")
	  	public static WebElement  debitNotesLineWiseELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_1']")
	  	public static WebElement  debitNotesLineWiseELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3586_7+_2']")
	  	public static WebElement  debitNotesLineWiseELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3586_7']")
	  	public static WebElement  debitNotesLineWiseELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3586_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  debitNotesLineWiseELV_closeBtn;
	   
	   /////////////////////
	   
		// CreditNotes External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_0']")
	  	public static WebElement  creditNotesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_1']")
	  	public static WebElement  creditNotesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_5+_2']")
	  	public static WebElement  creditNotesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4096_5']")
	  	public static WebElement  creditNotesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4096_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  creditNotesEFES_closeBtn; 
	   
	   
	   // CreditNotes Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_4096_7']")
	  	public static WebElement  creditNotesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_4096_7']")
	  	public static WebElement  creditNotesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_4096_7']")
	  	public static WebElement  creditNotesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_4096_7']")
	  	public static WebElement  creditNotesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_4096_7']")
	  	public static WebElement  creditNotesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_4096_7']")
	  	public static WebElement  creditNotesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_0']")
	  	public static WebElement  creditNotesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_1']")
	  	public static WebElement  creditNotesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_4096_7+_2']")
	  	public static WebElement  creditNotesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_4096_7']")
	  	public static WebElement  creditNotesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_4096_7']")
	  	public static WebElement  creditNotesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_4096_7']")
	  	public static WebElement  creditNotesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_4096_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  creditNotesELV_closeBtn;
	   
	   ///////////////////
	   
		// CreditNotesLineWise External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_0']")
	  	public static WebElement  creditNotesLineWiseEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_1']")
	  	public static WebElement  creditNotesLineWiseEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_5+_2']")
	  	public static WebElement  creditNotesLineWiseEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3587_5']")
	  	public static WebElement  creditNotesLineWiseEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3587_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  creditNotesLineWiseEFES_closeBtn; 
	   
	   
	   // CreditNotesLineWise Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_0']")
	  	public static WebElement  creditNotesLineWiseELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_1']")
	  	public static WebElement  creditNotesLineWiseELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3587_7+_2']")
	  	public static WebElement  creditNotesLineWiseELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3587_7']")
	  	public static WebElement  creditNotesLineWiseELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3587_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  creditNotesLineWiseELV_closeBtn;
	   
	   
	   ///////////////////////////
	   
		// OpeningBalances External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_0']")
	  	public static WebElement  openingBalancesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_1']")
	  	public static WebElement  openingBalancesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_5+_2']")
	  	public static WebElement  openingBalancesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_256_5']")
	  	public static WebElement  openingBalancesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_256_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  openingBalancesEFES_closeBtn; 
	   
	   
	   // OpeningBalances Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_256_7']")
	  	public static WebElement  openingBalancesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_256_7']")
	  	public static WebElement  openingBalancesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_256_7']")
	  	public static WebElement  openingBalancesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_256_7']")
	  	public static WebElement  openingBalancesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_256_7']")
	  	public static WebElement  openingBalancesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_256_7']")
	  	public static WebElement  openingBalancesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_0']")
	  	public static WebElement  openingBalancesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_1']")
	  	public static WebElement  openingBalancesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_256_7+_2']")
	  	public static WebElement  openingBalancesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_256_7']")
	  	public static WebElement  openingBalancesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_256_7']")
	  	public static WebElement  openingBalancesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_256_7']")
	  	public static WebElement  openingBalancesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_256_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  openingBalancesELV_closeBtn;
	   
	   
	   //////////////////////////////////
	   
		// FixedAssetDepreciationVoucher External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_0']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_1']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_5+_2']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3588_5']")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3588_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  fixedAssetDepreciationVoucherEFES_closeBtn; 
	   
	   
	   // FixedAssetDepreciationVoucher Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_0']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_1']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3588_7+_2']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3588_7']")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3588_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  fixedAssetDepreciationVoucherELV_closeBtn;
	   
	   /////////////////////
	   
		// RequestForQuote External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_0']")
	  	public static WebElement  requestForQuoteEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_1']")
	  	public static WebElement  requestForQuoteEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_5+_2']")
	  	public static WebElement  requestForQuoteEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8192_5']")
	  	public static WebElement  requestForQuoteEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8192_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  requestForQuoteEFES_closeBtn; 
	   
	   
	   // RequestForQuote Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_0']")
	  	public static WebElement  requestForQuoteELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_1']")
	  	public static WebElement  requestForQuoteELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_8192_7+_2']")
	  	public static WebElement  requestForQuoteELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_8192_7']")
	  	public static WebElement  requestForQuoteELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_8192_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  requestForQuoteELV_closeBtn;
	   
	   //////////////////////
	   
		// PurchasesQuotations External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_0']")
	  	public static WebElement  purchasesQuotationsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_1']")
	  	public static WebElement  purchasesQuotationsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_5+_2']")
	  	public static WebElement  purchasesQuotationsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2304_5']")
	  	public static WebElement  purchasesQuotationsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2304_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchasesQuotationsEFES_closeBtn; 
	   
	   
	   // PurchasesQuotations Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_0']")
	  	public static WebElement  purchasesQuotationsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_1']")
	  	public static WebElement  purchasesQuotationsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2304_7+_2']")
	  	public static WebElement  purchasesQuotationsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2304_7']")
	  	public static WebElement  purchasesQuotationsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2304_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchasesQuotationsELV_closeBtn;
	   
	   
	   ///////////////////////////
	   
		// PurchasesOrders External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_0']")
	  	public static WebElement  purchasesOrdersEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_1']")
	  	public static WebElement  purchasesOrdersEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_5+_2']")
	  	public static WebElement  purchasesOrdersEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2560_5']")
	  	public static WebElement  purchasesOrdersEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2560_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchasesOrdersEFES_closeBtn; 
	   
	   
	   // PurchasesOrders Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_0']")
	  	public static WebElement  purchasesOrdersELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_1']")
	  	public static WebElement  purchasesOrdersELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2560_7+_2']")
	  	public static WebElement  purchasesOrdersELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2560_7']")
	  	public static WebElement  purchasesOrdersELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2560_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  purchasesOrdersELV_closeBtn;
	   
	   /////////////////////////
	   

		// MaterialReceiptNotes External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_0']")
	  	public static WebElement  materialReceiptNotesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_1']")
	  	public static WebElement  materialReceiptNotesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_5+_2']")
	  	public static WebElement  materialReceiptNotesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_1280_5']")
	  	public static WebElement  materialReceiptNotesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1280_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  materialReceiptNotesEFES_closeBtn; 
	   
	   
	   // MaterialReceiptNotes Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[2]/div[5]/div/div[1]/fieldset/div[1]/div[1]/div[1]/div/div[1]/select")
	  	public static WebElement  materialReceiptNotesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1280_7']")
	  	public static WebElement  materialReceiptNotesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[2]/div[5]/div/div[1]/fieldset/div[1]/div[1]/div[2]/div/div[1]/select")
	  	public static WebElement  materialReceiptNotesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[2]/div[5]/div/div[1]/fieldset/div[1]/div[2]/div[2]/div/input")
	  	public static WebElement  materialReceiptNotesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[2]/div[5]/div/div[1]/fieldset/div[1]/div[1]/div[3]/div/div/select")
	  	public static WebElement  materialReceiptNotesELV_ClassNameDropdown;
			
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[2]/div[5]/div/div[1]/fieldset/div[1]/div[2]/div[3]/div/select")
	  	public static WebElement  materialReceiptNotesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_0']")
	  	public static WebElement  materialReceiptNotesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_1']")
	  	public static WebElement  materialReceiptNotesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1280_7+_2']")
	  	public static WebElement  materialReceiptNotesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1280_7']")
	  	public static WebElement  materialReceiptNotesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[1]/span[1]/i")
	  	public static WebElement  materialReceiptNotesELV_InsertBtn;
			
	   @FindBy(xpath="/html/body/section/div[2]/div/section[1]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[3]/div[2]/div/div[1]/span[2]/i")
	  	public static WebElement  materialReceiptNotesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1280_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  materialReceiptNotesELV_closeBtn;
	   
	   
	   /////////////////////
	   
	//SalesQuotations External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_0']")
	  	public static WebElement  salesQuotationsEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_1']")
	  	public static WebElement  salesQuotationsEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_5+_2']")
	  	public static WebElement  salesQuotationsEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7424_5']")
	  	public static WebElement  salesQuotationsEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7424_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesQuotationsEFES_closeBtn; 
	   
	   
	   // SalesQuotations Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_0']")
	  	public static WebElement  salesQuotationsELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_1']")
	  	public static WebElement  salesQuotationsELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7424_7+_2']")
	  	public static WebElement  salesQuotationsELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7424_7']")
	  	public static WebElement  salesQuotationsELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7424_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesQuotationsELV_closeBtn;
	   
	   
	   ////////////////////////////
	   
	//DeliveryNotes External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_0']")
	  	public static WebElement  deliveryNotesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_1']")
	  	public static WebElement  deliveryNotesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_5+_2']")
	  	public static WebElement  deliveryNotesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_6144_5']")
	  	public static WebElement  deliveryNotesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_6144_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  deliveryNotesEFES_closeBtn; 
	   
	   
	   // DeliveryNotes Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_0']")
	  	public static WebElement  deliveryNotesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_1']")
	  	public static WebElement  deliveryNotesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_6144_7+_2']")
	  	public static WebElement  deliveryNotesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_6144_7']")
	  	public static WebElement  deliveryNotesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_6144_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  deliveryNotesELV_closeBtn;
	   
	   
	   /////////////////
	   

		// PosSales External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3331_5']")
	  	public static WebElement  posSalesEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3331_5']")
	  	public static WebElement  posSalesEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3331_5']")
	  	public static WebElement  posSalesEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3331_5']")
	  	public static WebElement  posSalesEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3331_5']")
	  	public static WebElement  posSalesEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3331_5']")
	  	public static WebElement  posSalesEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_0']")
	  	public static WebElement  posSalesEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_1']")
	  	public static WebElement  posSalesEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_5+_2']")
	  	public static WebElement  posSalesEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3331_5']")
	  	public static WebElement  posSalesEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3331_5']")
	  	public static WebElement  posSalesEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3331_5']")
	  	public static WebElement  posSalesEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3331_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  posSalesEFES_closeBtn; 
	   
	   
	   // PosSales Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3331_7']")
	  	public static WebElement  posSalesELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3331_7']")
	  	public static WebElement  posSalesELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3331_7']")
	  	public static WebElement  posSalesELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3331_7']")
	  	public static WebElement  posSalesELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3331_7']")
	  	public static WebElement  posSalesELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3331_7']")
	  	public static WebElement  posSalesELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_0']")
	  	public static WebElement  posSalesELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_1']")
	  	public static WebElement  posSalesELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3331_7+_2']")
	  	public static WebElement  posSalesELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3331_7']")
	  	public static WebElement  posSalesELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3331_7']")
	  	public static WebElement  posSalesELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3331_7']")
	  	public static WebElement  posSalesELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3331_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  posSalesELV_closeBtn;
	   
	   /////////////////
	   
		// ProductionOrders External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_0']")
	  	public static WebElement  productionOrdersEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_1']")
	  	public static WebElement  productionOrdersEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_5+_2']")
	  	public static WebElement  productionOrdersEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5633_5']")
	  	public static WebElement  productionOrdersEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5633_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  productionOrdersEFES_closeBtn; 
	   
	   
	   // ProductionOrders Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_0']")
	  	public static WebElement  productionOrdersELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_1']")
	  	public static WebElement  productionOrdersELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5633_7+_2']")
	  	public static WebElement  productionOrdersELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5633_7']")
	  	public static WebElement  productionOrdersELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5633_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  productionOrdersELV_closeBtn;
	   
	   
	   /////////////////////////
	   
		// SalesOrders External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_0']")
	  	public static WebElement  salesOrdersEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_1']")
	  	public static WebElement  salesOrdersEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_5+_2']")
	  	public static WebElement  salesOrdersEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5632_5']")
	  	public static WebElement  salesOrdersEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5632_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesOrdersEFES_closeBtn; 
	   
	   
	   // SalesOrders Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_0']")
	  	public static WebElement  salesOrdersELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_1']")
	  	public static WebElement  salesOrdersELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5632_7+_2']")
	  	public static WebElement  salesOrdersELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5632_7']")
	  	public static WebElement  salesOrdersELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5632_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  salesOrdersELV_closeBtn;
	   
	   
	   ////////////////////////////
	   
		// ShortageInStocks External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_0']")
	  	public static WebElement  shortageInStocksEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_1']")
	  	public static WebElement  shortageInStocksEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_5+_2']")
	  	public static WebElement  shortageInStocksEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5376_5']")
	  	public static WebElement  shortageInStocksEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5376_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  shortageInStocksEFES_closeBtn; 
	   
	   
	   // ShortageInStocks Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_0']")
	  	public static WebElement  shortageInStocksELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_1']")
	  	public static WebElement  shortageInStocksELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_5376_7+_2']")
	  	public static WebElement  shortageInStocksELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_5376_7']")
	  	public static WebElement  shortageInStocksELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_5376_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  shortageInStocksELV_closeBtn;
	   
	   /////////////////////////////
	   
		// ExcessInStocks External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_0']")
	  	public static WebElement  excessInStocksEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_1']")
	  	public static WebElement  excessInStocksEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_5+_2']")
	  	public static WebElement  excessInStocksEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2048_5']")
	  	public static WebElement  excessInStocksEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2048_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  excessInStocksEFES_closeBtn; 
	   
	   
	   // ExcessInStocks Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_0']")
	  	public static WebElement  excessInStocksELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_1']")
	  	public static WebElement  excessInStocksELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_2048_7+_2']")
	  	public static WebElement  excessInStocksELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_2048_7']")
	  	public static WebElement  excessInStocksELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_2048_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  excessInStocksELV_closeBtn;
	   
	   ///////////////////////
	   
		// StockTransfers External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_0']")
	  	public static WebElement  stockTransfersEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_1']")
	  	public static WebElement  stockTransfersEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_5+_2']")
	  	public static WebElement  stockTransfersEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3072_5']")
	  	public static WebElement  stockTransfersEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3072_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  stockTransfersEFES_closeBtn; 
	   
	   
	   // StockTransfers Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_0']")
	  	public static WebElement  stockTransfersELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_1']")
	  	public static WebElement  stockTransfersELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_3072_7+_2']")
	  	public static WebElement  stockTransfersELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_3072_7']")
	  	public static WebElement  stockTransfersELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_3072_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  stockTransfersELV_closeBtn;
	   
	   
	   /////////////////////////
	   
		// OpeningStocks External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_512_5']")
	  	public static WebElement  openingStocksEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_512_5']")
	  	public static WebElement  openingStocksEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_512_5']")
	  	public static WebElement  openingStocksEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_512_5']")
	  	public static WebElement  openingStocksEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_512_5']")
	  	public static WebElement  openingStocksEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_512_5']")
	  	public static WebElement  openingStocksEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_0']")
	  	public static WebElement  openingStocksEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_1']")
	  	public static WebElement  openingStocksEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_5+_2']")
	  	public static WebElement  openingStocksEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_512_5']")
	  	public static WebElement  openingStocksEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_512_5']")
	  	public static WebElement  openingStocksEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_512_5']")
	  	public static WebElement  openingStocksEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_512_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  openingStocksEFES_closeBtn; 
	   
	   
	   // OpeningStocks Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_512_7']")
	  	public static WebElement  openingStocksELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_512_7']")
	  	public static WebElement  openingStocksELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_512_7']")
	  	public static WebElement  openingStocksELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_512_7']")
	  	public static WebElement  openingStocksELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_512_7']")
	  	public static WebElement  openingStocksELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_512_7']")
	  	public static WebElement  openingStocksELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_0']")
	  	public static WebElement  openingStocksELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_1']")
	  	public static WebElement  openingStocksELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_512_7+_2']")
	  	public static WebElement  openingStocksELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_512_7']")
	  	public static WebElement  openingStocksELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_512_7']")
	  	public static WebElement  openingStocksELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_512_7']")
	  	public static WebElement  openingStocksELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_512_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  openingStocksELV_closeBtn;
	   
	   /////////////////////////////
	   
		// MaterialRequisition External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_0']")
	  	public static WebElement  materialRequisitionEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_1']")
	  	public static WebElement  materialRequisitionEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_5+_2']")
	  	public static WebElement  materialRequisitionEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7936_5']")
	  	public static WebElement  materialRequisitionEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7936_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  materialRequisitionEFES_closeBtn; 
	   
	   
	   // MaterialRequisition Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_0']")
	  	public static WebElement  materialRequisitionELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_1']")
	  	public static WebElement  materialRequisitionELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_7936_7+_2']")
	  	public static WebElement  materialRequisitionELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_7936_7']")
	  	public static WebElement  materialRequisitionELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_7936_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  materialRequisitionELV_closeBtn;
	   
	   
	   //////////////////////////////////////
	   
	   // stockAdjustment External Functions/ Edit Screen---EFES
		
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_0']")
	  	public static WebElement  stockAdjustmentEFES_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_1']")
	  	public static WebElement  stockAdjustmentEFES_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_5+_2']")
	  	public static WebElement  stockAdjustmentEFES_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_1023_5']")
	  	public static WebElement  stockAdjustmentEFES_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1023_5']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  stockAdjustmentEFES_closeBtn; 
	   
	   
	   // StockAdjustment Edit Layout/ Views-----ELV
	   
	   @FindBy(xpath="//select[@id='cmbOnEvent_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_onEventDropdown; 

	   @FindBy(xpath="//input[@id='txtButtonCaption_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_ButtonCaptionTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbModuleType_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_ModuleTypeDropdown;
			
	   @FindBy(xpath="//input[@id='txtModuleName_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_ModuleNameOrURlTxt; 
	   
	   @FindBy(xpath="//select[@id='cmbClassname_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_ClassNameDropdown;
			
	   @FindBy(xpath="//select[@id='cmbFunctionName_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_FunctionNameDropdown; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_0']")
	  	public static WebElement  stockAdjustmentELV_AvailableInToolBarRadio;
			
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_1']")
	  	public static WebElement  stockAdjustmentELV_AvailableOnScreenRadio; 
	   
	   @FindBy(xpath="//input[@id='dvAvailable_VT_1023_7+_2']")
	  	public static WebElement  stockAdjustmentELV_BothRadio;
			
	   @FindBy(xpath="//input[@id='chkExecuteOnServer_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_ExecuteOnServerChkBox; 
	   
	   @FindBy(xpath="//input[@id='btnInsert_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_InsertBtn;
			
	   @FindBy(xpath="//input[@id='btnRemove_VT_1023_7']")
	  	public static WebElement  stockAdjustmentELV_RemoveBtn; 
	   
	   @FindBy(xpath="//div[@id='dvDLLS_VT_1023_7']//button[@class='btn btn-default'][contains(text(),'Close')]")
	  	public static WebElement  stockAdjustmentELV_closeBtn;
	   
	   
	   
	   //////////////////////////////////////////////////////////////////////
	   
	   
	   
	   //Grid Elements
	   
	   @FindBy(xpath="//section[@id='page_Content']//tr[1]//td[1]//input[1]")
	  	public static WebElement  selectRow1ChkBox; 
	   
	   @FindBy(xpath="//section[@id='page_Content']//tr[2]//td[1]//input[1]")
	  	public static WebElement  selectRow2ChkBox; 
	   
	   ////////////////////////////////
	   
	   @FindBy(xpath="//a[contains(text(),'antlr.runtime.dll')]")
	  	public static WebElement  antlrruntimedllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Antlr3.Runtime.dll')]")
	  	public static WebElement  antlr3RuntimedllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Aspose.Pdf.Builder.dll')]")
	  	public static WebElement  asposePdfBuilderdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Aspose.Pdf.dll')]")
	  	public static WebElement  asposePdfdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Common.Logging.dll')]")
	  	public static WebElement  commonLoggingdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Common.Logging.Log4Net.dll')]")
	  	public static WebElement  commonLoggingLog4NetdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'DocumentFormat.OpenXml.dll')]")
	  	public static WebElement  documentFormatOpenXmldllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'EPPlus.dll')]")
	  	public static WebElement  ePPlusdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Facebook.dll')]")
	  	public static WebElement  facebookdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'FControls.dll')]")
	  	public static WebElement  fControlsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.AccountMgmt.BL.dll')]")
	  	public static WebElement  focusAccountMgmtBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.AccountMgmt.DataStructs.dll')]")
	  	public static WebElement  focusAccountMgmtDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Common.BL.dll')]")
	  	public static WebElement  focusCommonBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Common.DataStructs.dll')]")
	  	public static WebElement  focusCommonDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Company.BL.dll')]")
	  	public static WebElement  focusCompanyBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Company.DataStructs.dll')]")
	  	public static WebElement  focusCompanyDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.CoreMasters.BL.dll')]")
	  	public static WebElement  focusCoreMastersBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.CoreMasters.DataStructs.dll')]")
	  	public static WebElement  focusCoreMastersDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.CoreTransaction.BL.dll')]")
	  	public static WebElement  focusCoreTransactionBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.CoreTransaction.DataStructs.dll')]")
	  	public static WebElement  focusCoreTransactionDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.CreditManagement.BL.dll')]")
	  	public static WebElement  focusCreditManagementBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.CreditManagement.DataStructs.dll')]")
	  	public static WebElement  focusCreditManagementDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.DashBoard.BL.dll')]")
	  	public static WebElement  focusDashBoardBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.DashBoard.DataStructs.dll')]")
	  	public static WebElement  focusDashBoardDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.DatabaseFactory.dll')]")
	  	public static WebElement  focusDatabaseFactorydllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.DataLayer.dll')]")
	  	public static WebElement  focusDataLayerdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.DataManagement.BL.dll')]")
	  	public static WebElement  focusDataManagementBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.DataManagement.DataStructs.dll')]")
	  	public static WebElement  focusDataManagementDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.DBMnt.BL.dll')]")
	  	public static WebElement  focusDBMntBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Export.dll')]")
	  	public static WebElement  focusExportdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.ExternalCall.BL.dll')]")
	  	public static WebElement  focusExternalCallBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.ExternalPosting.BL.dll')]")
	  	public static WebElement  focusExternalPostingBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.ExternalPosting.DataStructs.dll')]")
	  	public static WebElement  focusExternalPostingDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.FixedAssets.BL.dll')]")
	  	public static WebElement  focusFixedAssetsBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.FixedAssets.DataStructs.dll')]")
	  	public static WebElement  focusFixedAssetsDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.GST.BL.DLL')]")
	  	public static WebElement  focusGSTBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.GST.DataStructs.DLL')]")
	  	public static WebElement  focusGSTDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Home.BL.dll')]")
	  	public static WebElement  focusHomeBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Home.DataStructs.dll')]")
	  	public static WebElement  focusHomeDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.HRMS.DS.DLL')]")
	  	public static WebElement  focusHRMSDSdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.HRMS.Infrastructure.dll')]")
	  	public static WebElement  focusHRMSInfrastructuredllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Maintenance.BL.dll')]")
	  	public static WebElement  focusMaintenanceBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Maintenance.DataStructs.dll')]")
	  	public static WebElement  focusMaintenanceDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Masters.BL.dll')]")
	  	public static WebElement  focusMastersBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Masters.DataStructs.dll')]")
	  	public static WebElement  focusMastersDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Migration.BL.dll')]")
	  	public static WebElement  focusMigrationBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.MRP.DataStructs.dll')]")
	  	public static WebElement  focusMRPDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.MRP8.BL.dll')]")
	  	public static WebElement  focusMRP8BLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.MRP8.DataStructs.dll')]")
	  	public static WebElement  focusMRP8DataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Organization.BL.dll')]")
	  	public static WebElement  focusOrganizationBLdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Organization.DataStructs.dll')]")
	  	public static WebElement  focusOrganizationDataStructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Pay.Datastructs.dll')]")
	  	public static WebElement  focusPayDatastructsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Pos.BusinessLayer.dll')]")
	  	public static WebElement  focusPosBusinessLayerdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Pos.BusinessObjects.dll')]")
	  	public static WebElement  focusPosBusinessObjectsdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Pos.Common.dll')]")
	  	public static WebElement  focusPosCommondllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Pos.DataAccessLayer.dll')]")
	  	public static WebElement  focusPosDataAccessLayerdllBtn;
			
	   @FindBy(xpath="//a[contains(text(),'Focus.Printing.dll')]")
	  	public static WebElement  focusPrintingdllBtn;
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Pronghorn.BL.dll')]")
	  	public static WebElement  focusPronghornBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.QC.BL.dll')]")
	  	public static WebElement  focusQCBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.QC.DataStructs.dll')]")
	  	public static WebElement  focusQCDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.RD.BL.dll')]")
	  	public static WebElement  focusRDBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.RD.DataStructs.dll')]")
	  	public static WebElement  focusRDDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Security.BL.dll')]")
	  	public static WebElement  focusSecurityBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Security.DataStructs.dll')]")
	  	public static WebElement  focusSecurityDataStructsdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'Focus.Security.Web.dll')]")
	  	public static WebElement  focusSecurityWebdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Session.BL.dll')]")
	  	public static WebElement  focusSessionBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Synchronization.BL.dll')]")
	  	public static WebElement  focusSynchronizationBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Synchronization.DataStructs.dll')]")
	  	public static WebElement  focusSynchronizationDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Tds.BL.dll')]")
	  	public static WebElement  focusTdsBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Transactions.BL.dll')]")
	  	public static WebElement  focusTransactionsBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Transactions.DataStructs.dll')]")
	  	public static WebElement  focusTransactionsDataStructsdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'Focus.TranSettings.BL.dll')]")
	  	public static WebElement  focusTranSettingsBLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.TranSettings.DataStructs.dll')]")
	  	public static WebElement  focusTranSettingsDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Controls.dll')]")
	  	public static WebElement  focusWebMvcControlsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.dll')]")
	  	public static WebElement  focusWebMvcdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Resources.dll')]")
	  	public static WebElement  focusWebMvcResourcesdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.Web.Mvc.Session.dll')]")
	  	public static WebElement  focusWebMvcSessiondllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus.WMS.BL.dll')]")
	  	public static WebElement  focusWMSBLdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'Focus.WMS.DataStructs.dll')]")
	  	public static WebElement  focusWMSDataStructsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Focus8W.dll')]")
	  	public static WebElement  focus8WdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'FocusWpfControls.dll')]")
	  	public static WebElement  focusWpfControlsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'FusionCharts.dll')]")
	  	public static WebElement  fusionChartsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'FWebControls.dll')]")
	  	public static WebElement  fWebControlsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Google.Apis.Auth.dll')]")
	  	public static WebElement  googleApisAuthdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Google.Apis.Auth.PlatformServices.dll')]")
	  	public static WebElement  googleApisAuthPlatformServicesdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'Google.Apis.Core.dll')]")
	  	public static WebElement  googleApisCoredllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Google.Apis.dll')]")
	  	public static WebElement  googleApisdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Google.Apis.PlatformServices.dll')]")
	  	public static WebElement  googleApisPlatformServicesdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Hammock.dll')]")
	  	public static WebElement  hammockdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'ICSharpCode.SharpZipLib.dll')]")
	  	public static WebElement  iCSharpCodeSharpZipLibdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Ionic.Zip.dll')]")
	  	public static WebElement  ionicZipdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'itextsharp.dll')]")
	  	public static WebElement  itextsharpdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'log4net.dll')]")
	  	public static WebElement  log4netdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Activities.Build.dll')]")
	  	public static WebElement  microsoftActivitiesBuilddllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.AspNet.SignalR.Core.dll')]")
	  	public static WebElement  microsoftAspNetSignalRCoredllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.AspNet.SignalR.SystemWeb.dll')]")
	  	public static WebElement  microsoftAspNetSignalRSystemWebdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Office.Interop.Outlook.DLL')]")
	  	public static WebElement  microsoftOfficeInteropOutlookdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.dll')]")
	  	public static WebElement  microsoftOwindllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Host.SystemWeb.dll')]")
	  	public static WebElement  microsoftOwinHostSystemWebdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Security.Cookies.dll')]")
	  	public static WebElement  microsoftOwinSecurityCookiesdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Owin.Security.dll')]")
	  	public static WebElement  microsoftOwinSecuritydllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.EnterpriseLibrary.Common.dll')]")
	  	public static WebElement  microsoftPracticesEnterpriseLibraryCommondllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.EnterpriseLibrary.Data.dll')]")
	  	public static WebElement  microsoftPracticesEnterpriseLibraryDatadllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.ObjectBuilder2.dll')]")
	  	public static WebElement  microsoftPracticesObjectBuilder2dllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Practices.Unity.dll')]")
	  	public static WebElement  microsoftPracticesUnitydllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Microsoft.VisualStudio.QualityTools.UnitTestFramew')]")
	  	public static WebElement  microsoftVisualStudioQualityToolsUnitTestFramew; 
	    
	   @FindBy(xpath="//a[contains(text(),'Microsoft.Web.Infrastructure.dll')]")
	  	public static WebElement  microsoftWebInfrastructuredllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'MVC4ControlsToolkit.dll')]")
	  	public static WebElement  mVvc4ControlsToolkitdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'MVCControlsToolkit.Business.dll')]")
	  	public static WebElement  mvcControlsToolkitBusinessdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'MySqlSL.dll')]")
	  	public static WebElement  mySqlSLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Newtonsoft.Json.dll')]")
	  	public static WebElement  newtonsoftJsondllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'NPOI.dll')]")
	  	public static WebElement  npoidllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'NPOI.Extension.dll')]")
	  	public static WebElement  npoiExtensiondllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'NPOI.OOXML.dll')]")
	  	public static WebElement  npoiOOXMLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'NPOI.OpenXml4Net.dll')]")
	  	public static WebElement  npoiOpenXml4NetdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'NPOI.OpenXmlFormats.dll')]")
	  	public static WebElement  npoiOpenXmlFormatsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'office.DLL')]")
	  	public static WebElement  officedllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'OracleSL.dll')]")
	  	public static WebElement  oracleSLdllBtn; 
	   
	   @FindBy(xpath="//a[119]")
	  	public static WebElement  owindllBtn; 
	   
	   @FindBy(xpath="//a[120]")
	  	public static WebElement  resourcesdll1Btn; 
	      
	   @FindBy(xpath="//a[contains(text(),'ResPOS.dll')]")
	  	public static WebElement  resPOSdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Spring.Core.dll')]")
	  	public static WebElement  springCoredllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Spring.Web.dll')]")
	  	public static WebElement  springWebdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Spring.Web.Mvc3.dll')]")
	  	public static WebElement  springWebMvc3dllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'SqlServerSL.dll')]")
	  	public static WebElement  sqlServerSLdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'SRVTextToImage.dll')]")
	  	public static WebElement  srvTextToImagedllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'StackExchange.Redis.dll')]")
	  	public static WebElement  stackExchangeRedisdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'stdole.dll')]")
	  	public static WebElement  stdoledllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'SyntaxLayer.dll')]")
	  	public static WebElement  syntaxLayerdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.ComponentModel.Composition.Registration.dll')]")
	  	public static WebElement  systemComponentModelCompositionRegistrationdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.IO.Compression.dll')]")
	  	public static WebElement  systemIOCompressiondllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.IO.Compression.FileSystem.dll')]")
	  	public static WebElement  systemIOCompressionFileSystemdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Net.Http.dll')]")
	  	public static WebElement  systemNetHttpdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Net.Http.WebRequest.dll')]")
	  	public static WebElement  systemNetHttpWebRequestdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'System.Reflection.Context.dll')]")
	  	public static WebElement  systemReflectionContextdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.ServiceModel.Internals.dll')]")
	  	public static WebElement  systemServiceModelInternalsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.Helpers.dll')]")
	  	public static WebElement  systemWebHelpersdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.Mvc.dll')]")
	  	public static WebElement  systemWebMvcdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.Optimization.dll')]")
	  	public static WebElement  systemWebOptimizationdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.Razor.dll')]")
	  	public static WebElement  systemWebRazordllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.Deployment.dll')]")
	  	public static WebElement  systemWebWebPagesDeploymentdllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.dll')]")
	  	public static WebElement  systemWebWebPagesdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Web.WebPages.Razor.dll')]")
	  	public static WebElement  systemWebWebPagesRazordllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Windows.dll')]")
	  	public static WebElement  systemWindowsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'System.Xml.Serialization.dll')]")
	  	public static WebElement  systemXmlSerializationdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'Transitionals.dll')]")
	  	public static WebElement  transitionalsdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'TweetSharp.dll')]")
	  	public static WebElement  tweetSharpdllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'WebActivator.dll')]")
	  	public static WebElement  webActivatordllBtn; 
	      
	   @FindBy(xpath="//a[contains(text(),'WebGrease.dll')]")
	  	public static WebElement  webGreasedllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'WebMatrix.Data.dll')]")
	  	public static WebElement  webMatrixDatadllBtn; 
	   
	   @FindBy(xpath="//a[contains(text(),'WebMatrix.WebData.dll')]")
	  	public static WebElement  webMatrixWebDatadllBtn; 
	   
	   @FindBy(xpath="//a[152]")
	  	public static WebElement  resourcesdll2Btn; 
	   
	   @FindBy(xpath="//a[153]")
	  	public static WebElement  resourcesdll3Btn; 
	   
	   
		
	 //**---------------------------------------------------------------------------------------------	
	 	
	 // Rules Tab	
	 	
	 	
	 	@FindBy(xpath="//span[contains(text(),'Rules')]")
	 	public static WebElement  rulesTab;

	 	@FindBy(xpath="//input[@class='btn btn-link']")
	 	public static WebElement clickhereToAddRuleBtn;
	 	
	 	@FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules']")
	 	public static WebElement  ruleNameTxt;
	 	
	 	@FindBy(xpath="//span[@class='optioncontrol_arrow_margin icon-down-arrow']")
	 	public static WebElement  ruleNameDropdown;

	     @FindBy(xpath="//*[@id='txtMasterRuleName_DocCustRules_input_settings']/span")
	 	public static WebElement  ruleNameSetingsBtn ;
	         
	         ////////////*****************pop
	         
	         @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_customize_popup_container']")
	     	public static WebElement ruleNameContainer;
	      
	     	   @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_customize_popup_footer']//input[1]")
	     	   public static WebElement ruleNameStandardFieldsBtn;
	     	   
	     				     @FindBy(xpath="//select[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_list']")
	     				     public static WebElement ruleNameStandardField_Fielddropdown;
	     				
	     				     @FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_header']")
	     				     public static WebElement ruleNameStandardField_HeaderText;
	     				
	     				     @FindBy(xpath="//select[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_alignment']")
	     				     public static WebElement ruleNameStandardField_AlignmentDropdown;
	     				
	     				     @FindBy(xpath="//input[@id='txtMasterRuleName_DocCustRules_customize_popup_standardfields_width']")
	     				     public static WebElement ruleNameStandardField_WidthText;
	     				
	     				     @FindBy(xpath="//section[@id='page_Content']//input[3]")
	     				     public static WebElement ruleNameStandardField_okBtn;
	     				
	     				     @FindBy(xpath="//section[@id='page_Content']//input[4]")
	     				     public static WebElement ruleNameStandardField_CanceBtn;
	     	
	 	    				     
	 	    	  @FindBy(xpath="//div[@id='txtMasterRuleName_DocCustRules_search_container']//input[2]")
	 	    	  public static WebElement ruleNameDeleteColoumnBtn;
	 	    	 
	 	    	  @FindBy(xpath="//section[@id='page_Content']//input[3]")
	 	    	  public static WebElement ruleNameokBtn;
	 	    	 
	 	    	  @FindBy(xpath="//section[@id='page_Content']//input[4]")
	 	    	  public static WebElement ruleNamecancelBtn;
	 	
	 	@FindBy(xpath="//input[@id='chkNewRecord_Rule_DocCustRules']")
	 	public static WebElement rulesNewRecordChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkEdit_Rule_DocCustRules']")
	 	public static WebElement rulesEditChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkLoad_Rule_DocCustRules']")
	 	public static WebElement rulesLoadChekbox ;
	   
	     @FindBy(xpath="//input[@id='chkOnLeave_Rule_DocCustRules']")
	 	public static WebElement rulesOnLeaveChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkBeforeDelete_Rule_DocCustRules']")
	 	public static WebElement rulesBeforeDeleteChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkOnEnter_Rule_DocCustRules']")
	 	public static WebElement rulesOnEnterChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkIsRuleActive_Rule_DocCustRules']")
	 	public static WebElement rulesActiveChekbox ;
	     
	     @FindBy(xpath="//input[@id='chkNoRuleCondition_DocCustRules']")
	 	public static WebElement rulesNoConditionChekbox;
	      
	      
	     //
	     @FindBy(xpath="//li[@class='IF-Tab']//a")
	 	public static WebElement rulesIfTab ;
	     
	     @FindBy(xpath="//li[@class='ELSE-Tab']//a")
	 	public static WebElement rulesElseTab ;
	     
	     // if 
	 	
	     @FindBy(xpath="//input[@id='txtField_RC_1_1_DocCustRules']")
	 	public static WebElement rulesIf_SelectFieldDropdown ;
	     
	     @FindBy(xpath="//select[@id='ddlOperators_RC_1_1_DocCustRules']")
	 	public static WebElement rulesIf_OPerationTypeDropdown ;
	     
	     @FindBy(xpath="//select[@id='ddlCompareWith_RC_1_1_DocCustRules']")
	 	public static WebElement rulesIf_CompareTypeDropdown;          //Value,Field,Formula---Related
	     
	     @FindBy(xpath="//input[@id='txtCompareType_RC_1_1_DocCustRules']")
	 	public static WebElement rulesIf_ValueTxt;
	     
	     @FindBy(xpath="//select[@id='ddlConjunction_RC_1_1_DocCustRules']")
	 	public static WebElement rulesIf_ConditionDropdown;          //Only,And,Or--RelatedDD
	     
	     
	   //IF **** Customize Formatting Grid

	 	@FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[1]/a/span")
	 	public static WebElement rulesIFformattingTabBtn ;
	     
	 	
	 	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-0']")
	 	public static WebElement rulesIFFormattingRow1Btn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Select Row')]")
	 	public static WebElement rulesIFFormattingSelectRowBtn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
	 	public static WebElement rulesIFFormattingDeleteRowBtn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
	 	public static WebElement rulesIFFormattingInsertRowBtn;
	 	
	 	
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-1']")
	 	public static WebElement rulesIFFormattingGridFieldName1 ;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-2']")
	 	public static WebElement rulesIFFormattingGridChangeValue1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-3']")
	 	public static WebElement rulesIFFormattingGridField1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-4']")
	 	public static WebElement rulesIFFormattingGridValue1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-5']")
	 	public static WebElement rulesIFFormattingGridCaption1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-6']")
	 	public static WebElement rulesIFFormattingGridRegularExpression1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-7']")
	 	public static WebElement rulesIFFormattingGridErrorMesage1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-8']")
	 	public static WebElement rulesIFFormattingGridBannerText1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-9']")
	 	public static WebElement rulesIFFormattingGridToolTip1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-10']")
	 	public static WebElement rulesIFFormattingGridmandatory1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-11']")
	 	public static WebElement rulesIFFormattingGridHidden1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-12']")
	 	public static WebElement rulesIFFormattingGridDisable1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-13']")
	 	public static WebElement rulesIFFormattingGridSpellCheck1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-14']")
	 	public static WebElement rulesIFFormattingGridAligement1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-15']")
	 	public static WebElement rulesIFFormattingGridCharacterCasting1;
	     
	     @FindBy(xpath="//td[@id='tblFormating_IF_Rule_DocCustRules_col_1-16']")
	 	public static WebElement rulesIFFormattingGridSelectFont1;
	     
	     
	    //
	     @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridFieldNameDropdown ;
	     
	     @FindBy(xpath="//td[@id='ddlChangeValueFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridChangeValueDropdown;
	     
	     @FindBy(xpath="//input[@id='txtCaptionFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridCaptionTxt;
	     
	     @FindBy(xpath="//input[@id='txtRegExFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridRegularExpressionTxt;
	     
	     @FindBy(xpath="//input[@id='txtErrorMsgForamt_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridErrorMesageTxt;
	     
	     @FindBy(xpath="//input[@id='txtBannertextFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridBannerTextTxt;
	     
	     @FindBy(xpath="//input[@id='txtTooltipFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridToolTipTxt;
	     
	     @FindBy(xpath="//input[@id='chkMandatoryFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridmandatorychkBox;
	     
	     @FindBy(xpath="//input[@id='chkHiddenFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridhiddenChkbox;
	     
	     @FindBy(xpath="//input[@id='chkDisableFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridDisableChkBox;
	     
	     @FindBy(xpath="//input[@id='chkSpecllCheckFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridspellCheckChkBox;
	     
	     @FindBy(xpath="//select[@id='ddlAlignmentFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridAligementDropdown;
	     
	     @FindBy(xpath="//select[@id='ddlCharCasingFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridCharacterCastingDropdown;
	     
	     @FindBy(xpath="//button[@id='btnFontFormat_IF_DocCustRules']")
	 	public static WebElement rulesIFFormattingGridSelectFontBtn;
	     
	                          
	     
	     			@FindBy(xpath="//*[@id='myFontControl_IF_Save']")
	     			public static WebElement fontIfsaveBtn;

	     			@FindBy(xpath="//*[@id='myFontControl_IF_Close']")
	 				public static WebElement fontIfcloseBtn;
	 			    
	     			@FindBy(xpath="//*[@id='fontFamily_ctrlFontControl_IF']")
	 			    public static WebElement fontIfFontFamilyDropdown;
	     
	 			    @FindBy(xpath="//*[@id='fontStyle_ctrlFontControl_IF']")
	 			    public static WebElement fontIfFontStyleDropdown;
	     
	 			    @FindBy(xpath="//*[@id='fontWeight_ctrlFontControl_IF']")
	 			    public static WebElement fontIfFontWeightDropdown;
	  
	 				@FindBy(xpath="//*[@id='fontSizes_ctrlFontControl_IF']")
	 				public static WebElement fontIfFontSizeDropdown;
	 				
	 				@FindBy(xpath="//*[@id='fontForeColor_ctrlFontControl_IF']")
	 				public static WebElement fontIfForeColourDropdown;
	 				
	 				@FindBy(xpath="//*[@id='fontBackColor_ctrlFontControl']")
	 				public static WebElement fontIfBackColourDropdown;
	 				
	 				@FindBy(xpath="//*[@id='chkBaseline_ctrlFontControl']")
	 				public static WebElement fontIfBaseLineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkOverLine_ctrlFontControl_IF']")
	 				public static WebElement fontIfOverLineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkStrikeThrough_ctrlFontControl_IF']")
	 				public static WebElement fontIfStrikeThroughCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkUnderline_ctrlFontControl_IF']")
	 				public static WebElement fontIfUnderlineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='previewfont_ctrlFontControl_IF']")
	 				public static WebElement fontIfFontPreviewTxt;
	 				
	 				@FindBy(xpath="//*[@id='chkEnableFont_ctrlFontControl_IF']")
	 				public static WebElement fontIfEnableFontCheckbox;
	     
	 	@FindBy(xpath="//button[@id='btnAddRule']")
	 	public static WebElement saveRuleBtn;
	 	
	 	@FindBy(xpath="//button[contains(text(),'Delete Rule')]")
	 	public static WebElement deleteRuleBtn;
	 	

	 	/// Rules--------IF Tab-------Message

	    @FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[2]/a/span")
	 	public static WebElement rulesIFMessageTab ;
	     
	    @FindBy(xpath="//input[@id='txtGeneralMsg_RuleIfMsg_DocCustRules']")
	 	public static WebElement rulesIFMessagesGenralMessageTxt;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[1]/div[2]/label/input")
	 	public static WebElement rulesIFMessagesInformationRadio;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[2]/div[2]/label/input")
	 	public static WebElement rulesIFMessagesWarnAndProceddRadio;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleIF_DocCustRules']/div[3]/div[2]/label/input")
	 	public static WebElement rulesIFMessagesWarnAndStopRadio;
	    
	 	
	 ///// IF Tab ****Alerts-----Grid Elements

	    @FindBy(xpath="//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[3]/a/span")
	 	public static WebElement rulesIFAlertTab ;

	    @FindBy(xpath="//input[@id='txtAlertMsg_RuleIfAlert_DocCustRules']")
	 	public static WebElement rulesIfAlertMessageTxt;
	     
	    @FindBy(xpath="//button[@id='custmizeAlertTemplate_RuleIF_DocCustRules']")
	    public static WebElement rulesIfCustmizeTemplateDropdown;
	     
	     @FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-0']")
	 	public static WebElement rulesIfAlertRow1;
	 	
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-1']")
	 	public static WebElement rulesIfAlertType1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-2']")
	 	public static WebElement rulesIfAlertToWhom1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-3']")
	 	public static WebElement rulesIfAlertSms1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-4']")
	 	public static WebElement rulesIfAlertEmail1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-5']")
	 	public static WebElement rulesIfAlertDashBoard1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-6']")
	 	public static WebElement rulesIfAlertPopUp1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-7']")
	 	public static WebElement rulesIfAlertGTalk1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-8']")
	 	public static WebElement rulesIfAlertSendSepcificMessage1;
	   
	 	@FindBy(xpath="//td[@id='tblAlert_IF_Rule_DocCustRules_col_1-9']")
	 	public static WebElement rulesIfAlertSpecificMesage1;
	 		
	    @FindBy(xpath="//select[@id='ddlTypeAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridTypeDropdown;
	     
	    @FindBy(xpath="//Select[@id='ddlRolesAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridToWhomDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlUsersAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridSmsDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlEmailAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridEmailDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlDashboardAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridDashBoardDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlPopupAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridPopUpDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlGTalkAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridGTalkDropdown;
	     
	    @FindBy(xpath="//input[@id='chkSendMsgAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridSendSpecificMessageChkBox;
	     
	    @FindBy(xpath="//input[@id='txtSpecificMsgAlert_IF_DocCustRules']")
	 	public static WebElement rulesIFAlertsGridSpecificMessageTxt;
	     


	     // Right Click On Page
	     
	    @FindBy(xpath="//a[@id='btnAddNewCondition']")
	  	public static WebElement rulesAddNewConditionBtn;
	      
	    @FindBy(xpath="//a[@id='btnRemoveCondition']")
	  	public static WebElement rulesRemoveConditionBtn;
	      
	     
	    //ELSE **** Customize Formatting Grid
	     
	 	@FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//ul[@class='nav nav-tabs tab-container-div theme_sub_Tab-Dark']//li[1]//a[1]")
	 	public static WebElement rulesELSEformattingTabBtn ;
	     
	 	
	 	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-0']")
	 	public static WebElement rulesElseFormattingRow1Btn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Select Row')]")
	 	public static WebElement rulesElseFormattingSelectRowBtn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
	 	public static WebElement rulesElseFormattingDeleteRowBtn;
	 	
	 	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
	 	public static WebElement rulesElseFormattingInsertRowBtn;
	 	
	 	
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-1']")
	 	public static WebElement rulesElseFormattingGridFieldName1 ;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-2']")
	 	public static WebElement rulesElseFormattingGridChangeValue1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-3']")
	 	public static WebElement rulesElseFormattingGridField1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-4']")
	 	public static WebElement rulesElseFormattingGridValue1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-5']")
	 	public static WebElement rulesElseFormattingGridCaption1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-6']")
	 	public static WebElement rulesElseFormattingGridRegularExpression1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-7']")
	 	public static WebElement rulesElseFormattingGridErrorMesage1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-8']")
	 	public static WebElement rulesElseFormattingGridBannerText1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-9']")
	 	public static WebElement rulesElseFormattingGridToolTip1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-10']")
	 	public static WebElement rulesElseFormattingGridmandatory1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-11']")
	 	public static WebElement rulesElseFormattingGridHidden1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-12']")
	 	public static WebElement rulesElseFormattingGridDisable1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-13']")
	 	public static WebElement rulesElseFormattingGridSpellCheck1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-14']")
	 	public static WebElement rulesElseFormattingGridAligement1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-15']")
	 	public static WebElement rulesElseFormattingGridCharacterCasting1;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-16']")
	 	public static WebElement rulesElseFormattingGridSelectFont1;
	     
	     
	  
	    @FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_ELSE_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridFieldNameDropdown ;
	     
	    @FindBy(xpath="//td[@id='tblFormating_Else_Rule_DocCustRules_col_1-2']//select[@id='ddlChangeValueFormat_IF_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridChangeValueDropdown;
	     
	    @FindBy(xpath="//input[@id='txtCaptionFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridCaptionTxt;
	     
	    @FindBy(xpath="//input[@id='txtRegExFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridRegularExpressionTxt;
	     
	    @FindBy(xpath="//input[@id='txtErrorMsgForamt_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridErrorMesageTxt;
	     
	    @FindBy(xpath="//input[@id='txtBannertextFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridBannerTextTxt;
	     
	    @FindBy(xpath="//input[@id='txtTooltipFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridToolTipTxt;
	     
	    @FindBy(xpath="//input[@id='chkMandatoryFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridmandatorychkBox;
	     
	    @FindBy(xpath="//input[@id='chkHiddenFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridhiddenChkbox;
	     
	    @FindBy(xpath="//input[@id='chkDisableFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridDisableChkBox;
	     
	    @FindBy(xpath="//input[@id='chkSpecllCheckFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridspellCheckChkBox;
	     
	    @FindBy(xpath="//select[@id='ddlAlignmentFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridAligementDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlCharCasingFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridCharacterCastingDropdown;
	     
	    @FindBy(xpath="//button[@id='btnFontFormat_Else_DocCustRules']")
	 	public static WebElement rulesElseFormattingGridSelectFontBtn;
	     
	                          
	     
	     			@FindBy(xpath="//*[@id='myFontControl_ELSE_Save']")
	     			public static WebElement fontElsesaveBtn;

	     			@FindBy(xpath="//*[@id='myFontControl_ELSE_Close']")
	 				public static WebElement fontElsecloseBtn;
	 			    
	     			@FindBy(xpath="//*[@id='fontFamily_ctrlFontControl_ELSE']")
	 			    public static WebElement fontElseFontFamilyDropdown;
	     
	 			    @FindBy(xpath="//*[@id='fontStyle_ctrlFontControl_ELSE']")
	 			    public static WebElement fontElseFontStyleDropdown;
	     
	 			    @FindBy(xpath="//*[@id='fontWeight_ctrlFontControl_ELSE']")
	 			    public static WebElement fontElseFontWeightDropdown;
	  
	 				@FindBy(xpath="//*[@id='fontSizes_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseFontSizeDropdown;
	 				
	 				@FindBy(xpath="//*[@id='fontForeColor_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseForeColourDropdown;
	 				
	 				@FindBy(xpath="//*[@id='fontBackColor_ctrlFontControl']")
	 				public static WebElement fontElseBackColourDropdown;
	 				
	 				@FindBy(xpath="//*[@id='chkBaseline_ctrlFontControl']")
	 				public static WebElement fontElseBaseLineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkOverLine_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseOverLineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkStrikeThrough_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseStrikeThroughCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='chkUnderline_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseUnderlineCheckbox;
	 				
	 				@FindBy(xpath="//*[@id='previewfont_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseFontPreviewTxt;
	 				
	 				@FindBy(xpath="//*[@id='chkEnableFont_ctrlFontControl_ELSE']")
	 				public static WebElement fontElseEnableFontCheckbox;
	     
	 	

	 	/// Rules--------ELSE Tab-------Message
	 	
	    @FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//ul[@class='nav nav-tabs tab-container-div theme_sub_Tab-Dark']//li[2]//a[1]")
	 	public static WebElement rulesElseEMessageTab ;
	     
	    @FindBy(xpath="//input[@id='txtGeneralMsg_RuleElseMsg_DocCustRules']")
	 	public static WebElement rulesElseMessagesGenralMessageTxt;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[1]/div[2]/label/input")
	 	public static WebElement rulesElseMessagesInformationRadio;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[2]/div[2]/label/input")
	 	public static WebElement rulesElseMessagesWarnAndProceddRadio;
	     
	    @FindBy(xpath="//*[@id='lstRdoMessageType_RuleElse_DocCustRules']/div[3]/div[2]/label/input")
	 	public static WebElement rulesElseMessagesWarnAndStopRadio;
	    
	 	
	     ///// ELSE Tab ****Alerts-----
	     

	    @FindBy(xpath="//div[@id='Rule_Else_DocCustRules']//li[3]//a[1]")
	 	public static WebElement rulesElseAlertTab ;

	    @FindBy(xpath="//input[@id='txtAlertMsg_RuleElseAlert_DocCustRules']")
	 	public static WebElement rulesElseAlertMessageTxt;
	     
	     @FindBy(xpath="//button[@id='custmizeAlertTemplate_RuleELse_DocCustRules']")
	     public static WebElement rulesElseCustmizeTemplateDropdown;
	     
	     @FindBy(xpath="//div[@class='dropup pull-right open']//a[contains(text(),'E-mail Template')]")
	     public static WebElement rulesElseCustmizeTempEmailTemplate;
	     
	     // Pop Up  Window Of EmailTemplate 
	     @FindBy(xpath="//i[@class='icon-font6 icon-new']")
	 	 public static WebElement  emailTempNewdropdown;
	 	
	 				@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[1]")
	 				public static WebElement  emailTempNew_LayoutBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[1]/ul/li/a[2]")
	 				public static WebElement  emailTempNew_PageBtn;
	 				
	 	@FindBy(xpath="//i[@class='icon-font6 icon-open']")
	 	public static WebElement  emailTempOpendropdown;
	 	
	 				@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[1]")
	 				public static WebElement  emailTempOpenBtn;
	 				
	 							@FindBy(xpath="//*[@id='3']")
	 							public static WebElement  emailTempOpenBtn_First;
	 							
	 							@FindBy(xpath="//*[@id='7']")
	 							public static WebElement  emailTempOpenBtn_Second;
	 							
	 							@FindBy(xpath="//button[@id='btn_PopUpOk']")
	 							public static WebElement  emailTempOpenBtn_okBtn;
	 							
	 							@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
	 							public static WebElement  emailTempOpenBtn_cancelBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[2]/ul/li/a[2]")
	 				public static WebElement emailTempFromXMLBtn;
	 	
	 	@FindBy(xpath="//i[@class='icon-font6 icon-save']")
	 	public static WebElement  emailTempSavedropdown;
	 	
	 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[1]")
	 				public static WebElement  emailTempSaveBtn;
	 				
	 							@FindBy(xpath="//input[@id='id_PopuplayoutName']")
	 							public static WebElement  emailTempSaveTxtField;
	 							
	 							@FindBy(xpath="//input[@id='id_PopuplayoutName']")
	 							public static WebElement  emailTempSave_okBtn;
	 							
	 							@FindBy(xpath="//*[@id='id_PopUp']/div/div/div[3]/button[2]")
	 							public static WebElement  emailTempSave_CancekBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[2]")
	 				public static WebElement  emailTempSaveAsBtn; //Clicking popup is same as savebtn popup
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[3]")
	 				public static WebElement  emailTempSaveAsImageBtn; //No Response
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[3]/ul/li/a[4]")
	 				public static WebElement  emailTempSaveAsXMLBtn; // Downloads xml file
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[23]/ul/li/a[5]")
	 				public static WebElement  emailTempSaveAsHTMLBtn; // Showing Error
	 				
	 	@FindBy(xpath="//*[@id='forHf']/span[4]")
	 	public static WebElement  emailTempRemovedropdown;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[1]")
	 				public static WebElement  emailTempRemoveBtn; //Raises popup
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[2]")
	 				public static WebElement  emailTempRemoveCurrentPageBtn; //Raises popup
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[4]/ul/li/a[3]")
	 				public static WebElement  emailTempRemoveControlBtn;				
	 				
	 	@FindBy(xpath="//*[@id='forHf']/span[5]")
	 	public static WebElement  emailTempPageNo;
	 	
	 	@FindBy(xpath="//*[@id='forHf']/span[6]")
	 	public static WebElement  emailTempControldrpdown;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[1]")
	 				public static WebElement  emailTempStaticTextBtn;
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[2]")
	 				public static WebElement  emailTempBitmapBtn;
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[3]")
	 				public static WebElement  emailTempBodyGridBtn;	
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[4]")
	 				public static WebElement  emailTempRectangleBtn;	
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[5]")
	 				public static WebElement  emailTempEcllipseBtn;	
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[6]")
	 				public static WebElement  emailTempLineBtn;	
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[7]")
	 				public static WebElement  emailTempAreaBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[6]/ul/li/a[8]")
	 				public static WebElement  emailTempTableBtn;	
	 				
	 	@FindBy(xpath="//*[@id='forHf']/span[7]")
	 	public static WebElement  emailTempAlignmentdropdown;
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[1]")
	 				public static WebElement  emailTempLeftAlignmentBtn;
	 										
	 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[2]")
	 				public static WebElement  emailTempRightAlignmentBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[3]")
	 				public static WebElement  emailTempTopAlignmentBtn;	
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[7]/ul/li/a[4]")
	 				public static WebElement  emailTempBottomAlignmentBtn;
	 				
	 	@FindBy(xpath="//*[@id='forHf']/span[8]")
	 	public static WebElement  emailTempSizedropdown;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[1]")
	 				public static WebElement  emailTempSameSizeBtn;
	 										
	 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[2]")
	 				public static WebElement  emailTempSameWidthBtn;
	 				
	 				@FindBy(xpath="//*[@id='forHf']/span[8]/ul/li/a[3]")
	 				public static WebElement  emailTempSameHeightBtn;
	 				
	 	@FindBy(xpath="//*[@id='forHf']/span[9]")
	 	public static WebElement  emailTempPrintdropdown;
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[1]")
	 				public static WebElement  emailTempPrint_PrintBtn;
	 													
	 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[2]")
	 				public static WebElement  emailTempPrint_PreviewBtn;
	 				
	 							@FindBy(xpath="//*[@id='fit-button']")
	 							public static WebElement emailTempPreview_FitToWidthBtn;
	 							
	 							@FindBy(xpath="//*[@id='zoom-in-button']")
	 							public static WebElement emailTempPreview_ZoomInBtn;
	 							
	 							@FindBy(xpath="//*[@id='zoom-out-button']")
	 							public static WebElement emailTempPreview_ZoomOutBtn;
	 							
	 				@FindBy(xpath="//*[@id='forHf']/span[9]/ul/li/a[3]")
	 				public static WebElement  emailTempPageSetUpBtn;
	 				
	 							@FindBy(xpath="//*[@id='id_PageSetUpPreview']")
	 							public static WebElement  emailTempPageSetupPagePreviewField;
	 							
	 							@FindBy(xpath="//*[@id='id_PageType']")
	 							public static WebElement  emailTempPageSetupPaperSizedropdown;
	 							
	 							@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='0']")
	 							public static WebElement  emailTempPageSetupPotraitRadio;
	 							
	 							@FindBy(xpath="//*[@id='id_PaperOrientation'][@value='1']")
	 							public static WebElement  emailTempPageSetupLandScapeRadio;
	 							
	 							@FindBy(xpath="//*[@id='id_PaperUnit'][@value='0']")
	 							public static WebElement  emailTempPageSetupCentimetersRadio;
	 							
	 							@FindBy(xpath="//*[@id='id_PaperUnit'][@value='1']")
	 							public static WebElement  emailTempPageSetupInchesRadio;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSizeLeftMarginDisplay']")
	 							public static WebElement  emailTempPageSetupLeftTxt;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSizeRightMarginDisplay']")
	 							public static WebElement  emailTempPageSetupRightTxt;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
	 							public static WebElement  emailTempPageSetupTopTxt;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSizeTopMarginDisplay']")
	 							public static WebElement  emailTempPageSetupBottomTxt;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSetupokBtn']")
	 							public static WebElement  emailTempPageSetupokBtn;
	 							
	 							@FindBy(xpath="//*[@id='id_PageSetupcancelBtn']")
	 							public static WebElement  emailTempPageSetUpcancelBtn;

	 	@FindBy(xpath="//*[@id='id_InvoiceDesingCancel'")
	 	public static WebElement  emailTempExitBtn;	
	 	
	 	// Fields Tab
	 	
	 	@FindBy(xpath="//*[@id='LiDesignField'")
	 	public static WebElement  emailTempFieldsTab;
	 	
	 	@FindBy(xpath="//span[contains(text(),'Master Fields')]")
	 	public static WebElement  masterFieldsExpandBtn;
	 	
	 				@FindBy(xpath="//span[contains(text(),'DocNo')]")
	 				public static WebElement  masterFieldsDocNodraganddrop;
	 	
	 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Date')]")
	 				public static WebElement  masterFieldsDatedraganddrop;
	 	
	 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Time')]")
	 				public static WebElement  masterFieldsTimedraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'PurchaseAC')]")
	 				public static WebElement  masterFieldsPurchaseACdraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'VendorAC')]")
	 				public static WebElement  masterFieldsVendorACdraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'UpdateStock')]")
	 				public static WebElement  masterFieldsUpdateStockdraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'RaiseReceipt')]")
	 				public static WebElement  masterFieldsRaiseReceiptdraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'AppropriateOn')]")
	 				public static WebElement  masterFieldsAppropriateOndraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'AdditionalValue')]")
	 				public static WebElement  masterFieldsAdditionalValuedraganddrop;
	 	
	 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Item')]")
	 				public static WebElement  masterFieldsItemdraganddrop;
	 	
	 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Quantity')]")
	 				public static WebElement  masterFieldsQuantitydraganddrop;
	 	
	 				@FindBy(xpath="//li[@class='treeview']//span[contains(text(),'Rate')]")
	 				public static WebElement  masterFieldsRatedraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'MRN Qty')]")
	 				public static WebElement  masterFieldsMRNqtydraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'Gross')]")
	 				public static WebElement  masterFieldsGrossdraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'Qty balance')]")
	 				public static WebElement  masterFieldsQtyBalancedraganddrop;
	 	
	 				@FindBy(xpath="//span[contains(text(),'Average rate')]")
	 				public static WebElement  masterFieldsAverageRatedraganddrop;
	 				
	 				@FindBy(xpath="//span[contains(text(),'Add Value')]")
	 				public static WebElement  masterFieldsAddValuedraganddrop;
	 	
	 	// Properties Tab
	 				
	 	@FindBy(xpath="//*[@id='LiProp'")
	 	public static WebElement   emailTempPropertiesTab;				

	 	// RightPanel expand Btn
	 	
	 	@FindBy(xpath="//*[@id='LiFieldDivList'")
	 	public static WebElement emailTempRightPanelMaxMinIcon;
	     
	     
	    ////////////////// 
	     
	     
	     @FindBy(xpath="//div[@class='dropup pull-right open']//a[contains(text(),'SMS Template')]")
	    	public static WebElement rulesElseCustmizeTempSmsTemplate;

	     
	     // Same as Trigger PopUp Customize Template Window
	     // Named As Template
	     
	     
	     // Grid Elements
	     
	    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-0']")
	 	public static WebElement rulesElseAlertRow1;
	 	
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-1']")
	 	public static WebElement rulesElseAlertType1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-2']")
	 	public static WebElement rulesElseAlertToWhom1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-3']")
	 	public static WebElement rulesElseAlertSms1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-4']")
	 	public static WebElement rulesElseAlertEmail1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-5']")
	 	public static WebElement rulesElseAlertDashBoard1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-6']")
	 	public static WebElement rulesElseAlertPopUp1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-7']")
	 	public static WebElement rulesElseAlertGTalk1;
	     
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-8']")
	 	public static WebElement rulesElseAlertSendSepcificMessage1;
	   
	 	@FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-9']")
	 	public static WebElement rulesElseAlertSpecificMesage1;
	 		
	 	
	    @FindBy(xpath="//select[@id='ddlTypeAlert_Else_DocCustRules']")
	 	public static WebElement rulesELSEAlertsGridTypeDropdown;
	     
	    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-2']//select[@id='ddlRolesAlert_IF_DocCustRules']")
	 	public static WebElement rulesELSEAlertsGridToWhomDropdown;
	     
	    @FindBy(xpath="//td[@id='tblAlert_Else_Rule_DocCustRules_col_1-3']//select[@id='ddlUsersAlert_IF_DocCustRules']")
	 	public static WebElement rulesELSEAlertsGridSmsDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlEmailAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridEmailDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlDashboardAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridDashBoardDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlPopupAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridPopUpDropdown;
	     
	    @FindBy(xpath="//select[@id='ddlGTalkAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridGTalkDropdown;
	     
	    @FindBy(xpath="//input[@id='chkSendMsgAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridSendSpecificMessageChkBox;
	     
	    @FindBy(xpath="//input[@id='txtSpecElseicMsgAlert_Else_DocCustRules']")
	 	public static WebElement rulesElseAlertsGridSpecificMessageTxt;
	   
	 	
	   //*-------------------------------------------------------------------------------------------------------------------	
	   	
//	   	Inventory Options
	   	
	   	@FindBy(xpath="//span[@class='icon-inventory']")
	   	public static WebElement  inventoryoptionsTab;
	   	
	   	@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc']")
	   	public static WebElement  costOfIssueAccountTxt;
	   	
	   	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_image']/span")
	   	public static WebElement  costOfIssueAccountDropdown;
	   	
	   	@FindBy(xpath="//*[@id='InventoryOpt_costOfIssueAcc_input_settings']/span")
	   	public static WebElement  costOfIssueAccountSettingBtn;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_container']")
	   	public static WebElement  costOfIssueAccountContainerTxt;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_customize_popup_footer']//input[1]")
	   	public static WebElement  costOfIssueAccountStandardfieldsBtn;
	   	
	   				@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_list']")
	   				public static WebElement  costOfIssueAccountFieldsDropdown;
	   				
	   				@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_header']")
	   				public static WebElement  costOfIssueAccountHeaderTxt;
	   				
	   				@FindBy(xpath="//select[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_alignment']")
	   				public static WebElement  costOfIssueAccountAllignmentDropdown;
	   				
	   				@FindBy(xpath="//input[@id='InventoryOpt_costOfIssueAcc_customize_popup_standardfields_width']")
	   				public static WebElement  costOfIssueAccountWidthTxt;
	   				
	   				@FindBy(xpath="//section[@id='page_Content']//input[3]")
	   				public static WebElement  costOfIssueAccountStandardFieldsokBtn;
	   				
	   				@FindBy(xpath="//section[@id='page_Content']//input[4]")
	   				public static WebElement  costOfIssueAccountStandardFieldscancelBtn;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_costOfIssueAcc_search_container']//input[2]")
	   	public static WebElement  costOfIssueAccountDeleteColumnBtn;
	   	
	   	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	   	public static WebElement  costOfIssueAccountokBtn;
	   	
	   	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	   	public static WebElement  costOfIssueAccountcancelBtn;
	   	
	   	@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC']")
	   	public static WebElement  salesPurchaseACTxt;
	   	
	   	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_image']/span")
	   	public static WebElement  salesPurchaseACDropdown;

	   	@FindBy(xpath="//*[@id='InventoryOpt_salesPurchaseACC_input_settings']/span")
	   	public static WebElement  salesPurchaseACSettingBtn;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
	   	public static WebElement  salesPurchaseACContainerTxt;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_customize_popup_container']")
	   	public static WebElement  salesPurchaseACStandardfieldsBtn;
	   	
	   				@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_list']")
	   				public static WebElement  salesPurchaseACFieldsDropdown;
	   				
	   				@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_header']")
	   				public static WebElement  salesPurchaseACHeaderTxt;
	   				
	   				@FindBy(xpath="//select[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_alignment']")
	   				public static WebElement  salesPurchaseACAllignmentDropdown;
	   				
	   				@FindBy(xpath="//input[@id='InventoryOpt_salesPurchaseACC_customize_popup_standardfields_width']")
	   				public static WebElement  salesPurchaseACWidthTxt;
	   				
	   				@FindBy(xpath="//section[@id='page_Content']//input[3]")
	   				public static WebElement  salesPurchaseACStandardFieldsokBtn;
	   				
	   				@FindBy(xpath="//section[@id='page_Content']//input[4]")
	   				public static WebElement  salesPurchaseACStandardFieldscancelBtn;
	   	
	   	@FindBy(xpath="//div[@id='InventoryOpt_salesPurchaseACC_search_container']//input[2]")
	   	public static WebElement  salesPurchaseACDeleteColumnBtn;
	   	
	   	@FindBy(xpath="//section[@id='page_Content']//input[3]")
	   	public static WebElement  salesPurchaseACokBtn;
	   	
	   	@FindBy(xpath="//section[@id='page_Content']//input[4]")
	   	public static WebElement  salesPurchaseACcancelBtn;
	   	
	   	@FindBy(xpath="//select[@id='inventoryOpt_ProductRate']")
	   	public static WebElement itemRateDropdown;
	   	
	   	@FindBy(xpath="//select[@id='inventoryOpt_ReservationType']")
	   	public static WebElement reservationTypeDropdown;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkApplyRateSchemes']")
	   	public static WebElement applyrateSchemesChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkPickFreeSchemesQntyAfterLn']")
	   	public static WebElement pickFreeSchemesQtyAfterEveryLineChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkDisplayUnitNameBforeQnty']")
	   	public static WebElement displayUnitNamebeforeEveryQtyChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputProducts']")
	   	public static WebElement dontInputItemsChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontInputQntyRate']")
	   	public static WebElement dontInputQtyAndRateChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkDontPopupBinSelAfterQnty']")
	   	public static WebElement dontPopupBinSelectionAfterQuantityChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGross']")
	   	public static WebElement hideRateAndGrossChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkHideRateAndGrossForNormalUsers']")
	   	public static WebElement hideRateAndGrossfromNormalUsersChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkHirePurchaseBehavior']")
	   	public static WebElement hirePurchaseBehaviourChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputCounterBill']")
	   	public static WebElement inputAsCounterBillChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBinLocation']")
	   	public static WebElement inputBinLocationChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputQntyBreakup']")
	   	public static WebElement inputItemByAttributeChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkQCRequiredForThisDoc']")
	   	public static WebElement qcrequiredforThisDocChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkRecalculateRateInReceiptFromProd']")
	   	public static WebElement recalculateTheRateInReceiptFromProductionOnSavingChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkRestrictItmFromRepeatedEntry']")
	   	public static WebElement restricttheitemFromBeingRepeatedInEntryChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkShowvendorassignproducts']")
	   	public static WebElement showVendorAssignedItemsChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBarcode']")
	   	public static WebElement inputBarcodeChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkShowHeldStock']")
	   	public static WebElement showHeldStockChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkCrossDoc']")
	   	public static WebElement crossDocChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkConsumeOrAllocateStock']")
	   	public static WebElement allocateStockChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableRFID']")
	   	public static WebElement enableRFIDChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkEnableQC']")
	   	public static WebElement enableQCChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkRateZero']")
	   	public static WebElement dontmakeThertaeZeroWhenItemisChangedChkBox;
	   	
	   // Batch	
	   	
	   	@FindBy(xpath="//select[@id='inventoryOpt_BatchPick']")
	   	public static WebElement batchPickDropdown;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkAllowExpiredBatchesToBeSelected']")
	   	public static WebElement allowExpiredbatchesToBeSelectedChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkLoadBatchesBforeQnty']")
	   	public static WebElement loadbatchesbeforeQuantityChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkSelectBatchesEvenIfStksNotUpdated']")
	   	public static WebElement reserveStockByBatchesChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBatchEvenIfStockIsNotUpdated']")
	   	public static WebElement inputBatchEvenIfStockIsnotUpdatedChkBox;
	   	
	   // Barcode	
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_rdbNotApplicable']")
	   	public static WebElement notApplicbleChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromTemplate']")
	   	public static WebElement fromTemplateChkBox;
	   	
	   	@FindBy(xpath="//input[@id='inventoryOpt_rdbFromField']")
	   	public static WebElement fromFieldChkBox;
	  
					
		///////////////toggle
			
			@FindBy(xpath="//span[@class='dropdown icon-menuicon1 icon-font6 theme_color-inverse pull-right']")
			public static WebElement  toogleExpandBtn;
			
			@FindBy(xpath="//*[@id='navHidetab4']")
			public static WebElement  viewsBtn;
			
			@FindBy(xpath="//*[@id='navHidetab15']")
			public static WebElement  schemesBtn;
			
			@FindBy(xpath="//*[@id='navHidetab6']")
			public static WebElement  exportFieldsBtn;
			
			@FindBy(xpath="//*[@id='navHidetab7']")
			public static WebElement  triggersBtn;
			
			@FindBy(xpath="//*[@id='navHidetab8']")
			public static WebElement  documentNumberingBtn;
			
			@FindBy(xpath="//*[@id='navHidetab10']")
			public static WebElement  hirePurchaseBtn;
						
			@FindBy(xpath="//*[@id='navHidetab11']")
			public static WebElement  rulesBtn;
			
			@FindBy(xpath="//*[@id='navHidetab12']")
			public static WebElement  reportsBtn;
						
			@FindBy(xpath="//span[@class='icon-document icon-font7']")
			public static WebElement  documentsBtn;
			
			@FindBy(xpath="//span[@class='icon-miscellaneous']")
			public static WebElement  miscellaneousBtn;
						
			@FindBy(xpath="//span[@class='icon-edit icon-font8 ImagesinArabic']")
			public static WebElement  editLayoutBtn;
			
			@FindBy(xpath="//span[@class='icon-export']")
			public static WebElement  externalFunctionsBtn;
						
			@FindBy(xpath="//li[@id='navHidetab5']")
			public static WebElement  externalFunctionsBtn;
						
			@FindBy(xpath="//span[@class='icon-edit icon-font8 ImagesinArabic']")
			public static WebElement  editScreenBtn;
						
			@FindBy(xpath="//span[@class='icon-inventory']")
			public static WebElement  inventoryOptionsBtn;
			
			
			

			@FindBy(xpath="//input[@id='misc_chkdntPostCogs']")
			public static WebElement  dontpostCOGS;

			@FindBy(xpath="//input[@id='misc_PostingSelectAccInLine']")
			public static WebElement selectAccountInEveryLineChkBox;

			                //input[@id='misc_currencyPostExgRateDiff']
			@FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
			public static WebElement inputLocalExchangeRateChkBox;

			@FindBy(xpath="//input[@id='misc_currencyPostExgRateDiff']")
			public static WebElement postExchangeRateDifferrenceChkBox;
			
						
		    //Document Customization for State and City
		    	   
		    	   @FindBy (xpath="//input[@id='iCountry']")
		    	   public static WebElement countryComboBox;
		    	   
		    	   @FindBy (xpath="//tbody[@id='iCountry_table_body']/tr/td[2]")
		    	   public static List<WebElement> countryComboBoxList;
		    	   
		    	   @FindBy (xpath="//input[@id='iState']")
		    	   public static WebElement stateComboBox;
		    	   
		    	   @FindBy (xpath="//tbody[@id='iState_table_body']/tr/td[2]")
		    	   public static List<WebElement> stateComboBoxList;
		    	   
		    	 
		    	   @FindBy (xpath="//div[@id='dvSearchBx']/div[2]/span[1]")
		    	   public static WebElement docCustCreateVoucherBtn;
		
		    	   
		    	   
		
		
		 
	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 
	        
	        try 
	        {
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
				doNotShowCheckbox.click();
				
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
				closeBtnInDemoPopupScreen.click(); 
				
				System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
				
			} 
	        catch (Exception e)
	        {
	        	System.err.println("NO POP UP DISPLAYED");
			}

	    	
	    	
	}
			 
			
	
	
	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
	        try
	        {
	                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
	                String actErrorMessage=errorMessage.getText();
	                String expErrorMessage=ExpMessage;

	                try
	                {
		                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		                errorMessageCloseBtn.click();
	                	
		                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		                
		                return actErrorMessage;
	                }
	                catch(Exception ee)
	                {
	                	
	                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
	                	
	                	return actErrorMessage;
	                }
	        }
	        catch(Exception e)
	        {
	                System.err.println("Error Message NOT Found or NOT Clickable");
	                System.err.println(e.getMessage());
	                
	                String Exception=e.getMessage();
	            
	                return Exception;
	        }
	}
	
	
	
@FindBy(xpath="//button[contains(text(),'Ok')]")
public static WebElement loginRefreshOkBtn;



public static void checkUserFriendlyMessage() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		
		System.out.println("Open Page then Message Display  :  " + actErrorMessage);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
		errorMessageCloseBtn.click();
		
		try
		{	
			System.out.println("In Try Block Validation Message  :  " + actErrorMessage);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}
		catch(Exception ee)
		{
			System.out.println("In Catch Block Validation Message  :  " + actErrorMessage);	
		}
	}
	catch(Exception e)
	{
		System.err.println("Error Message NOT Found or NOT Clickable");
		System.err.println(e.getMessage());
		
		String Exception=e.getMessage();
	}
}


public static void checkRefershPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
  
  try 
  {
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
		loginRefreshOkBtn.click();
		
		
	} 
  catch (Exception e)
  {
  	System.err.println("NO ALERT POP UP DISPLAYED");
	}

	
	
}
	    

	

	     
public static boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
{
	try
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		String actErrorMessage=errorMessage.getText();
		String expErrorMessage="Voucher saved successfully";
		String expErrorMessage1=": "+docno;
		
		System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);
		
		if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
		{
			try
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();
				
				return  true;
			}
			catch(Exception ee)
			{
				return true;
			}	
		}	
		else
		{
			return false;
		}	
	}
	catch(Exception e)
	{
		System.err.println("UNABLE TO COMPARE");
		return false;
	}
}	




public  boolean checkLoginAndOpenAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	LoginPage lp=new LoginPage(getDriver()); 
		
    String unamelt="su";
  
    String pawslt="su";
  
    lp.enterUserName(unamelt);

    lp.enterPassword(pawslt);
    String compname="Automation Options Company";

	 Select oSelect = new Select(companyDropDownList);
	 
	 List <WebElement> elementCount = oSelect.getOptions();

	 int cqSize = elementCount.size();
	 
	 System.out.println("CompanyDropdownList Count :"+cqSize);

	    int i;
	  
		for(i=0; i<elementCount.size(); i++) 
		{
		
		  elementCount.get(i).getText();
		  
	      String optionName = elementCount.get(i).getText();
	     if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
	     {
		  System.out.println("q"+elementCount.get(i).getText());
			  elementCount.get(i).click();
		 }
	 
	    }
		
       Thread.sleep(1000);
		

    Select s = new Select(companyDropDownList);
     int size=s.getOptions().size();
     
     System.err.println("SIZE : "+size);
     
     for(int i=0;i<size;i++)
     {
    	 String data;
    	 
    	 data=s.getOptions().get(i).getText();
    	 
    	 System.err.println("DATA : "+data);
    	 
    	 if(data.contains("ss [070]"))
    	 {
    		 
    		 s.selectByVisibleText(data);
    		 
    		 break;
    	 }
     }
    
    lp.clickOnSignInBtn();
    
    //checkRefershPopOnlogin();
    
    //checkPopUpWindow();
    
    Thread.sleep(5000);
          
    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
   	userNameDisplay.click();
           	
	String userInfo=userNameDisplay.getText();
	
	System.out.println("User Info : "+userInfo);
	
	System.out.println("User Info Capture Text :"+userNameDisplay.getText());
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
	
	companyLogo.click();
	
	String getCompanyTxt=companyName.getText();
	String getLoginCompanyName=getCompanyTxt.substring(0, );
	System.out.println("company name :"+ getLoginCompanyName);
	companyLogo.click();
	
	
	System.out.println("***********************************checkOpenAccountsMenu*********************************");
    
	if(companyLogo.isDisplayed()==true)
	{	
		return true;
	}	 
	else
	{
		return false;
	}
	
 }



@FindBy (xpath="//*[@id='220']/span")
public static WebElement currency;

@FindBy (xpath="//*[@id='221']/span")
public static WebElement products;


@FindBy (xpath="//*[@id='224']/span")
public static WebElement mrp;

@FindBy (xpath="//a[@id='225']//span[contains(text(),'QC')]")
public static WebElement qc;

@FindBy (xpath="//*[@id='251']/span")
public static WebElement maintainance;

	@FindBy (xpath="//*[@id='1164']/span")
	public static WebElement breakDownStandardReason;

@FindBy (xpath="//*[@id='8001']/span")
public static WebElement pointOfSale;

@FindBy (xpath="//*[@id='8006']/span")
public static WebElement giftVoucher;


@FindBy (xpath="//*[@id='8035']/span")
public static WebElement discountVoucher;

@FindBy (xpath="//*[@id='1025']/span")
public static WebElement tableManagement;

@FindBy (xpath="//*[@id='1103']/span")
public static WebElement payroll;

@FindBy (xpath="//*[@id='1106']/span")
public static WebElement departments;

@FindBy (xpath="//*[@id='1107']/span")
public static WebElement warehouse;

@FindBy (xpath="//*[@id='1108']/span")
public static WebElement costcenter;

@FindBy (xpath="//*[@id='1109']/span")
public static WebElement location;

@FindBy (xpath="//*[@id='1110']/span")
public static WebElement region;

@FindBy (xpath="//*[@id='1111']/span")
public static WebElement country;

@FindBy (xpath="//*[@id='1112']/span")
public static WebElement state;

@FindBy (xpath="//*[@id='1113']/span")
public static WebElement city;

@FindBy (xpath="//*[@id='1115']/span")
public static WebElement bins;

@FindBy (xpath="//*[@id='1126']/span")
public static WebElement insurance;

@FindBy (xpath="//*[@id='1127']/span")
public static WebElement fixedassets;

@FindBy (xpath="//*[@id='1161']/span")
public static WebElement taxCode;



//DataManagement menu
@FindBy (xpath="//*[@id='25']/span")
public static WebElement dataMangementMenu;

@FindBy (xpath="//*[@id='26']/span")
public static WebElement backup;
	
@FindBy (xpath="//*[@id='27']/span")
public static WebElement restore;

@FindBy (xpath="//*[@id='111']/span")
public static WebElement reindex;

@FindBy (xpath="//*[@id='115']/span")
public static WebElement eraseAll;

@FindBy (xpath="//*[@id='216']/span")
public static WebElement lockAndUnlock;


@FindBy (xpath="//button[@class='btn Fbutton']")
public static WebElement folderpathExpandBtn;

@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
public static WebElement restoreCompanyBtn;

@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
public static WebElement overRideYesBtn;

@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
public static WebElement overRideNoBtn;

@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
public static WebElement overRideCancelBtn;




public static boolean checkLoginAndRestoreOptionsCompanyAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
{
	LoginPage lp=new LoginPage(getDriver()); 
	
    String unamelt="su";
  
    String pawslt="su";
      
    lp.enterUserName(unamelt);
    
    lp.enterPassword(pawslt);
    
    lp.clickOnSignInBtn();
    
    //checkRefershPopOnlogin();
    
    //checkPopUpWindow();
  
	Thread.sleep(8000);
	
	String actUserInfo=userNameDisplay.getText();
	
	System.out.println("User Info  : "+actUserInfo);
	
	System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
	companyLogo.click();
	
	String getCompanyTxt=companyName.getText();
	String getLoginCompanyName=getCompanyTxt.substring(0, 19);
	System.out.println("company name  :  "+ getLoginCompanyName);
	companyLogo.click();
	
	
	String expUserInfo           ="SU";
	String expLoginCompanyName   ="Automation";
	
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	homeMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
	dataMangementMenu.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
	restore.click();
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
	folderpathExpandBtn.click();
	
	Thread.sleep(3000);
     
     Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\optionsCompanyRestore.exe");
     
     Thread.sleep(3000);
     
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
     restoreCompanyBtn.click();
     
     try
     {
    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
 		 overRideYesBtn.click();
 		 Thread.sleep(20000);
     }
     catch(Exception e)
     {
    	 System.err.println("NO OLDER COMPANY EXISTS");
     }
     
     Thread.sleep(3000);
     
     if(getIsAlertPresent())
     {
    	 getWaitForAlert();
    	 System.out.println(getAlert().getText());
    	 getAlert().accept();
     }
     
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
     userNameDisplay.click();
	
	
     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
     logoutOption.click();

     Thread.sleep(3000);
     
     lp.enterUserName(unamelt);
     
     lp.enterPassword(pawslt);
     
     Thread.sleep(2000);
     
     Select s = new Select(companyDropDownList);
     int size=s.getOptions().size();
     
     System.err.println("SIZE : "+size);
     
     for(int i=0;i<size;i++)
     {
    	 String data;
    	 
    	 data=s.getOptions().get(i).getText();
    	 
    	 System.err.println("DATA : "+data);
    	 
    	 if(data.contains("Automation Options"))
    	 {
    		 
    		 s.selectByVisibleText(data);
    		 
    		 break;
    	 }
     }
     
     lp.clickOnSignInBtn();
     
     Thread.sleep(8000);
     
     String actUserInfo1=userNameDisplay.getText();
		
	System.out.println("User Info  : "+actUserInfo1);
	
	System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
	
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
	companyLogo.click();
	
	String getCompanyTxt1=companyName.getText();
	String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
	System.out.println("company name  :  "+ getLoginCompanyName1);
	companyLogo.click();
	
	String expUserInfo1           ="SU";
	String expLoginCompanyName1   ="Automation Options ";
     
     
	System.out.println("UserInfo             : "+actUserInfo            +" Value Expected : "+expUserInfo);
	System.out.println("LoginCompanyName     : "+getLoginCompanyName    +" Value Expected : "+expLoginCompanyName);
	
	System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
	System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
	
	if(actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) 
			
			&& actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
	{

		return true;
	}
	else
	{
		return false;
	}
}




@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[11]")
public static List<WebElement> masterAccountsList;


@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
public static WebElement masterCloseBtn;


@FindBy(xpath="//*[@id='221']/span")
public static WebElement  homeMasterItemMenu;

@FindBy(xpath="//*[@id='1105']/span")
public static WebElement  homeMasterItem_ItemMenu;

 @FindBy(xpath="//a[@id='viewheading']/div/span[@id='spnHeaderText']")
 public static WebElement item_ItemLabel;

 
 @FindBy(xpath="//a[@id='72']/span")
 public static WebElement  homeMasterItem_UnitConversionMenu;
 

@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[12]")
public static List<WebElement> masterItemsList;


	//Currency Menu
		@FindBy(xpath="//a[@id='220']//span[contains(text(),'Currency')]")
		public static WebElement currencyMenu;
		
		@FindBy(xpath="//span[contains(text(),'Currency Master')]")
		public static WebElement currencyMasterMenu;
		
		@FindBy(xpath="//a[@id='71']//span[contains(text(),'Exchange Rate')]")
		public static WebElement exchangeRateMenu;
		
		@FindBy(xpath="//span[contains(text(),'Exchange Rate History')]")
		public static WebElement exchangeRateHistoryMenu;
		
		@FindBy(xpath="//span[@class='navText']//span[contains(text(),'Currency Master')]")
		public static WebElement currencyMasterlabel;
		
		@FindBy(xpath="//*[@id='ISOCurrencyCode']")
		public static WebElement ISOCurrencyCodeTxt;
		
		
		// ISO CurrencyPopUp
		//---------------------------------------------------------------------------------------------------------------------
		
		@FindBy(xpath="//td[@id='ISOCurrencyCode_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
		public static WebElement  ISOCurrencyCodeSettingsBtn;
		
			@FindBy(xpath="//h4[@id='ISOCurrencyCode_customize_popup_heading']")
			public static WebElement  ISOCurrencyCode_CustomizeDisplayColumnsLabel;
		
				@FindBy(xpath="//div[@id='ISOCurrencyCode_customize_popup_container']")
				public static WebElement  ISOCurrencysCodeContainerTxt;
				
				@FindBy(xpath="//div[@id='ISOCurrencyCode_customize_popup_footer']//input[1]")
				public static WebElement  ISOCurrencyCodeStanadrdfieldsBtn;
				
					@FindBy(xpath="//select[@id='ISOCurrencyCode_customize_popup_standardfields_list']")
					public static WebElement  ISOCurrencyCodeStanadrdfields_Fielddropdown;
					
					@FindBy(xpath="//input[@id='ISOCurrencyCode_customize_popup_standardfields_header']")
					public static WebElement  ISOCurrencyCodeStanadrdfields_headerTxt;
					
					@FindBy(xpath="//select[@id='ISOCurrencyCode_customize_popup_standardfields_alignment']")
					public static WebElement  ISOCurrencyCodeStanadrdfields_Allignmentdropdown;
					
					@FindBy(xpath="//input[@id='ISOCurrencyCode_customize_popup_standardfields_width']")
					public static WebElement  ISOCurrencyCodeStanadrdfields_WidthTxt;
					
					@FindBy(xpath="//div[@id='currencyMasterWidth']//input[3]")
					public static WebElement  ISOCurrencyCodeStanadrdfields_OkBtn;
					
					@FindBy(xpath="//section[@id='page_Content']//input[4]")
					public static WebElement  ISOCurrencyCodeStanadrdfields_CancelBtn;
				
				@FindBy(xpath="//div[@id='ISOCurrencyCode_search_container']//input[2]")
				public static WebElement  ISOCurrencyCodedeleteColumnBtn;
				
				@FindBy(xpath="//div[@id='currencyMasterWidth']//input[3]")
				public static WebElement  ISOCurrencyCodeOkBtn;
				
				@FindBy(xpath="//section[@id='page_Content']//input[4]")
				public static WebElement  ISOCurrencyCodeCancelBtn;
		

				@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/fieldset[1]/div[1]/div[2]/div[2]/input[1]")
				public static WebElement coinsNameTxt;
				
				@FindBy(xpath="//span[@id='btnSave']")
				public static WebElement saveIcon;
				
				@FindBy(xpath="//div[@id='myNavbar']/ul/li[4]/div")
				public static WebElement currencyMasterCancelBtn;
				

				@FindBy(xpath="//span[contains(text(),'Exchange Rate Definition')]")
				public static WebElement exchangeRateDefinitionLabel;
				
				@FindBy(xpath="//span[@id='DeleteData']")
				public static WebElement exchnageRateDeleteOption;
				
				@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Exchange Rate History')]")
				public static WebElement exchangeRateHistoryLabel;
				
				@FindBy(xpath="//input[@id='id_option']")
				public static WebElement baseCurrencyInExchangeRateHistory;
				
				@FindBy(xpath="//*[@id='DateOption']")
				public static WebElement dateOptionDropdown;
				
				@FindBy(xpath="//*[@id='FromDate']")
				public static WebElement fromDateTxt;
				
				@FindBy(xpath="//*[@id='ToDate']")
				public static WebElement toDateTxt ;
				
				@FindBy(xpath="//i[@class='icon-font7 icon-refresh']")
				public static WebElement loadIcon;
				
				@FindBy(xpath="//i[@class='icon-font7 icon-clear']")
				public static WebElement exchangeRateHistoryclearIcon;
				

				@FindBy(xpath="//span[@id='exchange_currency']")
				public static WebElement exchangeRateIcon;
				
				@FindBy(xpath="//*[@id='id_option_table_body']/tr/td[2]")
			    public static List<WebElement> baseCurrencyListCount;
				
				
				@FindBy(xpath="//*[@id='ExchangeTable_CurrencyName_table_body']/tr/td[2]")
			    public static List<WebElement> currencyNameListCount;
				
				@FindBy(xpath="//*[@id='ExchangeTable_DefinedAs_table_body']/tr/td[2]")
			    public static List<WebElement> definedAsListCount;
				
				@FindBy(xpath="//input[@id='id_option']")
				public static WebElement baseCurrencyTxt;
				
				@FindBy(xpath="//input[@id='EffectiveDate']")
				public static WebElement withEffectiveDateTxt;
				
				@FindBy(xpath="//td[@id='EffectiveDate_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
				public static WebElement withEffectiveDateCalendarBtn;
				
				@FindBy(xpath="//select[@id='EffectiveDate_year']")
				public static WebElement withEffectiveDateYearDropDown;
				
				@FindBy(xpath="//select[@id='EffectiveDate_month']")
				public static WebElement withEffectiveDateMonthDropDown;
						
				@FindBy(xpath="//*[@id='EffectiveDate_input_image']/span")
				public static WebElement dOne;
				
				@FindBy(xpath="//*[@id='EffectiveDate_day_today']/td/span[1]")
				public static WebElement dTwo;
				
				@FindBy(xpath="//input[@id='ExchangeTable_DefinedAs']")
				public static WebElement gridDefineAsTxt;
				
				@FindBy(xpath="//input[@id='ExchangeTable_Rate']")
				public static WebElement gridRateTxt;
				
				@FindBy(xpath="//input[@id='ExchangeTable_CurrencyName']")
				public static WebElement gridcurrencyName1Txt;
				
				@FindBy(xpath="//td[@id='ExchangeTable_CurrencyName_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
				public static WebElement  currencyNameSettingsBtn;
				
				
				@FindBy(xpath="//i[@class='icon-font7 icon-save']")
				public static WebElement exchangeRateDefinitionSaveIcon;
				                    
				@FindBy(xpath="//span[@id='btnCurrencyMasterCancel']//i[@class='icon-font7 icon-close']")
				public static WebElement exchangeRateDefinitionPopCloseIcon;
				
				@FindBy(xpath="//span[@id='closeExchangeRate']")
				public static WebElement exchangeRateDefinitionPageCloseIcon;
				
				
				
				@FindBy(xpath="//i[@class='icon-font6 icon-close']")
				public static WebElement exchangeRateHistoryCloseIcon;
				
				@FindBy(xpath="//tbody[@id='HistoryTableBody']/tr[2]/td[3]")
				public static WebElement valueUSD;
				
				@FindBy(xpath="//tbody[@id='HistoryTableBody']/tr[2]/td[4]")
				public static WebElement valueAED;
				
				@FindBy(xpath="//td[@id='ExchangeTable_col_1-2']")
				public static WebElement selCurrencyOne;
				
				@FindBy(xpath="//td[@id='ExchangeTable_col_2-2']")
				public static WebElement selCurrecnyTwo;
				
				@FindBy(xpath="//td[@id='ExchangeTable_col_1-3']")
				public static WebElement defCurrecnyOne;
				
				@FindBy(xpath="//td[@id='ExchangeTable_col_2-3']")
				public static WebElement defCurrecnyTwo;
				
				@FindBy(xpath="//*[@id='80']/span")
				public static WebElement  homeMasterItem_buyerPriceBookMenu;
				
				@FindBy(xpath="//*[@id='76']/span")
				public static WebElement  homeMasterItem_sellerPriceBookMenu;
				
				
				@FindBy(xpath="//*[@id='ctrlOptionProPriceBookH']")
				public static WebElement buyerPriceBook_PriceBook;
				
				
				@FindBy(xpath="//input[@id='iNoOfDecimals']")
				public static WebElement noOfDecimalsTxt;
				
				@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
				public static List<WebElement> masterItemUnitsList;
				
				@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div[1]/label/input")
				public static List<WebElement> masterItemUnitsChkboxList;
				
				
				@FindBy(xpath="//tbody[@id='LandingGridBody']/tr[1]/td[12]")
				public static WebElement itemNewCreationName;
				
				@FindBy(xpath="//tbody[@id='LandingGridBody']/tr[1]/td[10]")
				public static WebElement unitNewCreationName;
	
				
				//Department Menu	
				 @FindBy (xpath="//a[@id='1106']//span[contains(text(),'Department')]")
				 public static WebElement departmentMenu;
				 
				 
				//Warehouse Menu	
				 @FindBy (xpath="//a[@id='1107']")
				 public static WebElement warehouseMenu;
				
				 @FindBy (xpath="//a[@id='1115']//span[contains(text(),'Bins')]")
				 public static WebElement binsMenu;
				 
		
				 
				 
					//First Row

					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-1']")
					public static WebElement itemFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-3']")
					public static WebElement wareHouseFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-4']")
					public static WebElement satrtingDateFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-5']")
					public static WebElement endingDateFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-6']")
					public static WebElement vendorFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-7']")
					public static WebElement currencyFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-8']")
					public static WebElement minQtyFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-9']")
					public static WebElement maxQtyFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-10']")
					public static WebElement unitFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-11']")
					public static WebElement rateFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-12']")
					public static WebElement PoFirstCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_1-13']")
					public static WebElement PtFirstCellSelect; 	
							
					
					//Second Row
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-1']")
					public static WebElement itemSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-3']")
					public static WebElement wareHouseSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-4']")
					public static WebElement satrtingDateSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-5']")
					public static WebElement endingDateSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-6']")
					public static WebElement vendorSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-7']")
					public static WebElement currencySecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-8']")
					public static WebElement minQtySecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-9']")
					public static WebElement maxQtySecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-10']")
					public static WebElement unitSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-11']")
					public static WebElement rateSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-12']")
					public static WebElement PoSecondCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_2-13']")
					public static WebElement PtSecondCellSelect; 	
							

					//Third Row
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-1']")
					public static WebElement itemThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-3']")
					public static WebElement wareHouseThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-4']")
					public static WebElement satrtingDateThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-5']")
					public static WebElement endingDateThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-6']")
					public static WebElement vendorThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-7']")
					public static WebElement currencyThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-8']")
					public static WebElement minQtyThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-9']")
					public static WebElement maxQtyThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-10']")
					public static WebElement unitThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-11']")
					public static WebElement rateThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-12']")
					public static WebElement PoThirdCellSelect; 	
							
					@FindBy(xpath="//td[@id='PriceBookWebGrid_col_3-13']")
					public static WebElement PtThirdCellSelect; 	
							
					
					//To get Value From Cell
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_2']")
					public static WebElement itemValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_4']")
					public static WebElement wareHouseValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_StartingDate']")
					public static WebElement startingDateValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_EndingDate']")
					public static WebElement endingDateValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_1']")
					public static WebElement vendorValue; 	
							
					@FindBy(xpath="//input[@id='Currency_option']")
					public static WebElement currencyOptionValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_minqty']")
					public static WebElement minQtyValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_maxqty']")
					public static WebElement maxQtyValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_option_11']")
					public static WebElement unitValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_val0']")
					public static WebElement rateValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_val1']")
					public static WebElement PoValue; 	
							
					@FindBy(xpath="//input[@id='PriceBookWebGrid_val2']")
					public static WebElement PtValue; 	
					
					@FindBy(xpath="//*[@id='chkDateRange']")
					public static WebElement buyerPriceBook_CustamizeDateRangeCheckBox;
					
					@FindBy(xpath="//*[@id='chkCustomer']")
					public static WebElement buyerPriceBook_CustomizeVendorCheckBox;
					
					@FindBy(xpath="//*[@id='chkDepartment']")
					public static WebElement buyerPriceBook_WarehouseCheckBox;

					@FindBy(xpath="//*[@id='chkQtyRange']")
					public static WebElement buyerPriceBook_QualityRangeCheckBox;
					
					@FindBy(xpath="//*[@id='chkCurrency']")
					public static WebElement buyerPriceBook_CurrencyCheckBox;
					
					@FindBy(xpath="//*[@id='chkUnit']")
					public static WebElement buyerPriceBook_UnitCheckBox;
					
					@FindBy(xpath="//*[@id='txtAbbreviation']")
					public static WebElement buyerPriceBook_AbbreviationBtn;
					
					@FindBy(xpath="//*[@id='PriceBookContainer']/div[2]/nav/div/div[1]/a/div/span[2]")
					public static WebElement buyerPriceBookLabel;
					
					@FindBy(xpath="//*[@id='btnClear']")
					public static WebElement buyerPriceBookClearBtn;
					
					@FindBy(xpath="//*[@id='btnPaste']")
					public static WebElement buyerPriceBookPasteBtn;
					
					@FindBy(xpath="//*[@id='btnCopy']")
					public static WebElement buyerPriceBookCopyBtn;
					
					@FindBy(xpath="//*[@id='btnSelectAll']")
					public static WebElement buyerPriceBookSelectAllBtn;
					
					@FindBy(xpath="//*[@id='btnClose']")
					public static WebElement buyerPriceBookCloseBtn;
					
					@FindBy(xpath="//*[@id='btnSave']")
					public static WebElement buyerPriceBookSaveBtn;
					
					@FindBy(xpath="//*[@id='ctrlOptionProPriceBookH_table_body']/tr/td[2]")
					public static List<WebElement> pricebookComboBoxList;
					
					@FindBy(xpath="//*[@id='PriceBookWebGrid_option_2_table_body']/tr/td[2]")
					public static List<WebElement> itemComboBoxList;
					
					@FindBy(xpath="//*[@id='PriceBookWebGrid_option_4_table_body']/tr/td[2]")
					public static List<WebElement> warehouseComboBoxList;
					
					@FindBy(xpath="//*[@id='PriceBookWebGrid_option_1_table_body']/tr/td[2]")
					public static List<WebElement> vendorComboBoxList;
					
					@FindBy(xpath="//*[@id='Currency_option_table_body']/tr/td[2]")
					public static List<WebElement> currencyComboBoxList;
					
					@FindBy(xpath="//*[@id='PriceBookWebGrid_option_11_table_body']/tr/td[2]")
					public static List<WebElement> unitComboBoxList;
					
					@FindBy(xpath="//input[@id='btnLoad']")
					public static WebElement priceBookFilterAndLoadBtn;
					
					@FindBy (xpath="//a[@id='770']")
					public static WebElement trialVoucher;
					
					
					
					 @FindBy (xpath="//table[@id='editScreen_footerTable']/tbody/tr[2]/td/span[1]")
					 public static WebElement editScreenFooterRow2Edit;
					 
					 @FindBy (xpath="//table[@id='editScreen_footerTable']/tbody/tr[2]/td/span[2]")
					 public static WebElement editScreenFooterRow2Delete;
					 
					 @FindBy (xpath="//table[@id='editScreen_footerTable']/tbody/tr[2]/td[3]")
					 public static WebElement editScreenFooterRow2Caption;
					 
					 @FindBy (xpath="//table[@id='editScreen_footerTable']/tbody/tr[2]/td[8]")
					 public static WebElement editScreenFooterRow2Formula;
					 
					 @FindBy (xpath="//table[@id='editScreen_footerTable']/tbody/tr")
					 public static List <WebElement> editScreenFooterRowsCount;
					 
					 
					 @FindBy (xpath="//table[@id='editLayout_headerTable']/tbody/tr")
					 public static List <WebElement> editLayoutHeaderRowsCount;
					 
					 
					 @FindBy (xpath="//table[@id='editScreen_bodyTable']/tbody/tr[3]/td/span[1]")
					 public static WebElement editScreenBodyRow3Edit;
					 
					 @FindBy (xpath="//table[@id='editScreen_bodyTable']/tbody/tr[3]/td/span[2]")
					 public static WebElement editScreenBodyRow3Delete;
					 
					 @FindBy (xpath="//table[@id='editScreen_bodyTable']/tbody/tr[3]/td[3]")
					 public static WebElement editScreenBodyRow3Caption;
					 
					 @FindBy (xpath="//table[@id='editScreen_bodyTable']/tbody/tr[3]/td[8]")
					 public static WebElement editScreenBodyRow3Formula;
					 
					 
					 @FindBy (xpath="//table[@id='editScreen_bodyTable']/tbody/tr")
					 public static List <WebElement> editScreenBodyRowsCount;
					 
					 @FindBy(xpath="//input[@id='views_existingViews']")
					 public static WebElement  ViewExistingViewTxt;
					 
					 @FindBy(xpath="//ul[@id='id_documentcustomization_views_list_users']/li[1]/div/label/input")
					 public static WebElement  viewSuChkbox;
					
					 @FindBy(xpath="//ul[@id='id_documentcustomization_views_list_users']/li[2]/div/label/input")
					 public static WebElement  viewsUserAllOptionsSTChkbox;
					 
					 @FindBy(xpath="//*[@id='views_Controlbuttons']/span[7]")
					 public static WebElement  viewsDeleteViewIcon;
						
					 @FindBy(xpath="//span[@id='spnSaveView']")
					 public static WebElement  viewSaveView;
					 
					 @FindBy(xpath="//input[@id='views_chkauthorizeOnly']")
					 public static WebElement  viewsAuthorizeOnlyChkbox;
					 
					 
					 
					 @FindBy(xpath="//input[@id='triggers_existTriggers']")
						public static WebElement  editLayoutTriggerName;
						
						@FindBy(xpath="//td[@id='triggers_existTriggers_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
						public static WebElement  triggersExistTriggersSettingBtn;
						
						@FindBy(xpath="//div[@id='trigger_Controlbuttons']/span[1]")
						public static WebElement  editLayoutTriggerDeleteBtn;
						
						@FindBy(xpath="//div[@id='trigger_Controlbuttons']/span[2]")
						public static WebElement  editLayoutTriggersSaveBtn;
						
						@FindBy(xpath="//*[@id='17_1_AdvanceFilter']/table/tbody/tr/td[1]/select")
						public static WebElement  triggersConjuctionDrpdwn;
						
						@FindBy(xpath="//*[@id='17_1_AdvanceFilter']/table/tbody/tr/td[2]/input")
						public static WebElement  triggersSelectFieldTxt;
						
						@FindBy(xpath="//*[@id='17_1_AdvanceFilter']/table/tbody/tr/td[3]/select")
						public static WebElement  triggersSelectOperdrpdwn;
						
						@FindBy(xpath="//*[@id='17_1_AdvanceFilter']/table/tbody/tr/td[4]/select")
						public static WebElement  triggersCompareWithdrpdwn;
						
						@FindBy(xpath="//tbody//input[@placeholder='Value']")
						public static WebElement  triggersValueTxt;
						
						
						@FindBy(xpath="//input[@id='advancefilter_master_17_1']")
						public static WebElement  triggersValueToEnterTxt;
						
						
						
						
						@FindBy(xpath="//tbody//span[@class='icon-close icon-font6']")
						public static WebElement  triggersTrigCreteriaCloseBtn;
						
						@FindBy(xpath="//tbody//span[@class='icon-pluse icon-font6']")
						public static WebElement  triggersTrigCreteriaAddBtn;
						
						@FindBy(xpath="//tr[2]//td[6]//span[1]")
						public static WebElement  triggersTrigCretriaRow2CloseBtn;

					    @FindBy(xpath="//input[@id='triggers_chkraiseNewDoc']")
						public static WebElement editLayoutTriggerRaiseDoc;  	
					 
					    @FindBy(xpath="//input[@id='triggers_chkraiseNewDoc']")
						public static WebElement  triggersRiseANewDocChkbox;
						
						@FindBy(xpath="//*[@id='triggers_FieldsDiv']/div[2]/div[2]/div[1]/label/input")
						public static WebElement  triggersSuspendedChkboxs;
						
						@FindBy(xpath="//*[@id='triggers_FieldsDiv']/div[2]/div[2]/div[1]/label")
						public static WebElement  triggersSuspended;
						
						@FindBy(xpath="//input[@id='rdbOnSave']")
						public static WebElement  triggersOnSaveRadioBtn;
						
						@FindBy(xpath="//input[@id='rdbOnAuthorization']")
						public static WebElement  triggersOnAuthorizatinRadioBtn;
						
						@FindBy(xpath="//input[@id='triggers_chksendAlert']")
						public static WebElement  triggersSendAlertChkbox;
						
						@FindBy(xpath="//select[@id='triggers_sendAlert']")
						public static WebElement  triggersSendAlertDrpdwn;
						
						@FindBy(xpath="//*[@id='triggers_FieldsDiv']/div[2]/div[3]/div[1]/button")
						public static WebElement  triggersSendAlertExpansionBtn;
						
						@FindBy(xpath="//input[@id='id_trigger_alertdateformula']")
						public static WebElement  triggersAlertDataFormula;
						
						@FindBy(xpath="//input[@id='triggers_chksendEmail']")
						public static WebElement  triggersSendEmailChkbox;
						
						@FindBy(xpath="//input[@id='Triggers_LayoutID']")
						public static WebElement  triggersSendEmailDrpdwn;
						
						@FindBy(xpath="//div[@class='col-xs-12 col-sm-6']//div[2]//button[1]")
						public static WebElement  triggersSendEmailExpansionBtn;
						
						@FindBy(xpath="//input[@id='triggers_chksendSMS']")
						public static WebElement  triggersSendSMSChkbox;
						
						@FindBy(xpath="//select[@id='triggers_sendSMS']")
						public static WebElement  triggersSendSMSDrpdwn;
						
						@FindBy(xpath="//div[@class='col-xs-12 col-sm-6']//div[@class='col-xs-12']//div[3]//button[1]")
						public static WebElement  triggersSendSMSExpansionBtn;
						
						@FindBy(xpath="//input[@id='triggers_smsconfirm']")
						public static WebElement  triggersConformBeforeSendingChkbox;
						
						@FindBy(xpath="//input[@id='triggers_smsonedit']")
						public static WebElement  triggersSendSMSonEdit;
						
						@FindBy(xpath="//select[@id='triggers_PhoneNo']")
						public static WebElement  triggersPhoneNoDrpdwn;
						
						@FindBy(xpath="//input[@id='triggers_chksendTypeCustomeVendor']")
						public static WebElement  triggersCustmerORVendorChkbox;
						
						@FindBy(xpath="//input[@id='triggers_chksendTypeLogin']")
						public static WebElement  triggersLoginChkbox;
						
						@FindBy(xpath="//input[@id='triggers_chksendTypeExtraField']")
						public static WebElement  triggersExtraFieldChkbox;
						
						@FindBy(xpath="//input[@id='triggers_Role']")
						public static WebElement  triggersRoleChkbox;
						
						@FindBy(xpath="//input[@id='triggers_Auth']")
						public static WebElement  triggersAuthorisationChkbox;
						
						@FindBy(xpath="//select[@id='triggers_Auth_DD']")
						public static WebElement  triggersDefaultDrpdwn;
						
						
						@FindBy(xpath="//*[@id='docNum_Table_head']/tr/th/div")
					 	public static List<WebElement>  docNumberingGridHeader;	
					 	
					 	@FindBy(xpath="//*[@id='docNum_Table_body']/tr/td")
					 	public static List<WebElement>  docNumberingGridBody;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_1-0']")
					 	public static WebElement  docNUmneringFirstRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_1-1']")
					 	public static WebElement  typeRow1;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_1-2']")
					 	public static WebElement  fieldValueRow1;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_1-3']")
					 	public static WebElement  startingCharacterRow1;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_1-4']")
					 	public static WebElement  noofCharactersRow1;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_2-0']")
					 	public static WebElement  docNUmneringSecondRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_2-1']")
					 	public static WebElement  typeRow2;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_2-2']")
					 	public static WebElement  fieldValueRow2;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_2-3']")
					 	public static WebElement  startingCharacterRow2;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_2-4']")
					 	public static WebElement  noofCharactersRow2;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_3-0']")
					 	public static WebElement  docNUmneringThkirdRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_3-1']")
					 	public static WebElement  typeRow3;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_3-2']")
					 	public static WebElement  fieldValueRow3;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_3-3']")
					 	public static WebElement  startingCharacterRow3;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_3-4']")
					 	public static WebElement  noofCharactersRow3;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_4-0']")
					 	public static WebElement  docNUmneringFourthRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_4-1']")
					 	public static WebElement  typeRow4;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_4-2']")
					 	public static WebElement  fieldValueRow4;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_4-3']")
					 	public static WebElement  startingCharacterRow4;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_4-4']")
					 	public static WebElement  noofCharactersRow4;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_5-0']")
					 	public static WebElement  docNUmneringFifthRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_5-1']")
					 	public static WebElement  typeRow5;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_5-2']")
					 	public static WebElement  fieldValueRow5;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_5-3']")
					 	public static WebElement  startingCharacterRow5;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_5-4']")
					 	public static WebElement  noofCharactersRow5;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_6-0']")
					 	public static WebElement  docNUmneringSixthRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_6-1']")
					 	public static WebElement  typeRow6;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_6-2']")
					 	public static WebElement  fieldValueRow6;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_6-3']")
					 	public static WebElement  startingCharacterRow6;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_6-4']")
					 	public static WebElement  noofCharactersRow6;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_7-0']")
					 	public static WebElement  docNUmneringSeventhRowIndex;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_7-1']")
					 	public static WebElement  typeRow7;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_7-2']")
					 	public static WebElement  fieldValueRow7;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_7-3']")
					 	public static WebElement  startingCharacterRow7;	
					 	
					 	@FindBy(xpath="//td[@id='docNum_Table_col_7-4']")
					 	public static WebElement  noofCharactersRow7;	
					 	
					 	
					 	
					 	@FindBy(xpath="//select[@id='docNum_TypeDropDown']")
					 	public static WebElement  typeDropDown;	
					 	
					 	@FindBy(xpath="//input[@id='docNum_FieldORValueDropDown']")
					 	public static WebElement  fieldValueTxt;	
					 	
					 	@FindBy(xpath="//select[@id='docNum_FieldORValueDropDown']")
					 	public static WebElement  fieldValueDropDown;	
					 	
					 	@FindBy(xpath="//input[@id='docNum_startCharacterTxtbox']")
					 	public static WebElement  startingCharacterTxt;	
					 	
					 	@FindBy(xpath="//input[@id='docNum_noofCharacterTxtbox']")
					 	public static WebElement  noOfCharacterTxt;
					 	
					 	@FindBy(xpath="//label[@class='Flabel col-xs-12 col-sm-5 col-md-3']")
					 	public static WebElement  docNumberAppearAsLabel;
					 	
					 	@FindBy(xpath="//label[@id='docNum_documentNumberAs']")
					 	public static WebElement  docNumberAppearAsValue;
					 
					 	@FindBy (xpath="//*[@id='docNum_Table_col_1-0']")
						 public static WebElement docNumberingRow1Col1;
						 
						 @FindBy (xpath="//*[@id='docNum_Table_col_2-0']")
						 public static WebElement docNumberingRow2Col1;
						
						 @FindBy (xpath="//div[contains(text(),'Delete Row')]")
						 public static WebElement docNumberingRow1DeleteBtn;
					 	
					 	
						 @FindBy(xpath = "//input[@class='btn btn-link']")
							public static WebElement rulesTabAddRuleBtn;

							@FindBy(xpath = "//input[@id='txtMasterRuleName_DocCustRules']")
							public static WebElement rulesTabRuleNameTxt;

							@FindBy(xpath = "//td[@id='txtMasterRuleName_DocCustRules_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
							public static WebElement rulesTabRuleNameSettingBtn;

							@FindBy(xpath = "//*[@id='Conditions-Context_Menu_DocCustRules']/li[2]/a")
							public static WebElement rulesTabElseTab;

							
							@FindBy(xpath = "//*[@id='Conditions-Context_Menu_DocCustRules']/li[1]/a")
							public static WebElement rulesTabIFTab;
							
							@FindBy(xpath = "//input[@id='txtField_RC_1_1_DocCustRules']")
							public static WebElement rulesTabIFSelectTabTxt;
							
							@FindBy(xpath = "//select[@id='ddlMasterFields_RULES_DocCustRules']")
							public static WebElement rulesTabIFSelectTabDrpdwn;
							
							
							@FindBy(xpath = "//select[@id='ddlExtraFields_1_1_DocCustRules']")
							public static WebElement rulesTabExtraFieldDrpdwn;
							
							
							@FindBy(xpath = "//select[@id='ddlOperators_RC_1_1_DocCustRules']")
							public static WebElement rulesTabOperatorsDrpdwn;

							@FindBy(xpath = "//select[@id='ddlCompareWith_RC_1_1_DocCustRules']")
							public static WebElement rulesTabCompareWithDrpdwn;

							@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_DocCustRules']")
							public static WebElement rulesTabValueTxt;

							
							@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_DocCustRules']")
							public static WebElement rulesTabConditionTxttoEnter;
							
							@FindBy(xpath = "//input[@id='optControl_RulesCondition_DocCustRules']	")
							public static WebElement rulesTabConditionTxt;
							
							
							
							
							                  
							@FindBy(xpath = "//input[@id='optControl_RulesCondition_DocCustRules']")
							public static WebElement rulesTabConditioDrpdwn;

							
							
							
							@FindBy(xpath = "//select[@id='ddlConjunction_RC_1_1_DocCustRules']")
							public static WebElement rulesTabConjunctionDrpdwn;

							@FindBy(xpath = "//input[@id='chkNoRuleCondition_DocCustRules']")
							public static WebElement rulesTabNoConditionChkbbox;

							@FindBy(xpath = "//i[@id='iconRuleSettings_DocCustRules']")
							public static WebElement rulesTabSettingsAddIcon;

							@FindBy(xpath = "//span[@class='icon-close icon-font7']")
							public static WebElement rulesTabIfConditionCloseBtn;

							@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[1]/a/span")
							public static WebElement rulesTab_IFFormattingTab;

							@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[2]/a/span")
							public static WebElement rulesTab_IFMesssageTab;

							@FindBy(xpath = "//*[@id='Rule_IF_DocCustRules']/div[2]/div[1]/ul/li[3]/a/span")
							public static WebElement rulesTab_IFAlertsTab;

							@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[1]/a/span")
							public static WebElement rulesTab_ElseFormattingTab;

							@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[2]/a/span")
							public static WebElement rulesTab_ElseMessageTab;
							                 
							@FindBy(xpath = "//*[@id='Rule_Else_DocCustRules']/div/div[1]/ul/li[3]/a/span")
							public static WebElement rulesTab_ElseAlertsTab;
							
							@FindBy(xpath = "//button[@id='btnAddRule']")
							public static WebElement rulesTab_SaveRuleBtn;

							@FindBy(xpath = "//button[contains(text(),'Delete Rule')]")
							public static WebElement rulesTab_DeleteRuleBtn;
					 
						 @FindBy (xpath="//*[@id='DeleteRule_Modal_DocCustRules']/div/div/div[3]/button[1]")
						 public static WebElement deleteRuleYesBtn;
						 
						 
						 @FindBy(xpath="//*[@id='configTransMenu']/ul/li[2]/span[2]")
						 public static WebElement  docCustCloseBtn;
						 
						 @FindBy(xpath="//*[@id='txtSearchMenu_MainLayout']")
						 public static WebElement serachMenuTextHomePage;
							
						 @FindBy(xpath="//li/span")
						 public static WebElement searchMenuTextClick;
	 

						 @FindBy(xpath="//*[@id='68']/span")
						 public static WebElement  transactionAuthorizationBtn;
						 
						  @FindBy(xpath="//*[@id='id_menu_tree_Purchases Returns']/a/span")
						  public static WebElement purchasesReturns; 
						
						  @FindBy(xpath="//*[@id='id_menu_tree_Purchases Returns (1)']/a/span")
						  public static WebElement purchasesReturns1; 
						  
						  @FindBy(xpath="//*[@id='txtDoc']")
						  public static WebElement documentNameDropdown; 
						  
						  @FindBy(xpath="//*[@id='spnAddLevel']/i")
						  public static WebElement addLevelBtn; 
						  
						  
						  @FindBy(xpath="//*[@id='txtDescription']")
						  public static WebElement descriptionTxt; 
							
						  @FindBy(xpath="//*[@id='chkConditionNotRequired']")
						  public static WebElement conditionNotRequiredChkBox; 
						  
						  @FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[2]/a/span")
						  public static WebElement userSelectionTab;
						
						  @FindBy(xpath="//*[@id='ddlUserSelection']")
						  public static WebElement userselectionDropdown;
						
						  @FindBy(xpath="//*[@id='ddlCriteria']")
						  public static WebElement criteriaDropdown;
						  
						  @FindBy(xpath="//*[@id='id_tblUserSelection_User']")
						  public static WebElement userDropdown;
							
						  @FindBy(xpath="//td[@id='id_tblUserSelection_col_1-1']")
						  public static WebElement userrow1;
							
						  @FindBy(xpath="//td[@id='id_tblUserSelection_col_2-1']")
						  public static WebElement userrow2;
						  
						  @FindBy(xpath="//*[@id='id_report_popup_ok']")
						  public static WebElement definitionOkBtn;					
									
						  @FindBy(xpath="//span[@id='id_report_popup_cancel']")
						  public static WebElement definitionCloseBtn;	
						  
						  
						  @FindBy(xpath="//*[@id='ulAuthBtns']/li[5]/span/i")
						  public static WebElement tranAuthCancelBtn; 
								
						  @FindBy(xpath="//*[@id='btnSaveAuthorization']")
						  public static WebElement tranAuthSaveBtn; 
						  
						  @FindBy(xpath="//*[@id='spndeleteProfile']")
						  public static WebElement tranAuthDeleteBtn; 
						
						  
						  @FindBy(xpath="//*[@id='ctrlAuthorizationH']")
						  public static WebElement transAuthNameTxt; 
						  
						  @FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-edit icon-font7']")
						  public static WebElement Level1editBtn;
						  
						  
						  
						  @FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[1]/select")
						  public static WebElement Row1ConjunctionDropdown; 
							
						  @FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[2]/input")
						  public static WebElement Row1SelectFieldTxt; 
						
						  @FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[3]/select")
						  public static WebElement Row1SelectOperatorDropdown; 
							
						  @FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[4]/select")
						  public static WebElement Row1CompareWithDropdown; 
							
						  @FindBy(xpath="//*[@id='68_0_AdvanceFilter_']/table/tbody/tr[1]/td[5]/input")
						  public static WebElement Row1ValueTxt; 
						
						  @FindBy(xpath="//input[@id='advancefilter_master_68_0_']")
						  public static WebElement Row1VendorValueTxt; 
						
						@FindBy(xpath="//*[@id='advancefilter_master_68_0__table_body']/tr/td[2]")
						public static List<WebElement> Row1ValueList; 
						
						@FindBy(xpath="//input[@id='advancefilter_master_68_0_']")
						public static WebElement InputValueTxt; 
					  
						@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='4']")
				    	public static WebElement selectFieldVendorAC;
				    	
				    	@FindBy(xpath="//*[@id='filterTree_68_0_AdvanceFilter_']/ul/li[1]/ul/li[1]/a")
				    	public static WebElement selectFieldVendorACName;
				    	
				    	
				    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='23']")
				    	public static WebElement selectFieldItem;
				    	
				    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='5021']")
				    	public static WebElement selectFieldItemName;
				    	
				    	@FindBy(xpath="//div[@id='filterTree_68_0_AdvanceFilter_']//a[@id='26']")
				    	public static WebElement selectFieldQuantity;
						  
						 
				    	
				    	
	@FindBy(xpath="//*[@id='67_0_AdvanceFilter_']/table/tbody/tr/td[1]/select")
	public static WebElement conjunctionDropdown;
    	
	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	public static WebElement selectFieldTxt; 

    //Selection Field  Inner Fields
	@FindBy(xpath="//*[@id='filterTree_67_0_AdvanceFilter_']/ul/a[1]")
	public static WebElement sName;
	
	
	@FindBy(xpath="//*[@id='67_0_AdvanceFilter_']/table/tbody/tr/td[3]/select")
	public static WebElement selectOperatorDropdown; 
		
	@FindBy(xpath="//*[@id='67_0_AdvanceFilter_']/table/tbody/tr/td[4]/select")
	public static WebElement compareWithDropdown; 
		
	@FindBy(xpath="//*[@id='67_0_AdvanceFilter_']/table/tbody/tr/td[5]/input")
	public static WebElement valueTxt;
	
	
	
	@FindBy(xpath="//*[@id='67']/span")
	public static WebElement  masterAuthorizationBtn;
	
	@FindBy(xpath="//input[@id='txtDoc']")
	public static WebElement  masterDropdown;
    	
	@FindBy(xpath="//li[contains(text(),'Warehouse')]")
	public static WebElement  masterAuthWarehouse;
	
	@FindBy(xpath="//ul[@id='MasterMenu']/li[4]")
	public static WebElement  masterAuthWarehouse1;
	
	
	
	
   	@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
	public static WebElement designWorkflowbtn; 
	
	@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Design Workflow')]")
	public static WebElement designWorkflowLabel; 
	
	@FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
	public static WebElement dwSaveBtn; 
	
	@FindBy(xpath="//i[@class='icon icon-clear icon-font6']")
	public static WebElement clearBtn; 
	
	@FindBy(xpath="//i[@class='icon-delete icon-font6']")
	public static WebElement dwDeleteBtn; 
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	public static WebElement dwCloseBtn;
	
	@FindBy(xpath="//input[@id='optWorkflow']")
	public static WebElement workflowNameTxt; 
	
	
	
   	@FindBy(xpath="//*[@id='optWorkflow_input_settings']/span")
	public static WebElement workFlowNameSettingsBtn; 
	
	@FindBy(xpath="//span[contains(text(),'Request For Quote')]")
	public static WebElement requestForQuoteDragAndDrop;
	
	@FindBy(xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Purchases Quotations')]")
	public static WebElement purchasesQuotationsDragAndDrop; 
	
	@FindBy(xpath="//div[@class='flowchart-operator-title ui-draggable-handle']")  //As it Is First One Selected Drag On FlowChart Is Same Id Property For Every Element
	public static WebElement FirstDraggedElement; 
	
	@FindBy(xpath="//div[contains(text(),'Purchases Quotations')]")
	public static WebElement draggedPurchasesQuotations; 
	
	@FindBy(xpath="/html[1]/body[1]/ul[1]/li[1]")
	public static WebElement draggedlinkBtn; 
	
	@FindBy(xpath="/html[1]/body[1]/ul[1]/li[2]")
	public static WebElement draggeddeleteBtn; 
	
	
	@FindBy(xpath="//*[@id='line0']")
	public static WebElement link0TO1; 
	
	@FindBy(xpath="//*[@id='line1']")
	public static WebElement link1TO2; 
	
	@FindBy(xpath="//*[@id='line2']")
	public static WebElement link2TO3; 
	
	@FindBy(xpath="//*[@id='line3']")
	public static WebElement link3TO4; 
	
	@FindBy(xpath="//*[@id='line4']")
	public static WebElement link4TO5; 
	
	@FindBy(xpath="//*[@id='line5']")
	public static WebElement link5TO6; 
	
	@FindBy(xpath="//*[@id='line6']")
	public static WebElement link6TO7; 
	
	@FindBy(xpath="//*[@id='line7']")
	public static WebElement link7TO8; 
	
	@FindBy(xpath="//*[@id='line8']")
	public static WebElement link8TO9; 
	
	
	
	
	@FindBy(xpath="//*[@id='idNode_0']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode0Left; 
	
	@FindBy(xpath="//*[@id='idNode_1']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode1Left; 
	
	@FindBy(xpath="//*[@id='idNode_2']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode2Left;
	
	@FindBy(xpath="//*[@id='idNode_3']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode3Left; 
	
	@FindBy(xpath="//*[@id='idNode_4']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode4Left; 
	
	@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode5Left;
	
	@FindBy(xpath="//*[@id='idNode_6']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode6Left; 
	
	@FindBy(xpath="//*[@id='idNode_7']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode7Left; 
	
	@FindBy(xpath="//*[@id='idNode_8']/div[2]/div[1]/div/div/div[2]")
	public static WebElement linkNode8Left;
	
	
	
	
	
	@FindBy(xpath="//*[@id='idNode_0']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode0Right; 
	
	@FindBy(xpath="//*[@id='idNode_1']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode1Right; 
	
	@FindBy(xpath="//*[@id='idNode_2']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode2Right; 
	
	@FindBy(xpath="//*[@id='idNode_3']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode3Right; 
	
	@FindBy(xpath="//*[@id='idNode_4']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode4Right; 
	
	@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode5Right; 
	
	@FindBy(xpath="//*[@id='idNode_6']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode6Right; 
	
	@FindBy(xpath="//*[@id='idNode_7']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode7Right; 
	
	@FindBy(xpath="//*[@id='idNode_8']/div[2]/div[2]/div/div/div[2]")
	public static WebElement linkNode8Right; 
	
	
	
	
	@FindBy(xpath="//div[@id='settingIcon']//span[@class='iconbar']")
	public static WebElement rightSideExpandBtn; 
	
	@FindBy(xpath="//a[contains(text(),'Definition')]")
	public static WebElement DefinitionTab; 
	
	@FindBy(xpath="//select[@id='DDLLinkValue']")
	public static WebElement DefinitionLinkValueDropdown; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[1]//li[1]//input[1]")
	public static WebElement dateChkBox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[2]//li[1]//input[1]")
	public static WebElement customerAccountChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicewareHouseChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement autosalesOrderandInvoicewareHouseChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement narrationChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicenarrationChkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[4]//li[1]//input[1]")
	public static WebElement itemchkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[3]//li[1]//input[1]")
	public static WebElement materialRequiitionAndPquotationsitemchkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement salesOrderandInvoiceitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement purchaseOrderandPvoucheritemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement purchaseVoucherAndPReturnsitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[7]//li[1]//input[1]")
	public static WebElement purchaseVoucherNAndMRNitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement mrnAndPurchaseReturnsitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement salesInvoicenAndDeliveryNotesitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[11]//li[1]//input[1]")
	public static WebElement salesInvoiceAndSalesRetutrnsitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement stockTransferAndSalesInvoiceNitemchkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[5]//li[1]//input[1]")
	public static WebElement unitsChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement salesOrderandInvoiceunitsChkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[6]//li[1]//input[1]")
	public static WebElement quantityChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[7]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicequantityChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[7]//li[1]//input[1]")
	public static WebElement voucherQtyhkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[8]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicevoucherQtyhkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[8]//li[1]//input[1]")
	public static WebElement reserveChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[9]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicereserveChkbox;
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[9]//li[1]//input[1]")
	public static WebElement rateChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicerateChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[10]//li[1]//input[1]")
	public static WebElement grossChkbox; 
	
	@FindBy(xpath="//div[@id='LeftSideChkbox']//ul[11]//li[1]//input[1]")
	public static WebElement salesOrderandInvoicegrossChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[1]//li[1]//input[1]")
	public static WebElement voucherGrossChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[2]//li[1]//input[1]")
	public static WebElement netChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[3]//li[1]//input[1]")
	public static WebElement voucherNetChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[4]//li[1]//input[1]")
	public static WebElement userChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[5]//li[1]//input[1]")
	public static WebElement roleChkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[6]//li[1]//input[1]")
	public static WebElement user1Chkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[7]//li[1]//input[1]")
	public static WebElement user2Chkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[8]//li[1]//input[1]")
	public static WebElement user3Chkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[9]//li[1]//input[1]")
	public static WebElement user4Chkbox; 
	
	@FindBy(xpath="//div[@id='rightsideCheckbox']//ul[10]//li[1]//input[1]")
	public static WebElement user5Chkbox; 
	
	@FindBy(xpath="//div[@class='col-lg-12']//button[@class='Fbutton'][contains(text(),'Ok')]")
	public static WebElement OkBtn; 
	
	@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
	public static WebElement CancelBtn; 
	
	
	
	
	
	  @FindBy (xpath="//*[@id='navigation_menu']/li[1]/ul/li[5]/ul/li")
	  public static List<WebElement> utilitesList;
	  
	  @FindBy(xpath="//a[@id='20']//span[contains(text(),'Utilities')]")
	  public static WebElement  utilities;
	  
	  @FindBy (xpath="//span[contains(text(),'Standard Rate')]")
	  public static WebElement standardRate;
	  
	  @FindBy(xpath="//div[@id='myNavbar']/ul/li/span/i")
	  public static WebElement closeBtnInStandardRate;
		
	  @FindBy(xpath="//tbody[@id='OptProductId_table_body']/tr/td[2]")
	  public static List<WebElement> standardRateItemComboList;
	
	  @FindBy(xpath="//input[@id='OptProductId']")
	  public static WebElement standardRateItemCombo;
	
	  @FindBy(xpath="//input[@id='txtEffectiveDate']")
	  public static WebElement standardRateEffectiveDateTxt;
	
	  @FindBy(xpath="//input[@id='txtrate']")
	  public static WebElement standardRateRateTxt;
	
	  @FindBy(xpath="//span[@id='id_EdtAdd']/i")
	  public static WebElement standardRateAddBtn;
	  
	  @FindBy(xpath="//td[@id='id_StandardRate_col_1-2']")
	  public static WebElement standardRateTableRow1EffectiveDate;
	
	  @FindBy(xpath="//tbody[@id='id_StandardRate_body']/tr/td[4]")
	  public static WebElement standardRateTableRow1Rate;
	
	  @FindBy(xpath="//td[@id='id_StandardRate_col_2-2']")
	  public static WebElement standardRateTableRow2EffectiveDate;
	
	  @FindBy(xpath="//td[@id='id_StandardRate_col_2-3']")
	  public static WebElement standardRateTableRow2Rate;
	
	  @FindBy(xpath="//*[@id='btnEdit_Id_1']")
	  public static WebElement standardRateEditRow1;
	
	  @FindBy(xpath="//*[@id='id_Edt']/i")
	  public static WebElement standardRateEditBtn;
	
	  @FindBy(xpath="//*[@id='btnDelete_Id_1']")
	  public static WebElement standardRateDeleteRow1;
	  
	  
	  
	  
	  
		// Bin Inward Elements

		@FindBy (xpath="//input[@id='id_bins_totalquantity']")
		public static WebElement binTotalQty;
		
		@FindBy (xpath="//div[@class='modal-body']//div[4]")
		public static WebElement binBaseUOM;
		
		@FindBy (xpath="//input[@id='srch_bin']")
		public static WebElement binSearchTxt;
		
		@FindBy (xpath="//i[@class='icon-search']")
		public static WebElement binSearchBtn; 
		              
		@FindBy (xpath="//*[@id='TransactionNewBin']/div/div/div[2]/div[1]/div[7]/button")
		public static WebElement binSearchBtn; 
		
		@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
		public static WebElement enter_ToBeAllocateTxt;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		public static WebElement  binselect1stRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		public static WebElement  binselect1stRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		public static WebElement  binselect1stRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		public static WebElement  binselect1stRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		public static WebElement  binselect1stRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		public static WebElement  binselect1stRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		public static WebElement  binselect1stRow_7thColumn;
		              
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		public static WebElement  binselect1stRow_8thColumn;
		
		
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		public static WebElement  sl_Binselect1stRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		public static WebElement  sl_Binselect1stRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		public static WebElement  sl_Binselect1stRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-4']")
		public static WebElement  sl_Binselect1stRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		public static WebElement  sl_Binselect1stRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		public static WebElement  sl_Binselect1stRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		public static WebElement  sl_Binselect1stRow_7thColumn;
		              
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		public static WebElement  sl_Binselect1stRow_8thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		public static WebElement  sl_Binselect1stRow_9thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
		public static WebElement  binselect2ndRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
		public static WebElement  binselect2ndRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
		public static WebElement  binselect2ndRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
		public static WebElement  binselect2ndRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
		public static WebElement  binselect2ndRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
		public static WebElement  binselect2ndRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
		public static WebElement  binselect2ndRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		public static WebElement  binselect2ndRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
		public static WebElement  binselect3rdRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
		public static WebElement  binselect3rdRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
		public static WebElement  binselect3rdRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
		public static WebElement  binselect3rdRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
		public static WebElement  binselect3rdRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
		public static WebElement  binselect3rdRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
		public static WebElement  binselect3rdRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
		public static WebElement  binselect3rdRow_8thColumn;
		
		@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
		public static WebElement  binEnter8thColumn;
		
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-0']")
		public static WebElement  binselect4thRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-1']")
		public static WebElement  binselect4thRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-3']")
		public static WebElement  binselect4thRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-5']")
		public static WebElement  binselect4thRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-6']")
		public static WebElement  binselect4thRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-7']")
		public static WebElement  binselect4thRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-8']")
		public static WebElement  binselect4thRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_4-12']")
		public static WebElement  binselect4thRow_8thColumn;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-0']")
		public static WebElement  binselect5thRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-1']")
		public static WebElement  binselect5thRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-3']")
		public static WebElement  binselect5thRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-5']")
		public static WebElement  binselect5thRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-6']")
		public static WebElement  binselect5thRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-7']")
		public static WebElement  binselect5thRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-8']")
		public static WebElement  binselect5thRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_5-12']")
		public static WebElement  binselect5thRow_8thColumn;
		
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-0']")
		public static WebElement  binselect6thRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-1']")
		public static WebElement  binselect6thRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-3']")
		public static WebElement  binselect6thRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-5']")
		public static WebElement  binselect6thRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-6']")
		public static WebElement  binselect6thRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-7']")
		public static WebElement  binselect6thRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-8']")
		public static WebElement  binselect6thRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_6-12']")
		public static WebElement  binselect6thRow_8thColumn;
		

		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-0']")
		public static WebElement  binselect7thRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-1']")
		public static WebElement  binselect7thRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-3']")
		public static WebElement  binselect7thRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-5']")
		public static WebElement  binselect7thRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-6']")
		public static WebElement  binselect7thRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-7']")
		public static WebElement  binselect7thRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-8']")
		public static WebElement  binselect7thRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_7-12']")
		public static WebElement  binselect7thRow_8thColumn;
		
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-0']")
		public static WebElement  binselect8thRow_1stColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-1']")
		public static WebElement  binselect8thRow_2ndColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-3']")
		public static WebElement  binselect8thRow_3rdColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-5']")
		public static WebElement  binselect8thRow_4thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-6']")
		public static WebElement  binselect8thRow_5thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-7']")
		public static WebElement  binselect8thRow_6thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-8']")
		public static WebElement  binselect8thRow_7thColumn;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_8-12']")
		public static WebElement  binselect8thRow_8thColumn;
		
		
		
		
		
		
		@FindBy(xpath="//span[@class='icon-sum']")
		public static WebElement  binRowSum;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[2]")
		public static WebElement  binRowSum_2ndColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[4]")
		public static WebElement  binSelect4htRow_3rdColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[6]")
		public static WebElement  binRowSum_4thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[7]")
		public static WebElement  binRowSum_5thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[8]")
		public static WebElement  binRowSum_6thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[9]")
		public static WebElement  binRowSum_7thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[12]")
		public static WebElement  binRowSum_8thColumn;
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		public static WebElement  binRowTotalToBeAllocated;
		
		
		
		@FindBy (xpath="//input[@id='id_bins_balance']")
		public static WebElement binBalanceTxt;
		
		@FindBy (xpath="//div[@id='id_btnalternatecategorycheck']//div[@class='toolbar_button_image']")
		public static WebElement binAlternateCategoryCheckBtn;
		
		@FindBy (xpath="//div[@id='id_btnautoallocate']//div[@class='toolbar_button_image']")
		public static WebElement binAutoAllocateBtn;
		
		@FindBy (xpath="//span[@class='icon-pick icon-font4']")
		public static WebElement binPickBtn; 
		
		@FindBy (xpath="//div[@id='id_btnautoallocategroup']//div[@class='toolbar_button_image']")
		public static WebElement binAutoAllocateWithinGroupBtn;
		
		@FindBy (xpath="//div[@id='id_bins_ok']//span[@class='icon-ok icon-font6']")
		public static WebElement binOkBtn;
		
		@FindBy (xpath="//div[@class='col-xs-9 pull-right']//span[@class='icon-close icon-font6']")
		public static WebElement binCancelBtn;
		
		@FindBy (xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		public static WebElement binSumInward;
		
		
		// Bin OutWard Elements
	 	

		@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_1']//div[contains(text(),'Bin')]")
		public static WebElement  binHeader_Bin;
		
		@FindBy(xpath="//th[@id='id_transaction_bins_grid_control_heading_3']//div[contains(text(),'Stock')]")
		public static WebElement  binHeader_Stock;
		
		@FindBy(xpath="//div[contains(text(),'Stock(Pcs)')]")
		public static WebElement  binHeader_StockPcs;
		
		@FindBy(xpath="//div[contains(text(),'Capacity')]")
		public static WebElement  binHeader_Capacity;
		
		@FindBy(xpath="//div[contains(text(),'Load')]")
		public static WebElement  binHeader_Load;
		
		@FindBy(xpath="//div[contains(text(),'Free space')]")
		public static WebElement  binHeader_FreeSpace;
		
		@FindBy(xpath="//div[contains(text(),'Free Quantity')]")
		public static WebElement  binHeader_FreeQty;
		
		@FindBy(xpath="//div[contains(text(),'To be Picked')]")
		public static WebElement  binHeader_ToBePicked;
					
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-0']")
		public static WebElement  binoutwardRow1Index;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-1']")
		public static WebElement  binoutwardRow1Bin;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-3']")
		public static WebElement  binoutwardRow1Stock;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-4']")
		public static WebElement  binoutwardRow1StockPcs;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-5']")
		public static WebElement  binoutwardRow1Capacity;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-6']")
		public static WebElement  binoutwardRow1Load;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-7']")
		public static WebElement  binoutwardRow1FreeSpace;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-8']")
		public static WebElement  binoutwardRow1FreeQty;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_1-12']")
		public static WebElement  binoutwardRow1ToBePicked;
		
		@FindBy(xpath="//input[@id='id_transaction_bins_grid_control_heading_ctrl_12']")
		public static WebElement  binoutwardToInputInToBePicked;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-0']")
		public static WebElement  binoutwardRow2Index;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-1']")
		public static WebElement  binoutwardRow2Bin;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-3']")
		public static WebElement  binoutwardRow2Stock;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-4']")
		public static WebElement  binoutwardRow2StockPcs;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-5']")
		public static WebElement  binoutwardRow2Capacity;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-6']")
		public static WebElement  binoutwardRow2Load;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-7']")
		public static WebElement  binoutwardRow2FreeSpace;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-8']")
		public static WebElement  binoutwardRow2FreeQty;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_2-12']")
		public static WebElement  binoutwardRow2ToBePicked;
		
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-0']")
		public static WebElement  binoutwardRow3Index;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-1']")
		public static WebElement  binoutwardRow3Bin;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-3']")
		public static WebElement  binoutwardRow3Stock;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-4']")
		public static WebElement  binoutwardRow3StockPcs;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-5']")
		public static WebElement  binoutwardRow3Capacity;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-6']")
		public static WebElement  binoutwardRow3Load;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-7']")
		public static WebElement  binoutwardRow3FreeSpace;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-8']")
		public static WebElement  binoutwardRow3FreeQty;
		
		@FindBy(xpath="//td[@id='id_transaction_bins_grid_col_3-12']")
		public static WebElement  binoutwardRow3ToBePicked;
		
		
		
		@FindBy(xpath="//tfoot[@id='id_transaction_bins_grid_foot']//td[13]")
		public static WebElement  binoutwardRowTotalToBePicked;


		@FindBy(xpath="//*[@id='id_bins_ok']")
		public static WebElement  binOkButtonStatus;

		@FindBy(xpath="//*[@id='id_transaction_bins_grid_body']/tr/td")
		public static List<WebElement> binInwardGridList;

		
	
		// RMA POpup Window
		@FindBy (xpath="//div[@id='Modal_Header']/div[1]")
		public static WebElement rmaScreenTitle;
		
		@FindBy (xpath="//input[@id='txtSerialNo']")
		public static WebElement rmaSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		public static WebElement rmaQuantityTxtField;
		
		@FindBy (xpath="//div[@id='img_add']/span")
		public static WebElement rmaAddBtn;
			
		@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
		public static WebElement rmaNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
		public static WebElement rmaTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
		public static WebElement rmaTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
		public static WebElement rmaTableHeadingDocumentDate;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
		public static WebElement rmaClearBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
		public static WebElement rmaOkBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
		public static WebElement rmaCancelBtn;
		
		@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
		public static WebElement rmaCloseBtn;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
		public static WebElement rmaTableRow1Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
		public static WebElement rmaTableRow2Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
		public static WebElement rmaTableRow3Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
		public static WebElement rmaTableRow4Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
		public static WebElement rmaTableRow5Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
		public static WebElement rmaTableRow6Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
		public static WebElement rmaTableRow7Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
		public static WebElement rmaTableRow8Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
		public static WebElement rmaTableRow9Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
		public static WebElement rmaTableRow10Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
		public static WebElement rmaTableRow11Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
		public static WebElement rmaTableRow12Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
		public static WebElement rmaTableRow13Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
		public static WebElement rmaTableRow14Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
		public static WebElement rmaTableRow15Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
		public static WebElement rmaTableRow16Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
		public static WebElement rmaTableRow17Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
		public static WebElement rmaTableRow18Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
		public static WebElement rmaTableRow19Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
		public static WebElement rmaTableRow20Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
		public static WebElement rmaTableRow1Column2;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
		public static WebElement rmaTableRow1Column3;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
		public static WebElement RMAPopupTableRow1Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
		public static WebElement RMAPopupTableRow2Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
		public static WebElement RMAPopupTableRow3Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
		public static WebElement RMAPopupTableRow4Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
		public static WebElement RMAPopupTableRow5Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
		public static WebElement RMAPopupTableRow6Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
		public static WebElement RMAPopupTableRow7Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
		public static WebElement RMAPopupTableRow8Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
		public static WebElement RMAPopupTableRow9Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
		public static WebElement RMAPopupTableRow10Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
		public static WebElement RMAPopupTableRow11Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
		public static WebElement RMAPopupTableRow12Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
		public static WebElement RMAPopupTableRow13Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
		public static WebElement RMAPopupTableRow14Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
		public static WebElement RMAPopupTableRow15Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
		public static WebElement RMAPopupTableRow16Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
		public static WebElement RMAPopupTableRow17Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
		public static WebElement RMAPopupTableRow18Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
		public static WebElement RMAPopupTableRow19Column1;
		
		@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
		public static WebElement RMAPopupTableRow20Column1;
		
		@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
		public static WebElement rmaExpansionBtn;


		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
		public static WebElement RMAPopupClearBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
		public static WebElement RMAPopupOkBtn;
		
		@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
		public static WebElement RMAPopupCancelBtn;
		
		@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
		public static WebElement RMAPopupCloseBtn;
		
		
		
		
		@FindBy(xpath="//div[contains(text(),'Inventory')]")
		public static WebElement  inventoryMenu; 
			
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		public static WebElement  inventoryTransactionsMenu; 
			
		@FindBy(xpath="//*[@id='139']/span")
		public static WebElement  inventoryTransactionsPurchasesMenu; 
		
		@FindBy(xpath="//*[@id='2010']/span")
		public static WebElement  requestForQuoteVoucher;
		
		@FindBy(xpath="//*[@id='2011']/span")
		public static WebElement  purchasesQuotationsVoucher;
			
		@FindBy(xpath="//*[@id='2012']/span")
		public static WebElement  purchasesOrdersVoucher;
	
		@FindBy(xpath="//*[@id='2013']/span")
		public static WebElement  materialReceiptNotesVoucher;
					
		@FindBy(xpath="//*[@id='140']/span")
		public static WebElement  inventoryTransactionsSalesMenu; 
				
		@FindBy(xpath="//*[@id='2018']/span")
		public static WebElement  salesQuotationsVoucher;
		
		@FindBy(xpath="//*[@id='2019']/span")
		public static WebElement  deliveryNotesVoucher;
		
		@FindBy(xpath="//*[@id='2022']/span")
		public static WebElement  posSalesVoucher;
		
		@FindBy(xpath="//*[@id='2045']/span")
		public static WebElement  productionOrdersVoucher;
		
		@FindBy(xpath="//*[@id='2017']/span")
		public static WebElement  salesOrdersVoucher;
							
		@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
		public static WebElement  inventoryTransactionsStocksMenu; 
				
		@FindBy(xpath="//span[contains(text(),'Shortages in Stock')]")
		public static WebElement  shortagesInStockVoucher;
		
		@FindBy(xpath="//span[contains(text(),'Excesses in Stocks')]")
		public static WebElement  excessesInStocksVoucher;
			
		@FindBy(xpath="//span[contains(text(),'Stock Transfers')]")
		public static WebElement  stockTransfersVoucher;
		
		@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
		public static WebElement  openingStocksVoucher;
		
		@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
		public static WebElement  openingStocksNewVoucher;
		
		@FindBy(xpath="//*[@id='2038']/span")
		public static WebElement  materialRequisitionVoucher;
				
		@FindBy(xpath="//*[@id='2049']/span")
		public static WebElement  stockAdjustmentVoucher;
					
		@FindBy(xpath="//*[@id='164']/span")
		public static WebElement  holdAndUnholdStockVoucher;
		
		@FindBy(xpath="//*[@id='93']/span")
		public static WebElement  stockReconciliation;
		
		@FindBy(xpath="//*[@id='99']/span")
		public static WebElement  stockAllocation;
		 
		 
		//Vouchers Home Page Ribbon Control
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
		public static WebElement  newBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
		public static WebElement  editBtn;

		@FindBy(xpath="//span[@class='icon-print icon-font6']")
		public static WebElement  printBtn;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
		public static WebElement  voucherHomeDeleteBtn;
		
		@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
		public static WebElement  authorizeBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_mobile_toolbar']/div/div[11]")
		public static WebElement  POauthorizeBtn;
		
		
		@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
		public static WebElement  suspendBtn;
		
		@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
		public static WebElement  rejectBtn;
		
		@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
		public static WebElement  chequeReturnBtn;
		
		@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
		public static WebElement  printBarCodeBtn;
		
		@FindBy(xpath="//span[@class='icon-convert icon-font6']")
		public static WebElement  convertBtn;
		
		@FindBy(xpath="//span[@class='icon-export icon-font6']")
		public static WebElement  exportToXMLBtn;  
			
		@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
		public static WebElement  settingsBtn;
		
		@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
		public static WebElement  homeCloseBtn;
		 
		//Voucher Entry Page Header Fields
		@FindBy(xpath="//input[@id='id_header_1']")
		public static WebElement  documentNumberTxt;
		
		@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
		public static WebElement  documentNumberdropdown_ExpansionBtn;
		
		@FindBy(xpath="//input[@id='id_header_2']")
		public static WebElement  dateTxt;
		
		@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
		public static WebElement  dateTxt_CalenderBtn;
		
		@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
		public static WebElement  calender_TodayBtn;
		
		 
		@FindBy(xpath="//input[@id='id_header_268435460']")
		public static WebElement  warehouseTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
		public static List<WebElement> warehouseHeaderComboList;
		
		@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
		public static List<WebElement> itemComboList;
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
		public static WebElement  select1stRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
		public static WebElement  select1stRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
		public static WebElement  select1stRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
		public static WebElement  select1stRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
		public static WebElement  select1stRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
		public static WebElement  select1stRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
		public static WebElement  select1stRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
		public static WebElement  select1stRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
		public static WebElement  select1stRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
		public static WebElement  select1stRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
		public static WebElement  select1stRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
		public static WebElement  select1stRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
		public static WebElement  select1stRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
		public static WebElement  select1stRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
		public static WebElement  select1stRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
		public static WebElement  select1stRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
		public static WebElement  select1stRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
		public static WebElement  select1stRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
		public static WebElement  select1stRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
		public static WebElement  select1stRow_20thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
		public static WebElement  select1stRow_21stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
		public static WebElement  select1stRow_22ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
		public static WebElement  select1stRow_23rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
		public static WebElement  select1stRow_24thColumn;
		
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
		public static WebElement  select2ndRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
		public static WebElement  select2ndRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
		public static WebElement  select2ndRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
		public static WebElement  select2ndRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
		public static WebElement  select2ndRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
		public static WebElement  select2ndRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
		public static WebElement  select2ndRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
		public static WebElement  select2ndRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
		public static WebElement  select2ndRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
		public static WebElement  select2ndRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
		public static WebElement  select2ndRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
		public static WebElement  select2ndRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
		public static WebElement  select2ndRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
		public static WebElement  select2ndRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
		public static WebElement  select2ndRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
		public static WebElement  select2ndRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
		public static WebElement  select2ndRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
		public static WebElement  select2ndRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
		public static WebElement  select2ndRow_19thColumn;
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
		public static WebElement  select3rdRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
		public static WebElement  select3rdRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
		public static WebElement  select3rdRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
		public static WebElement  select3rdRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
		public static WebElement  select3rdRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
		public static WebElement  select3rdRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
		public static WebElement  select3rdRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
		public static WebElement  select3rdRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
		public static WebElement  select3rdRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
		public static WebElement  select3rdRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
		public static WebElement  select3rdRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
		public static WebElement  select3rdRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
		public static WebElement  select3rdRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
		public static WebElement  select3rdRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
		public static WebElement  select3rdRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
		public static WebElement  select3rdRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
		public static WebElement  select3rdRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
		public static WebElement  select3rdRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
		public static WebElement  select3rdRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
		public static WebElement  select3rdRow_20thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
		public static WebElement  select3rdRow_21stColumn;
		
		
		
		@FindBy(xpath="//input[@id='id_body_23']")
		public static WebElement  enter_ItemTxt;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		public static WebElement  enter_SalesAccountTxt;
		
		@FindBy(xpath="//input[@id='id_body_24']")
		public static WebElement  enter_UnitTxt;
		
		@FindBy(xpath="//input[@id='id_body_26']")
		public static WebElement  enter_Quantity;
		
		@FindBy(xpath="//input[@id='id_body_27']")
		public static WebElement  enter_Rate;
		
		@FindBy(xpath="//input[@id='id_body_28']")
		public static WebElement  enter_Gross;
		
		@FindBy (xpath="//input[@id='id_body_38']")
		public static WebElement enter_RMA;
		
		@FindBy(xpath="//input[@id='id_body_13']")
		public static WebElement  enter_Batch;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		public static WebElement  enter_DebitACTxt;
		
		 
		@FindBy(xpath="//input[@id='id_body_37']")
		public static WebElement enter_Expirydate;
		
		@FindBy(xpath="//input[@id='id_body_36']")
		public static WebElement enter_MfgDate;
		
		@FindBy(xpath="//input[@id='id_body_108']")
		public static WebElement enter_BatchRate;
		
		@FindBy(xpath="//input[@id='id_body_109']")
		public static WebElement enter_BatchRateValue1;
		
		@FindBy(xpath="//input[@id='id_body_110']")
		public static WebElement enter_BatchRateValue2;
		
		@FindBy(xpath="//*[@id='id_transactionentry_previous']")
		public static WebElement  previousBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_next']")
		public static WebElement  nextBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_print']")
		public static WebElement  new_PrintBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
		public static WebElement  new_SuspendBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_close']")
		public static WebElement  new_CloseBtn;

		@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
		public static WebElement  new_DeleteBtn;
		
		
		
		@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
		public static WebElement  freeFlowBtn;
		
		@FindBy(xpath="//span[@class='icon-header icon-font6']")
		public static WebElement  jumpToHeaderSectionBtn;
		
		@FindBy(xpath="//span[@class='icon-panel icon-font6']")
		public static WebElement  jumpToBodySectionBtn;
		
		@FindBy(xpath="//span[@class='icon-footer icon-font6']")
		public static WebElement  jumpToFooterBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_new']")
		public static WebElement  new_newBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_save']")
		public static WebElement  voucherSaveBtn;
		
		@FindBy(xpath="//div[@id='dvHomeTransClose']")  
		public static WebElement  voucherhomeCloseBtn;
		
		
		
		@FindBy(xpath="//*[@id='60']/div")
		public static WebElement  financialsMenu; 
		
		@FindBy(xpath="//*[@id='61']/span")
		public static WebElement  financialsTransactionMenu; 
			
		@FindBy(xpath="//*[@id='2023']/span")
		public static WebElement  financialsTransactionsJournalsMenu;
		
		@FindBy(xpath="//*[@id='2028']/span")
		public static WebElement  openingBalancesVoucher;
		
		@FindBy(xpath="//input[@id='id_header_10']")
		public static WebElement  voucherHeaderCurrency;
		
		@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
		public static List<WebElement> currencyListCount;	
		
		@FindBy(xpath="//input[@id='id_header_268435459']")
		public static WebElement  departmentTxt;
		
		@FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr/td[2]")
		public static List<WebElement> openingBalDepartmentList;
		
		@FindBy(xpath="//input[@id='id_body_12']")
		public static WebElement  enter_AccountTxt;
		
		@FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
		public static List<WebElement> openingBalAccountListInGrid;
		
		@FindBy(xpath="//input[@id='id_body_18']")
		public static WebElement  enter_DebitTxt;
		
		@FindBy(xpath="//input[@id='id_body_19']")
		public static WebElement  enter_CreditTxt;
		
		@FindBy(xpath="//*[@id='lblAccount']")
		public static WebElement  billRefPartyName;
		
		@FindBy(xpath="//table[@id='id_Adjustment_Grid']")
		public static WebElement billRefAdjustBillsGrid;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
		public static List<WebElement> billRefAdjustBillsGridList;
		
		
		
		
		  //Bill Reference Screen 	
		

		@FindBy(xpath="//input[@id='txtNewReference']")
		public static WebElement  billRefNewReferenceTxt;
		
		@FindBy(xpath="//input[@id='txtOnAccount']")
		public static WebElement  billRefTxtOnAccount;		
			
		@FindBy(xpath="//input[@id='Searchtxt']")
		public static WebElement  billRefSearchTxt;		
		
		@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
		public static WebElement  billRefNewReferenceDropdown;		
		
		@FindBy(xpath="//select[@id='cbmShowBills']")
		public static WebElement  billRefShowBillsDropdown;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
		public static WebElement  billRefGridHeaderDueDate;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
		public static WebElement  billRefGridHeaderCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
		public static WebElement  billRefGridHeaderOrginalAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
		public static WebElement  billRefGridHeaderBalanceAmt;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
		public static WebElement  billRefGridHeaderAdjustmentAmt;		
		
		@FindBy(xpath="//div[contains(text(),'Native Currency')]")
		public static WebElement  billRefGridHeaderNativeCurrency;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
		public static WebElement  billRefGridHeaderNarration;		
		
		@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
		public static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
		public static WebElement  billRefGridFirstRow;	
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
		public static WebElement  billRefGridFirstRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
		public static WebElement  billRefGridSecondRowChkbox;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
		public static WebElement  billRefGridThirdRowChkbox;		
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
		public static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
		public static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
		public static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
		public static WebElement  billRefGridFirstNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
		public static WebElement  billRefGridSecondNarrationTxt;		
		
		@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
		public static WebElement  billRefGridThirdNarrationTxt;		
		
		@FindBy(xpath="//input[@id='id_Narration']")
		public static WebElement  narrationToWrite;		
		
		@FindBy(xpath="//input[@id='id_limit']")
		public static WebElement  adjustAmtToWrite;		
		
		@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
		public static WebElement  billRefPaymentsBillReferenceLabel;		
		
		@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
		public static WebElement  billRefAdjustOnFIFOBtn;		
		
		@FindBy(xpath="//span[@id='btnPick']")
		public static WebElement  billRefPickIcon;		
		
		@FindBy(xpath="//span[@id='btnOk']")
		public static WebElement  billRefOkBtn;		
		
		@FindBy(xpath="//span[@id='btnCancel']")
		public static WebElement  billRefcancel;		
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
		public static WebElement  billRefSummatyValueNet;		
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
		public static WebElement  billRefGridVendorRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
		public static WebElement  billRefGridVendorAmtRow1;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
		public static WebElement  billRefGridVendorRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
		public static WebElement  billRefGridVendorAmtRow2;	
		
		@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
		public static WebElement  billRefGridVendorRow3;
		
		@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
		public static WebElement amtAdjustedAgainstNewREfinOtherVouchers;
				
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		public static WebElement transactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		public static WebElement baseCurrency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
		public static WebElement localCurrencyDhs;
		
		@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
		public static WebElement balanceNewReferenceAmt;
		
		@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
		public static WebElement breakUpByTagTab;
		
		@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
		public static WebElement adjustmentTab;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
		public static WebElement breakUpByTagDueDate;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
		public static WebElement breakUpByTagDepartment;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
		public static WebElement breakUpByTagBaseCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
		public static WebElement breakUpByTagBillCurrency;
		
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
		public static WebElement breakUpByTagBaseConversionRate;
			
		@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
		public static WebElement breakUpByTagBaseLocalCurrency;
		
		@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
		public static WebElement  billRefAdjustAmountInTransCurency;
		
		@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
		public static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		public static WebElement  billRefInfoBarLocalCurrencyRate;
		
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
		public static WebElement billRefTransactionCurency;
		
		@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
		public static WebElement billRefBaseCurrency;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
		public static WebElement conversationRateBaseCurrencyRate;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
		public static WebElement conversationRateLocalCurrencyRate;
		
		@FindBy(xpath="//*[@id='id_transactionentry_save']")
		public static WebElement openingBalancesSaveBtn;
		
		
		@FindBy(xpath="//input[@id='id_header_11']")
		public static WebElement  voucherHeaderExchangeRate;
		
		@FindBy(xpath="//input[@id='id_header_145']")
		public static WebElement  voucherHeaderLocalExchangeRate;
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
		public static WebElement vocFooterdebitAmount;
		
		@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
		public static WebElement vocFooterCreditAmount;
	
	
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td")
		public static List<WebElement> voucherHomeBodyList;
		
		
		
		
		@FindBy(xpath="//*[@id='tblBodyTransRender']")
		public static WebElement  voucherBodyGrid;

		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
		public static WebElement voucherAll;
	  
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
		public static WebElement pendingAuthorizationProcess;
	  
		@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[3]/a")
		public static WebElement pendingMaterialRequistion;
  
		@FindBy(xpath="//span[@id='noofalerts']")
		public static WebElement noOfAlertsDisplay;

		@FindBy(xpath="//li[@class='header']")
		public static WebElement alertsMainHeader;

		@FindBy(xpath="//li[@class='treeview-menu']//a[@id='1']")
		public static WebElement alertTransactionsTreeView;

		@FindBy(xpath="//*[@id='1']/span")
		public static WebElement alertTransaction;

		@FindBy(xpath="//*[@id='7936']/span")
		public static WebElement transactionAuthorization;
	  
		@FindBy(xpath="//*[@id='masterChild_7936']/a/span")
		public static WebElement transactionAuthorizationText;
	  
		@FindBy(xpath="//*[@id='id_PlanName 1']/label")
	  	public static WebElement pendingBudgetInfo;

		@FindBy(xpath="//*[@id='Grid_ApproveBudgetMore_control_heading_ctrl_1']")
		public static WebElement checkboxInBudgetAuthorization;
	  
		@FindBy(xpath="//*[@id='btnAuthorize']")
		public static WebElement btnAuthorizeInBudgetAuthorization;
	  
		@FindBy(xpath="//*[@id='btnClose']")
		public static WebElement btnCloseInBudgetAuthorization;
		
		
		 @FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
		 public static WebElement  invTransStocksMenu;
		
		 @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		 public static WebElement  invTransactionsMenu; 
		 
		 @FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
		 public static List<WebElement> itemListCount;
		  
		 @FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
		 public static List<WebElement> purchaseAccountListCount; 
		  
		 @FindBy(xpath="//div[3]/div[2]/table/tbody/tr[2]/td/input[2]")
		 public static WebElement purchaseAccountEnter;
		
		 @FindBy(xpath="//input[@id='id_header_3']")
			public static WebElement  MRpurchaseAccountTxt;
		 
		 @FindBy(xpath="//*[@id='id_transactionentry_save']/div[2]")
		 public static WebElement  MRsaveBtn;
		
		
		 
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[12]")
		 public static WebElement openingStocksNewHomeRow1AuthorizationStatus;
		
		 
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[4]")
		 public static WebElement openingStocksNewHomeRow1VoucherNo;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[5]")
		 public static WebElement openingStocksNewHomeRow1CreatedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[6]")
		 public static WebElement openingStocksNewHomeRow1ModifiedBy;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[11]")
		 public static WebElement openingStocksNewHomeRow1SuspendStatus;
		
		
		 @FindBy(xpath="//tr[@id='trRender_0']//td//input")
		 public static WebElement  grid_ChkBox1;
		
		 @FindBy(xpath="//tr[@id='trRender_1']//td//input")
		 public static WebElement  grid_ChkBox2;
		
		 @FindBy(xpath="//tr[@id='trRender_2']//td//input")
		 public static WebElement  grid_ChkBox3;
		
		 @FindBy(xpath="//tr[@id='trRender_3']//td//input")
		 public static WebElement  grid_ChkBox4;
		
		 @FindBy(xpath="//*[@id='id_header_268435459']")
		 public static WebElement  departmentValuetxt;
		 
		 
		 
		 
			@FindBy(xpath="//*[@id='2007']/span")
		  	public static WebElement  financialsTransactionsPurchaseMenu; 
		
			@FindBy(xpath="//*[@id='2008']/span")
			public static WebElement  purchaseVoucher;
			
			@FindBy(xpath="//*[@id='2009']/span")
			public static WebElement  purchaseReturnsVoucher;
			
			@FindBy(xpath="//*[@id='2050']/span")
			public static WebElement  purchaseVoucherN;
		
			@FindBy(xpath="//span[contains(text(),'Purchase Voucher VAT')]")
			public static WebElement  purchaseVouchersVat;
			
			@FindBy(xpath="//input[@id='id_header_4']")
			public static WebElement  vendorAccountTxt;
		
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			public static List<WebElement> vendorAccountComboList;
			
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			public static List<WebElement> customerAccountComboList;
			
			@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
			public static List<WebElement> currencyComboList;
			
			@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
			public static List<WebElement> departmentComboList;
			
			@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
			public static List<WebElement> warehouseBodyComboList;
			
			@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
			public static List<WebElement> st_warehouse1HeaderComboList;
			
			@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
			public static List<WebElement> st_warehouse2BodyComboList;
			
			@FindBy(xpath="//input[@id='id_body_536870916']")
		    public static WebElement enter_WarehouseTxt;
			
			@FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr/td[2]")
		    public static List<WebElement> pvvGridWarehouseList;
			
		    @FindBy(xpath="//*[@id='id_body_23_table_body']/tr/td[2]")
		    public static List<WebElement> pvvGridItemList;
		    
		    @FindBy(xpath="//input[@id='id_body_33554497']")
			public static WebElement enter_PvTaxable;
			
			@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td[2]")
			public static List<WebElement> pvvGridTaxCodeList;
			
			@FindBy(xpath="//input[@id='id_body_16777323']")
			public static WebElement enter_PvTaxCode;
			
			@FindBy(xpath="//input[@id='id_body_33554490']")
			public static WebElement enter_PVDiscount;
			
			@FindBy(xpath="//span[@id='btnPick']")
			public static WebElement pickBtn;
			
			@FindBy(xpath="//input[@id='txtNewReference']")
			public static WebElement newReferenceTxt;
			
			@FindBy(xpath="//span[@id='btnOk']")
			public static WebElement Bill_OkBtn;
			
			@FindBy(xpath="//input[@id='id_header_4']")
			public static WebElement  purchaseAccountTxt;
			
			@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
			public static List<WebElement> vendorAccountListCount; 
			
			@FindBy(xpath="//input[@id='id_header_6']")
			public static WebElement  voucherHeaderDueDate;
			
			@FindBy(xpath="//td[@id='id_header_6_input_image']/span")
			public static WebElement  voucherHeaderDueDateCalenderBtn;
			
			@FindBy(xpath="//tr[@id='id_header_6_day_today']/td/span[1]")
			public static WebElement  voucherHeaderDueDateCalenderTodayBtn;
			
			
			@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
		    public static List<WebElement> departmentListCount;
			
			@FindBy(xpath="//input[@id='id_header_268435470']")
			public static WebElement  placeOFSupplyTxt;
			
			@FindBy(xpath="//input[@id='id_header_268435471']")
			public static WebElement  jurisdictionTxt;
			
			
			@FindBy(xpath="//input[@id='id_body_12']")
			public static WebElement  enter_PurchaseAccountTxt;
			
			@FindBy(xpath="//input[@id='id_body_33554496']")
			public static WebElement enter_PvVat;
			
			@FindBy(xpath="//input[@id='id_body_16777313']")
			public static WebElement  enter_TaxCode;
		
		 
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']/input")
		public static WebElement workFlowChkBox1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']/input")
		public static WebElement workFlowChkBox2;
		
		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		public static WebElement workFlowExpandBtn;
		
		@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
		public static WebElement  workFlowHeaderChkBoxCL;
		
		@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[2]/input")
		public static List<WebElement> workFlowChkBoxList;
		
		@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[7]")
		public static List<WebElement> workFlowVoucherNosList;
		
		@FindBy(xpath="//span[@class='icon-ok icon-font7']")
		public static WebElement  workFlowOkBtnCL;
		
		
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		public static List<WebElement> grid_CheckBoxList;
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
		public static List<WebElement> grid_VoucherNoList;
		
		@FindBy(xpath="//a[@id='2001']//span[contains(text(),'Cash and Bank')]")
		public static WebElement  cashAndBankMenu; 
		
		@FindBy(xpath="//a[@id='2002']//span[contains(text(),'Receipts')]")
		public static WebElement  receiptsVoucher;
			
		@FindBy(xpath="//a[@id='2003']//span[contains(text(),'Payments')]")
		public static WebElement  paymentsVoucher;
		
		
		@FindBy(xpath="//span[contains(text(),'Payments VAT')]")
		public static WebElement  paymentsVATVoucher;
		
		@FindBy(xpath="//span[contains(text(),'Receipts VAT')]")
		public static WebElement  recepitsVATVoucher;
		
		@FindBy(xpath="//span[contains(text(),'JV VAT View')]")
		public static WebElement  JVVATViewVoucher;
		
		
		@FindBy(xpath="//*[@id='id_header_4_table_body']/tr/td[2]")
		public static List<WebElement>  cashAndBAnkAccountList;
		
		@FindBy(xpath="//input[@id='id_header_4']")
		public static WebElement newCashBankAccountTxt;
		
	  
		@FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
		public static List<WebElement> bodyAccountListInGrid;
		
		               
		@FindBy(xpath="//*[@id='id_body_39_table_body']/tr/td[2]")
		public static List<WebElement> bodyCreditAccountListInGrid;
		
		
		@FindBy(xpath="//input[@id='id_body_16777307']")
		public static WebElement  enterpayVATTaxCode;
		
		@FindBy(xpath="//input[@id='id_body_16']")
		public static WebElement  enter_Amount;
		
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
		public static List<WebElement> billRefAdjustBillsList;
		
	
		@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
		public static WebElement gridAdjustmentAmtRow1;
		
		
		
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
		public static WebElement breakUpDetailsAccount;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
		public static WebElement breakUpDetailsItem;
		
		@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
		public static WebElement breakUpDetailsDepartment;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
		public static WebElement asOnEntryDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
		public static WebElement asOnEntryDateBaseConcersationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
		public static WebElement asOnEntryDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
		public static WebElement asOnEntryDateLocConversationRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
		public static WebElement asOnEntryDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
		public static WebElement balOnAdjstDateTransAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
		public static WebElement  balOnAdjstDateBasrConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
		public static WebElement  balOnAdjstDateBaseAmount;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
		public static WebElement  balOnAdjstDateLocalConversionRate;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
		public static WebElement  balOnAdjstDateAmt;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
		public static WebElement adjustmentsAmount1;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
		public static WebElement adjustmentsAmount2;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
		public static WebElement adjustmentsAmount3;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
		public static WebElement adjustmentsAmount4;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
		public static WebElement exchangeGainLossForBaseCurrency;
		
		@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
		public static WebElement exchangeGainLossForLocalCurrency;
		
		
		
		@FindBy(xpath="//input[@id='id_limit']")
		public static WebElement gridEnterAdjustAmtRow1;
		
		
		@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
		public static WebElement  copyDocumentOption;
		
	    @FindBy(xpath="//tr[@id='tr_copydoc_voucher_1']//td//input")
		public static WebElement cd_FirstChkBox;
	    
	    @FindBy(xpath="//input[@id='id_transaction_copydoc_ok']")
		public static WebElement cd_OkBtn;

	    @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr/td")
	    public static List<WebElement> voucherGridBodyList;
	    
	    
	    
	    @FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[4]")
		public static List<WebElement> bodyVoucherNolist;
		
		@FindBy(xpath="//*[@id='tblBodyTransRender']/tr/td[2]/input")
		public static List<WebElement> bodyChkBoxlist;
		
		@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
		public static WebElement  voucherDeleteBtn;
		
		
		
		@FindBy(xpath="//input[@id='id_header_4']")
		public static WebElement  customerAccountTxt;
		
		@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
		public static List<WebElement> salesAccountListCount; 

	    @FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
		public static List<WebElement> customerAccountListCount; 
	    
	    @FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
		public static List<WebElement> cnAccountListCount; 
	    
	    @FindBy(xpath="//input[@id='id_body_536870916']")
		public static WebElement  pvWareHouseTxt;
	    
	    @FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
	    public static List<WebElement> pvwareHouseListCount;
		

		
		@FindBy(xpath="//input[@id='id_body_33554502']")
		public static WebElement so_enter_AQTxt;
		
		@FindBy(xpath="//input[@id='id_body_33554503']")
		public static WebElement so_enter_FQTxt;
		
		
		@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
		public static WebElement stockReservationLabel;
		
		@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
		public static WebElement stockReservationHeaderCloseBtn; 
		
		@FindBy(xpath="//*[@id='Id_BatchReservation_FGrid_body']/tr/td")
		public  static List<WebElement> batchReservationPopGridBody;
		
		
		
		@FindBy(xpath="//*[@id='Id_BatchReservation_FGrid_body']/tr/td[4]")
		public  static List<WebElement> batchReservationPopGridBatch;
		
		@FindBy(xpath="//*[@id='Id_BatchReservation_FGrid_body']/tr/td[3]")
		public  static List<WebElement> batchReservationPopGridQtyToRelease;
    
		@FindBy(xpath="//input[@id='txtQtyToReserve']")
		public static WebElement enter_QtyToReserve;
		
		@FindBy(xpath="//li[@id='btnPickQuantity']")
		public static WebElement res_PickBtn;
		
		@FindBy(xpath="//div[contains(text(),'Discard')]")
		public static WebElement res_DiscardBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-ok icon-font6']")
		public static WebElement res_OkBtn;
		
		@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-close icon-font6']")
		public static WebElement res_CloseBtn;
	    
	    
		@FindBy(xpath="//span[@class='icon-menu icon-font4']")
		public static WebElement  toggleBtn;
		
		@FindBy(xpath="//*[@id='id_transactionentry_settings']")
		public static WebElement  settingsOption;
	
	    @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td[3]")
		public static List<WebElement> editScreenbodyCaption;
	    
	    @FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td/span[2]")
		public static List<WebElement> editScreenbodyDeleteBtn;
	    
	    @FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div/label/span")
		public static List<WebElement>  editScreenLoadFieldTxtList;
		
		@FindBy(xpath="//*[@id='editScreen_copyFieldsOptFields']/div/label/input")
		public static List<WebElement>  editScreenLoadFieldchkboxList;
		
		@FindBy(xpath="//*[@id='formulaGrideditScreen_qtyPreLoaded_body']/tr/td[3]")
		public static List<WebElement>  editScreeAtyPreLoadFormulaList;

		@FindBy(xpath="//*[@id='formulaGrideditScreen_qtyPreLoaded_body']/tr/td[4]")
		public static List<WebElement>  editScreeAtyPreLoadFormulaVariableList;
		
		@FindBy(xpath="//i[@class='icon-close icon-font6']")
		public static WebElement  settings_closeBtn;
		
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
		public static WebElement  select4thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
		public static WebElement  select4thRow_2ndColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
		public static WebElement  select4thRow_3rdColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
		public static WebElement  select4thRow_4thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
		public static WebElement  select4thRow_5thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
		public static WebElement  select4thRow_6thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
		public static WebElement  select4thRow_7thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
		public static WebElement  select4thRow_8thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
		public static WebElement  select4thRow_9thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
		public static WebElement  select4thRow_10thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
		public static WebElement  select4thRow_11thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
		public static WebElement  select4thRow_12thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
		public static WebElement  select4thRow_13thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
		public static WebElement  select4thRow_14thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
		public static WebElement  select4thRow_15thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
		public static WebElement  select4thRow_16thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
		public static WebElement  select4thRow_17thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
		public static WebElement  select4thRow_18thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
		public static WebElement  select4thRow_19thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
		public static WebElement  select4thRow_20thColumn;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
		public static WebElement  select4thRow_21thColumn;


		
		@FindBy(xpath="//input[@id='id_header_86']")
		public static WebElement  stockTransferheaderWarehouse1Txt;
		
		@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
	    public static List<WebElement> wareHouseHeaderListCount;
		
		@FindBy(xpath="//input[@id='id_body_87']")
		public static WebElement  enter_BodyWarehouse2Txt;
		
		@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
	    public static List<WebElement> wareHouseBodyListCount;
		
		@FindBy(xpath="//i[@id='id_transactionentry_workflow_popup_close']")
		public static WebElement  workFlowCloseBtn;
		
		@FindBy(xpath="//i[@class='icon-pick icon-font5']")
		public static WebElement batchPickOnFIFOIcon;
		
		@FindBy(xpath="//label[@id='div_Ok']")
		public static WebElement batchOkIcon;
		
		

		@FindBy (xpath="//input[@id='txtSerialNo']")
		public static WebElement rmaoutwardSerialNumberTxtField;

		@FindBy (xpath="//input[@id='txtQuantity']")
		public static WebElement rmaoutwardQuantityTxtField;
		
		@FindBy (xpath="//i[@class='icon icon-add icon-font6']")
		public static WebElement rmaoutwardAddBtn;
			
		@FindBy (xpath="//div[contains(@class,'col-xs-12 col-sm-5 padding-left-Right')]")
		public static WebElement rmaoutwardNumberofItemsLabel;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']")
		public static WebElement rmaoutwardTableHeadingRMA;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']")
		public static WebElement rmaoutwardTableHeadingDocumentNo;
		
		@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']")
		public static WebElement rmaoutwardTableHeadingDocumentDate;
		
		@FindBy (xpath="//label[contains(text(),'Ok')]")
		public static WebElement rmaoutwardOkBtn;
		
		@FindBy (xpath="//label[contains(text(),'Cancel')]")
		public static WebElement rmaoutwardCancelBtn;
		
		@FindBy (xpath="//i[@id='btnSearch']")
		public static WebElement rmaoutwardExpandBtn;
		
		// Search Rma popUp
				
		@FindBy (xpath="//input[@id='Search_txtSearchBox']")
		public static WebElement searchRMASearchTxtField;
		
		@FindBy (xpath="//i[@id='btn_RMASsearch_Search']")
		public static WebElement searchRMASearchBtn;
		
		@FindBy (xpath="//input[@id='Search_txtQuantity']")
		public static WebElement searchRMAQuantityTxtField;
		
		@FindBy (xpath="//label[@id='Search_lblItems']")
		public static WebElement searchRMANoOfItemsTxt;
		
		// Header Of Grid
		
		@FindBy (xpath="//input[@id='chkSelectALL']")
		public static WebElement searchRMAHeaderChkBox;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
		public static WebElement searchRMATableHeadingSerialNo;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
		public static WebElement searchRMATableHeadingDocNo;
		
		@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
		public static WebElement searchRMATableHeadingDate;
		
		
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
		public static WebElement searchRMAOkBtn;
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
		public static WebElement searchRMACancelBtn;
		
		@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
		public static WebElement searchRMACloseBtn;
		
		
		@FindBy(xpath="//*[@id='RMASearchTable']/tbody/tr[1]")
		public static WebElement rmaSearchTableBodyIfBlankRows;
		
		
		
		@FindBy(xpath="//*[@id='Id_StockReservation_FGrid_row_1']/td")
		public  static List<WebElement> stockReservationPopGridBody;
	    
	    @FindBy(xpath="//td[@id='Id_StockReservation_FGrid_col_1-4']")
		public static WebElement stockRes_QtyToReserveRow1;
		
		
	    
	    @FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td")
		public  static List<WebElement> binReservationPopGridBody;
		
		@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[5]")
		public  static List<WebElement> binReservationPopGridBin;
		
		@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[3]")
		public  static List<WebElement> binReservationPopGridQtyToRelease;
		
		
		// RMA Reservation Body Header
		
		@FindBy(xpath="//th[@id='Id_RMAReservation_FGrid_control_heading_2']//div[contains(text(),'Warehouse')]")
		public static WebElement rmaRes_BodyWarehouse; 
		
		@FindBy(xpath="//div[contains(text(),'RMA no')]")
		public static WebElement rmaRes_BodyRMANo;
		
		@FindBy(xpath="//div[contains(text(),'Selected')]")
		public static WebElement rmaRes_BodySelected; 

		// RMA Body Grid Row1
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-1']")
		public static WebElement rmaRes_Row1Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-2']")
		public static WebElement rmaRes_WarehouseRow1; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-3']")
		public static WebElement rmaRes_RmaNoRow1;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_1-4']//input")
		public static WebElement rmaRes_SelectedRow1; 
		
		// Row 2
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-1']")
		public static WebElement rmaRes_Row2Index; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-2']")
		public static WebElement rmaRes_WarehouseRow2; 
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-3']")
		public static WebElement rmaRes_RmaNoRow2;
		
		@FindBy(xpath="//td[@id='Id_RMAReservation_FGrid_col_2-4']//input")
		public static WebElement rmaRes_SelectedRow2; 
		
		@FindBy(xpath="//tbody[@id='Id_RMAReservation_FGrid_body']/tr/td[3]")
		public static List<WebElement> RmaWarehouseList;
		
		@FindBy(xpath="//tbody[@id='Id_RMAReservation_FGrid_body']/tr/td[4]")
		public static List<WebElement> RmaRmaNoList;
		
		@FindBy(xpath="//tbody[@id='Id_RMAReservation_FGrid_body']/tr/td[5]/input")
		public static List<WebElement> RmaSelectedList;
		
		@FindBy(xpath="//*[@id='Id_RMAReservation_FGrid_body']/tr/td[4]")
		public static List<WebElement> ReservePopUpRmaNoList; 
		
		@FindBy(xpath="//*[@id='Id_RMAReservation_FGrid_body']/tr/td[5]/input")
		public static List<WebElement> ReservePopUpRmaNoChkBox; 
		
		
		@FindBy(xpath="//select[@id='id_transactionentry_workflow_dropdown']")
		public static WebElement  workFlowDropdown;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchon']")
		public static WebElement  searchOnDropdownCL;

		@FindBy(xpath="//select[@id='id_transactionentry_workflow_searchtype']")
		public static WebElement  containingDropdownCL;
				
		@FindBy(xpath="//input[@id='id_transactionentry_workflow_search_input']")
		public static WebElement  workFlowSearchTxtCL;

		@FindBy(xpath="//div[@id='id_transaction_entry_workflow_control_area2']//td[4]")
		public static WebElement  workFlowCustomizeBtnCL;


		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		public static WebElement  workFlowMinimizeBtnCL;


		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_6']//div[contains(text(),'Voucher No')]")
		public static WebElement  workFlowHeaderVoucherNoCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_7']//div[contains(text(),'Date')]")
		public static WebElement  workFlowHeaderDateCL;

		@FindBy(xpath="//div[contains(text(),'Name')]")
		public static WebElement  workFlowHeaderNameCL;

		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_control_heading_9']//div[contains(text(),'Quantity')]")
		public static WebElement  workFlowHeaderQtyCL;

		@FindBy(xpath="//div[contains(text(),'Suspended')]")
		public static WebElement  workFlowHeaderSuspendCL;

		//1 Row CRTL + L

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']//input")
		public static WebElement workFlowRow1ChkBoxCL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-6']")
		public static WebElement  workFlowRow1Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-7']")
		public static WebElement  workFlowRow1Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-8']")
		public static WebElement  workFlowRow1Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-9']")
		public static WebElement  workFlowRow1Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-10']")
		public static WebElement  workFlowRow1Column5CL;


		//2 Row CRTL + L

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']//input")
		public static WebElement workFlowRow2ChkBoxCL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-6']")
		public static WebElement  workFlowRow2Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-7']")
		public static WebElement  workFlowRow2Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-8']")
		public static WebElement  workFlowRow2Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-9']")
		public static WebElement  workFlowRow2Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-10']")
		public static WebElement  workFlowRow2Column5CL;


		//3 Row CRTL + L

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-1']//input")
		public static WebElement workFlowRow3ChkBoxCL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-6']")
		public static WebElement  workFlowRow3Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-7']")
		public static WebElement  workFlowRow3Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-8']")
		public static WebElement  workFlowRow3Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-9']")
		public static WebElement  workFlowRow3Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_3-10']")
		public static WebElement  workFlowRow3Column5CL;


		//4 Row CRTL + L

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
		public static WebElement workFlowRow4ChkBoxCL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-6']")
		public static WebElement  workFlowRow4Column1CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-7']")
		public static WebElement  workFlowRow4Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-8']")
		public static WebElement  workFlowRow4Column3CL;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-9']")
		public static WebElement  workFlowRow4Column4CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-10']")
		public static WebElement  workFlowRow4Column5CL;

		@FindBy(xpath="//div[@id='id_transactionentry_header']//span[@class='col-xs-6 icon-collepse icon-font6 no_padding_left_right theme_color-inverse']")
		public static WebElement  new_HeaderMinimizeBtn;

		@FindBy(xpath="//div[@class='col-xs-12']//span[@class='col-xs-6 icon-font6 no_padding_left_right theme_color-inverse icon-expand']")
		public static WebElement  new_HeaderExpandBtn;

		@FindBy(xpath="//div[@id='id_transaction_entry_container']//span[contains(text(),'Purchase Vouchers N')]")
		public static WebElement  purchaseVoucherNLink;


		// 5 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
		public static WebElement workFlowRow5ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-6']")
		public static WebElement  workFlowRow5Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-7']")
		public static WebElement  workFlowRow5Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-8']")
		public static WebElement  workFlowRow5Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-9']")
		public static WebElement  workFlowRow5Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-10']")
		public static WebElement  workFlowRow5Column5CL;	
			

		//6 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
		public static WebElement workFlowRow6ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-6']")
		public static WebElement  workFlowRow6Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-7']")
		public static WebElement  workFlowRow6Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-8']")
		public static WebElement  workFlowRow6Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-9']")
		public static WebElement  workFlowRow6Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-10']")
		public static WebElement  workFlowRow6Column5CL;	



		//7 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
		public static WebElement workFlowRow7ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-6']")
		public static WebElement  workFlowRow7Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-7']")
		public static WebElement  workFlowRow7Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-8']")
		public static WebElement  workFlowRow7Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-9']")
		public static WebElement  workFlowRow7Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-10']")
		public static WebElement  workFlowRow7Column5CL;	


		//8 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
		public static WebElement workFlowRow8ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-6']")
		public static WebElement  workFlowRow8Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-7']")
		public static WebElement  workFlowRow8Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-8']")
		public static WebElement  workFlowRow8Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-9']")
		public static WebElement  workFlowRow8Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-10']")
		public static WebElement  workFlowRow8Column5CL;	


		//9 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
		public static WebElement workFlowRow9ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-6']")
		public static WebElement  workFlowRow9Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-7']")
		public static WebElement  workFlowRow9Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-8']")
		public static WebElement  workFlowRow9Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-9']")
		public static WebElement  workFlowRow9Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-10']")
		public static WebElement  workFlowRow9Column5CL;	


		//10 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
		public static WebElement workFlowRow10ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-6']")
		public static WebElement  workFlowRow10Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-7']")
		public static WebElement  workFlowRow10Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-8']")
		public static WebElement  workFlowRow10Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-9']")
		public static WebElement  workFlowRow10Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
		public static WebElement  workFlowRow10Column5CL;	




		//11 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
		public static WebElement workFlowRow11ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-6']")
		public static WebElement  workFlowRow11Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-7']")
		public static WebElement  workFlowRow11Column2CL;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-8']")
		public static WebElement  workFlowRow11Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-9']")
		public static WebElement  workFlowRow11Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-10']")
		public static WebElement  workFlowRow11Column5CL;	



		//12 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
		public static WebElement workFlowRow12ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-6']")
		public static WebElement  workFlowRow12Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-7']")
		public static WebElement  workFlowRow12Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-8']")
		public static WebElement  workFlowRow12Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-9']")
		public static WebElement  workFlowRow12Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-10']")
		public static WebElement  workFlowRow12Column5CL;	



		//13 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
		public static WebElement workFlowRow13ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-6']")
		public static WebElement  workFlowRow13Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-7']")
		public static WebElement  workFlowRow13Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-8']")
		public static WebElement  workFlowRow13Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-9']")
		public static WebElement  workFlowRow13Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-10']")
		public static WebElement  workFlowRow13Column5CL;	



		//14 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
		public static WebElement workFlowRow14ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-6']")
		public static WebElement  workFlowRow14Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-7']")
		public static WebElement  workFlowRow14Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-8']")
		public static WebElement  workFlowRow14Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-9']")
		public static WebElement  workFlowRow14Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-10']")
		public static WebElement  workFlowRow14Column5CL;


		//15 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
		public static WebElement workFlowRow15ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-6']")
		public static WebElement  workFlowRow15Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-7']")
		public static WebElement  workFlowRow15Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-8']")
		public static WebElement  workFlowRow15Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-9']")
		public static WebElement  workFlowRow15Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-10']")
		public static WebElement  workFlowRow15Column5CL;	



		//16 Row CRTL + L
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
		public static WebElement workFlowRow16ChkBoxCL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-6']")
		public static WebElement  workFlowRow16Column1CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-7']")
		public static WebElement  workFlowRow16Column2CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-8']")
		public static WebElement  workFlowRow16Column3CL;
					
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-9']")
		public static WebElement  workFlowRow16Column4CL;
			
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-10']")
		public static WebElement  workFlowRow16Column5CL;	
			
			
		 //WorkFlow Elements

		
		@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchon']")
		public static WebElement  searchOnDropdown;
		
		@FindBy(xpath="//select[@id='id_transactionentry_workflow_popup_searchtype']")
		public static WebElement  containingDropdown;
			
		@FindBy(xpath="//input[@id='id_transactionentry_workflow_popup_search']")
		public static WebElement  workFlowSearchTxt;
		
		
		@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Customize')]")
		public static WebElement  workFlowCustomizeBtn;
		
		@FindBy(xpath="//ul[@class='nav navbar-nav navbar-right']//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
		public static WebElement  workFlowOkBtn;
		
		@FindBy(xpath="//div[@class='toolbar_button_text font-7'][contains(text(),'Ok')]")
		public static WebElement  workFlowOkBtnInSalesVoucher;
		
		
		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		public static WebElement  workFlowMinimizeBtn;
		
		
		
		//WorkFlow Screen with Line wise
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
		public static WebElement  workFlowHeaderChkBox;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_6']//div[contains(text(),'Voucher No')]")
		public static WebElement  workFlowHeaderVoucherNo;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_7']//div[contains(text(),'Date')]")
		public static WebElement  workFlowHeaderDate;
		
		@FindBy(xpath="//div[contains(text(),'Name')]")
		public static WebElement  workFlowHeaderName;
		
		@FindBy(xpath="//th[@id='id_transaction_entry_detail_workflow_popup_control_heading_9']//div[contains(text(),'Quantity')]")
		public static WebElement  workFlowHeaderQty;
		
		@FindBy(xpath="//div[contains(text(),'Suspended')]")
		public static WebElement  workFlowHeaderSuspend;
		
		
		//WorkFlow with Line wise
		// 1 Row
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-1']//input")
		public static WebElement workFlowRadioBtnRowOne;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-6']")
		public static WebElement  workFlowRow1Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-7']")
		public static WebElement  workFlowRow1Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-8']")
		public static WebElement  workFlowRow1Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-9']")
		public static WebElement  workFlowRow1Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_1-10']")
		public static WebElement  workFlowRow1Column5;
		
		// 2 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-1']//input")
		public static WebElement workFlowRadioBtnRowTwo;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-6']")
		public static WebElement  workFlowRow2Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-7']")
		public static WebElement  workFlowRow2Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-8']")
		public static WebElement  workFlowRow2Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-9']")
		public static WebElement  workFlowRow2Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_2-10']")
		public static WebElement  workFlowRow2Column5;
		
		
		
		
		// 3 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-1']//input")
		public static WebElement workFlowRadioBtnRowThree;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-6']")
		public static WebElement  workFlowRow3Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-7']")
		public static WebElement  workFlowRow3Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-8']")
		public static WebElement  workFlowRow3Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-9']")
		public static WebElement  workFlowRow3Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_3-10']")
		public static WebElement  workFlowRow3Column5;
		
		
		// 4 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_4-1']//input")
		public static WebElement workFlowRadioBtnRowFour;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-6']")
		public static WebElement  workFlowRow4Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-7']")
		public static WebElement  workFlowRow4Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-8']")
		public static WebElement  workFlowRow4Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-9']")
		public static WebElement  workFlowRow4Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_4-10']")
		public static WebElement  workFlowRow4Column5;	
		
		
		
	     // 5 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_5-1']//input")
		public static WebElement workFlowRadioBtnRowFive;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-6']")
		public static WebElement  workFlowRow5Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-7']")
		public static WebElement  workFlowRow5Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-8']")
		public static WebElement  workFlowRow5Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-9']")
		public static WebElement  workFlowRow5Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_5-10']")
		public static WebElement  workFlowRow5Column5;	
			
			
			
	    // 6 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_6-1']//input")
		public static WebElement workFlowRadioBtnRowSix;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-6']")
		public static WebElement  workFlowRow6Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-7']")
		public static WebElement  workFlowRow6Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-8']")
		public static WebElement  workFlowRow6Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-9']")
		public static WebElement  workFlowRow6Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_6-10']")
		public static WebElement  workFlowRow6Column5;	
		

	    // 7 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_7-1']//input")
		public static WebElement workFlowRadioBtnRowSeven;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-6']")
		public static WebElement  workFlowRow7Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-7']")
		public static WebElement  workFlowRow7Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-8']")
		public static WebElement  workFlowRow7Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-9']")
		public static WebElement  workFlowRow7Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_7-10']")
		public static WebElement  workFlowRow7Column5;	
		
		

	    // 8 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_8-1']//input")
		public static WebElement workFlowRadioBtnRowEight;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-6']")
		public static WebElement  workFlowRow8Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-7']")
		public static WebElement  workFlowRow8Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-8']")
		public static WebElement  workFlowRow8Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-9']")
		public static WebElement  workFlowRow8Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_8-10']")
		public static WebElement  workFlowRow8Column5;	
		
		

	    // 9 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_9-1']//input")
		public static WebElement workFlowRadioBtnRowNine;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-6']")
		public static WebElement  workFlowRow9Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-7']")
		public static WebElement  workFlowRow9Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-8']")
		public static WebElement  workFlowRow9Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-9']")
		public static WebElement  workFlowRow9Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_9-10']")
		public static WebElement  workFlowRow9Column5;	
		
		

	    // 10 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_10-1']//input")
		public static WebElement workFlowRadioBtnRowTen;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-6']")
		public static WebElement  workFlowRow10Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-7']")
		public static WebElement  workFlowRow10Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-8']")
		public static WebElement  workFlowRow10Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-9']")
		public static WebElement  workFlowRow10Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_10-10']")
		public static WebElement  workFlowRow10Column5;	
		
		

	    // 11 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_11-1']//input")
		public static WebElement workFlowRadioBtnRowElevan;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-6']")
		public static WebElement  workFlowRow11Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-7']")
		public static WebElement  workFlowRow11Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-8']")
		public static WebElement  workFlowRow11Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-9']")
		public static WebElement  workFlowRow11Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_11-10']")
		public static WebElement  workFlowRow11Column5;	
		
		

	    // 12 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_12-1']//input")
		public static WebElement workFlowRadioBtnRowTwevle;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-6']")
		public static WebElement  workFlowRow12Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-7']")
		public static WebElement  workFlowRow12Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-8']")
		public static WebElement  workFlowRow12Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-9']")
		public static WebElement  workFlowRow12Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
		public static WebElement  workFlowRow12Column5;	
		

	    // 13 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_13-1']//input")
		public static WebElement workFlowRadioBtnRowThirteen;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-6']")
		public static WebElement  workFlowRow13Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-7']")
		public static WebElement  workFlowRow13Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-8']")
		public static WebElement  workFlowRow13Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_13-9']")
		public static WebElement  workFlowRow13Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_12-10']")
		public static WebElement  workFlowRow13Column5;	
		
		

	    // 14 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_14-1']//input")
		public static WebElement workFlowRadioBtnRowFourteen;

		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-6']")
		public static WebElement  workFlowRow14Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-7']")
		public static WebElement  workFlowRow14Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-8']")
		public static WebElement  workFlowRow14Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-9']")
		public static WebElement  workFlowRow14Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_14-10']")
		public static WebElement  workFlowRow14Column5;	
			
			

	    // 15 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_15-1']//input")
		public static WebElement workFlowRadioBtnRowFifteen;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-6']")
		public static WebElement  workFlowRow15Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-7']")
		public static WebElement  workFlowRow15Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-8']")
		public static WebElement  workFlowRow15Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-9']")
		public static WebElement  workFlowRow15Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_15-10']")
		public static WebElement  workFlowRow15Column5;	
		
		

		

	    // 16 Row
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_16-1']//input")
		public static WebElement workFlowRadioBtnRowSixteen;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-6']")
		public static WebElement  workFlowRow16Column1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-7']")
		public static WebElement  workFlowRow16Column2;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-8']")
		public static WebElement  workFlowRow16Column3;
				
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-9']")
		public static WebElement  workFlowRow16Column4;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_popup_col_16-10']")
		public static WebElement  workFlowRow16Column5;	
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr")
		public static List<WebElement>  LinkRowCountCL;	
		

		@FindBy(xpath="//span[@class='icon-financial icon-font1']")
		public static WebElement  finacinalsMenu;
		
		@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
		public static WebElement  financialTransactionSalesMenu;
		
		@FindBy(xpath="//span[contains(text(),'Sales invoice VAT')]")
		public static WebElement  salesInvoiceVATVoucher;
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
		public static WebElement  firstRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
		public static WebElement  secondRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
		public static WebElement  thirdRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[1]")
		public static WebElement  fourthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
		public static WebElement  fifthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[1]")
		public static WebElement  sixthRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[1]")
		public static WebElement  seventhRowIndex;
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[1]")
		public static WebElement  eigthRowIndex;
		
		@FindBy(xpath="//span[@class='icon-delete icon-font8']")
		public static WebElement  deleteRowBtn;
		
		
		@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
		public static WebElement  selectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
		public static WebElement  unSelectRowBtn;
		
		@FindBy(xpath="//span[@class='icon-clone icon-font8']")
		public static WebElement  duplicateRowBtn;
		
		
		@FindBy(xpath="//input[@id='id_header_268435470']")
		public static WebElement  salesInvoiceVATPlaceOFSupply;
		
		@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
	    public static List<WebElement> placeOFSupplyList;
		
		
		@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_popup_body']/tr")
		public static List<WebElement>  LinkRowCount;
		
		 @FindBy(xpath="//input[@id='id_body_33554476']")
	     public static WebElement enter_AQTxt;
		 
		 @FindBy(xpath="//input[@id='id_body_33554477']")
	     public static WebElement enter_FQTxt;
		 
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
		 public static List<WebElement> voucherGridDocNo;
		
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[11]")
		 public static List<WebElement> voucherGridSuspendStatus;
		
		 @FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		 public static List<WebElement> voucherGridIndexChkBox;
		
		 @FindBy(xpath="//a[contains(text(),'Pending Sales Orders')]")
		 public static WebElement  homepagePendingSalesOrders;
		 
		 @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[21]")
		 public static WebElement  select2ndRow_20thColumn;
		
		 @FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[22]")
		 public static WebElement  select2ndRow_21thColumn;
			
			
		 @FindBy(xpath="//span[contains(text(),'Sales Returns')]")
		 public static WebElement  salesReturnsVoucher;
		
		 @FindBy(xpath="//ul[@id='id_transaction_viewcontainer']//li[2]")
		 public static WebElement  pendingSalesInvoicesView;
			
		 @FindBy(xpath="//span[contains(@class,'icon-settings icon-font1')]")
		 public static WebElement settingsMenu;
		 
		 @FindBy(xpath="//div[contains(text(),'Sales invoice VAT')]")
		 public static WebElement draggedSalesInvoicesVAT; 
		
		
		 @FindBy(xpath="//button[contains(text(),'Map')]")
		 public static WebElement MapBtn; 
		 
		 
		 @FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/label")
		 public static List<WebElement> definitionTabChkBoxNameList;
		
		 @FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/input")
		 public static List<WebElement> definitionTabChkBoxList;
		
		 @FindBy(xpath="//tbody[@id='mapWorkflow_GrdId_body']/tr/td[2]")
		 public static List<WebElement> baseFieldList;
		
		 @FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_1']")
		 public static WebElement baseFieldDropDown;
		
		 @FindBy(xpath="//select[@id='mapWorkflow_GrdId_control_heading_ctrl_2']")
		 public static WebElement linkFieldDropDown;
		
		 @FindBy(xpath="//section[@id='page_Content']//tr[1]//td[2]")
		 public static WebElement baseFieldRow1;
		
		 @FindBy(xpath="//h5[contains(text(),'Link Mapping')]")
		 public static WebElement linkMappingLabel; 
		
		 @FindBy(xpath="//div[@class='modal-footer']//button[@class='Fbutton'][contains(text(),'Ok')]")
		 public static WebElement linkMappingOkBtn; 
		
		 @FindBy(xpath="//button[contains(text(),'Close')]")
		 public static WebElement linkMappingCloseBtn; 
		 
		 @FindBy(xpath="//div[@id='Workflow_Mapping_dialog']//tr[1]//td[1]")
		 public static WebElement mapFirstRowIndex;
		
		 @FindBy(xpath="//span[@class='icon-delete icon-font8']")
		 public static WebElement  mapdeleteRowBtn;
		
		 @FindBy(xpath="//div[@class='col-lg-12']//button[@class='Fbutton'][contains(text(),'Ok')]")
		 public static WebElement dwOkBtn; 
		 
		 @FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
		 public static WebElement designWorkFlowsaveBtn; 
		
		 @FindBy(xpath="//i[@class='icon-close icon-font6']")
		 public static WebElement designWorkFlowcloseBtn;
		 
		 
			
			
			
		 @FindBy(xpath="//*[@id='id_body_16777305']")
		 public static WebElement  enterReceiptsVATTaxCode;
		
		 @FindBy(xpath="//input[@id='id_header_268435470']")
		 public static WebElement  placeofSupplyTxt;
		
		 @FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
		 public static List<WebElement>  placeofSupplyList;
		
		
		 @FindBy(xpath="//tbody[@id='id_header_268435471_table_body']/tr/td[2]")
		 public static List<WebElement>  jurisdictionList;
		
		 @FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[3]")
		 public static List<WebElement>  billwiseAdjustBillsDocList;
		
		 @FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[13]")
		 public static List<WebElement>  billwiseAdjustBillsAdjustColumn;
			
		 @FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[2]/input")
		 public static List<WebElement>  billwiseAdjustBillsChkBoxList;

		 @FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[2]/input")
		 public static WebElement  billrefAdjuBills1stChkbox;
		 
		 
		 @FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
		 public static List<WebElement> accountListCount;

    	
		 @FindBy(xpath="//*[@id='id_body_16777346_table_body']/tr/td[2]")
		 public static List<WebElement> taxcodelist;
		 
		 @FindBy(xpath="//*[@id='id_body_16777344_table_body']/tr/td[2]")
		 public static List<WebElement> PDPVATtaxcodelist;
    	
    	
		 @FindBy(xpath="//input[@id='id_body_16777316']")
		 public static WebElement  enterDebitVATTaxCode;
    	               
		 @FindBy(xpath="//input[@id='id_body_16777318']")
		 public static WebElement  enterCreditVATTaxCode;
    	
		 @FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
		 public static List<WebElement> cn_billRefAdjustBillsGrid;
	    	
	    	
		 @FindBy(xpath="//*[@id='2023']/span")
		 public static WebElement  finTransJournalsMenu;
		
		 @FindBy(xpath="//*[@id='doc_TagsTable_body']/tr/td[2]")
		 public static List<WebElement>  masterList;
		
		 @FindBy(xpath="//*[@id='doc_TagsTable_body']/tr/td[1]")
		 public static List<WebElement>  masterIndexList;
		
		@FindBy(xpath="//li[@id='navigationtab2']//span[contains(text(),'Miscellaneous')]")
		public static WebElement settingMiscellaneousTab;
	                  
		@FindBy(xpath="//select[@id='misc_CurrencyAddCurrencyIn']")
		public static WebElement miscAddCurrencyDropdown;

		@FindBy(xpath="//input[@id='misc_currencyInputExchangeRate']")
		public static WebElement miscInputExchangeRateChkbox;

		@FindBy(xpath="//input[@id='misc_currencyInputLocalExchangeRate']")
		public static WebElement miscInputLocalExchangeRateChkbox;

		@FindBy(xpath="//select[@id='misc_arapDueDate']")
		public static WebElement miscDueDateDropdown;
		
		@FindBy(xpath="//span[contains(text(),'Credit Notes VAT')]")
		public static WebElement  creditNotesVATMenu; 
		
		@FindBy(xpath="//span[contains(text(),'Debit Notes VAT')]")
		public static WebElement  debitNotesVatMenu;
	    
	    @FindBy(xpath="//span[@id='Authorizedetails']")
		public static WebElement  debitNotesVatAuthorizedetailsBtn;
	    
	    @FindBy(xpath="//label[contains(text(),'Setting')]")
	    public static WebElement settingBtn;
	    
	    @FindBy(xpath="//span[@id='updateButton']")
	    public static WebElement settingUpdateIcon;

	    @FindBy(xpath="//i[@class='icon-close icon-font6']")
	    public static WebElement settingCloseIcon;
	    	
	    @FindBy(xpath="//input[@id='id_body_39']")
    	public static WebElement  enter_CreditACTxt;
	    
       	@FindBy(xpath="//input[@id='id_body_16777320']")
    	public static WebElement  enterJVVATTaxCode;
		 
			
     	@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
    	public static WebElement  inventoryReportsMenu; 
       	
		@FindBy(xpath="//span[contains(text(),'Item Query')]")
		public static WebElement itemQuery;
		
		@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
		public static WebElement  stockLedger;
		
		@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
		public static WebElement  openingStocksRegister;
		
		@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
		public static WebElement  stockStatement;
				
		@FindBy(xpath="//*[@id='575']/span")
		public static WebElement  stockMovement;
		
		@FindBy(xpath="//*[@id='576']/span")
		public static WebElement  multiLevelStockMovement;
		
		@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
		public static WebElement  virtualStockAnalysis;
		
		@FindBy(xpath="//a[@id='578']")
		public static WebElement  stockValuation;
		
		@FindBy(xpath="//a[@id='656']")
		public static WebElement  stockReportByTag;
		
		@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
		public static WebElement  abcAnalysis;
		
		@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
		public static WebElement  stockAnalysisByBatch;
		
		@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
		public static WebElement  stockAnalysisByRMA;
		
		@FindBy(xpath="//a[@id='540']//span[contains(text(),'Bins Report')]")
		public static WebElement  binsReportMenu;
		
			@FindBy(xpath="//*[@id='587']/span")
			public static WebElement  stockDetailsByBins;
		
			@FindBy(xpath="//*[@id='588']/span")
			public static WebElement  stockBalancesByBins;
			
			@FindBy(xpath="//*[@id='589']/span")
			public static WebElement  stockBalancesByItemByBins;
			
			@FindBy(xpath="//span[contains(text(),'Expired Stock by Bins')]")
			public static WebElement  expiredStockByBins;		
		
		@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
		public static WebElement  stockBalanceByWarehouse;
		
		@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
		public static WebElement  stockAgeingAnalysisMenu;
			
			@FindBy(xpath="//*[@id='582']/span")
			public static WebElement  ageingAnalysis;
			
			@FindBy(xpath="//*[@id='622']/span")
			public static WebElement  ageingAnalysisByBatch;
			
			@FindBy(xpath="//*[@id='623']/span")
			public static WebElement  ageingAnalysisByRMA;		
			
			@FindBy(xpath="//*[@id='591']/span")
			public static WebElement  ageingStockByBins;
					
			@FindBy(xpath="//*[@id='646']/span")
			public static WebElement  ageingByItemByBins;		

		@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
		public static WebElement reorderReport;
		
		@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
		public static WebElement  fastMovingItem;
				
		@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
		public static WebElement  slowMovingItem;
		
		@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
		public static WebElement  peakORLowBalances;
		
		@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
		public static WebElement  bestSellingItem;
	
		@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
		public static WebElement  raiseIndentItemWithLowStock;
		
		@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
		public static WebElement  stockTransferReport;
		
		@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
		public static WebElement  raiseRequestForQuote;
		
		@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
		public static WebElement  stockReservationReport;
		
		@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
		public static WebElement  transactionTypeWiseStockReport;
		
		@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
		public static WebElement  actualConsumptionReport;
		
		@FindBy(xpath="//input[@id='productQuery']")
		public static WebElement iq_ItemTxt;
		
		@FindBy(xpath="//button[contains(text(),'GetStock')]")
		public static WebElement iq_getStockBtn;
		
		@FindBy(xpath="//button[contains(text(),'Customize')]")
		public static WebElement iq_customizeBtn;
		
		@FindBy(xpath="//span[@id='id_productquery_button_clear']")
		public static WebElement iq_clearBtn;
		
		//*[@id="navbarSupportedContent2"]/ul/li[2]/a/i
		@FindBy(xpath="//span[@id='id_productquery_button_close']")
		public static WebElement iq_closeBtn;
		
		@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
		public static WebElement iq_OpeningStockQtyLable;
		
		@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
		public static WebElement iq_PendingPurchaseOrdersLable;
		
		@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
		public static WebElement iq_CurrentStockLable;
		
		@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
		public static WebElement iq_PendingSalesOrdersLable;
		
		@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
		public static WebElement iq_AvgStockRateLable;
		
		@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
		public static WebElement iq_QtytobeOrderedLable;
		
		@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
		public static WebElement iq_BaseUnitLable;
		
		@FindBy(xpath="//label[contains(text(),'Value :')]")
		public static WebElement iq_ValueLable;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
		public static WebElement iq_PurDate;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
		public static WebElement iq_PurVoucherNo;
		
		@FindBy(xpath="//th[contains(text(),'Vendor')]")
		public static WebElement iq_PurVendor;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
		public static WebElement iq_PurQty;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Unit')]")
		public static WebElement iq_PurUnit;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
		public static WebElement iq_PurRate;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
		public static WebElement iq_PurCurrency;
		
		@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity In Base')]")
		public static WebElement iq_PurQtyInBase;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
		public static WebElement iq_SaleDate;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
		public static WebElement iq_SaleVoucherNo;
		
		@FindBy(xpath="//th[contains(text(),'Customer')]")
		public static WebElement iq_SaleCustomer;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
		public static WebElement iq_SaleQty;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Unit')]")
		public static WebElement iq_SaleUnit;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
		public static WebElement iq_SaleRate;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
		public static WebElement iq_SaleCurrency;
		
		@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity In Base')]")
		public static WebElement iq_SaleQtyInBase;
		
		
		@FindBy(xpath="//span[@id='openingStock']")
		public static WebElement iq_OpeningStocks;
		
		@FindBy(xpath="//span[@id='currentStock']")
		public static WebElement iq_CurrentStock;
		
		@FindBy(xpath="//span[@id='avgStockRate']")
		public static WebElement iq_AvgStockRate;
		
		@FindBy(xpath="//span[@id='value']")
		public static WebElement iq_Value;
		
		@FindBy(xpath="//span[@id='iBaseUnit']")
		public static WebElement iq_BaseUnit;
		
		@FindBy(xpath="//span[@id='purchaseOrdered']")
		public static WebElement iq_PendingPurchaseOrders;
		
		@FindBy(xpath="//span[@id='salesOrdered']")
		public static WebElement iq_PendingSalesOrders;
		
		@FindBy(xpath="//span[@id='quantityToBeOrdered']")
		public static WebElement iq_QtyToBeOrdered;
		
		
		// Purchase Table
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
		public static WebElement pur1strow_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
		public static WebElement pur1strow_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
		public static WebElement pur1strow_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
		public static WebElement pur1strow_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
		public static WebElement pur1strow_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
		public static WebElement pur1strow_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[7]")
		public static WebElement pur1strow_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[8]")
		public static WebElement pur1strow_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[9]")
		public static WebElement pur1strow_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[10]")
		public static WebElement pur1strow_10thColumn;
		
		
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
		public static WebElement pur2ndrow_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
		public static WebElement pur2ndrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
		public static WebElement pur2ndrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
		public static WebElement pur2ndrow_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
		public static WebElement pur2ndrow_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
		public static WebElement pur2ndrow_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[7]")
		public static WebElement pur2ndrow_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[8]")
		public static WebElement pur2ndrow_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[9]")
		public static WebElement pur2ndrow_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[10]")
		public static WebElement pur2ndrow_10thColumn;
		
		
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
		public static WebElement pur7thRow_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
		public static WebElement pur3rdrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
		public static WebElement pur3rdrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
		public static WebElement pur3rdrow_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
		public static WebElement pur3rdrow_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
		public static WebElement pur3rdrow_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[7]")
		public static WebElement pur3rdrow_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[8]")
		public static WebElement pur3rdrow_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[9]")
		public static WebElement pur3rdrow_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[10]")
		public static WebElement pur3rdrow_10thColumn;
		
		
		// 4TH
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[1]")
		public static WebElement pur4throw_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[2]")
		public static WebElement pur4throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[3]")
		public static WebElement pur4throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[4]")
		public static WebElement pur4throw_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[5]")
		public static WebElement pur4throw_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[6]")
		public static WebElement pur4throw_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[7]")
		public static WebElement pur4throw_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[8]")
		public static WebElement pur4throw_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[9]")
		public static WebElement pur4throw_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[10]")
		public static WebElement pur4throw_10thColumn;
		
		// 5TH
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[1]")
		public static WebElement pur5throw_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[2]")
		public static WebElement pur5throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[3]")
		public static WebElement pur5throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[4]")
		public static WebElement pur5throw_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[5]")
		public static WebElement pur5throw_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[6]")
		public static WebElement pur5throw_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[7]")
		public static WebElement pur5throw_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[8]")
		public static WebElement pur5throw_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[9]")
		public static WebElement pur5throw_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[10]")
		public static WebElement pur5throw_10thColumn;
		
		// 6TH
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[1]")
		public static WebElement pur6throw_1stColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[2]")
		public static WebElement pur6throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[3]")
		public static WebElement pur6throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[4]")
		public static WebElement pur6throw_4thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[5]")
		public static WebElement pur6throw_5thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[6]")
		public static WebElement pur6throw_6thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[7]")
		public static WebElement pur6throw_7thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[8]")
		public static WebElement pur6throw_8thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[9]")
		public static WebElement pur6throw_9thColumn;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[10]")
		public static WebElement pur6throw_10thColumn;
		
		
		@FindBy(xpath="//td[contains(text(),'Quantity Purchased Till Date:')]")
		public static WebElement qtyPurchasedTillDate;
		
		@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
		public static WebElement purTotalWa;
				
				
		// Sales Table
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
		public static WebElement sal1strow_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
		public static WebElement sal1strow_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
		public static WebElement sal1strow_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
		public static WebElement sal1strow_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
		public static WebElement sal1strow_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
		public static WebElement sal1strow_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[7]")
		public static WebElement sal1strow_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[8]")
		public static WebElement sal1strow_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[9]")
		public static WebElement sal1strow_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[10]")
		public static WebElement sal1strow_10thColumn;
		
		// 2nd
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
		public static WebElement sal2ndrow_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
		public static WebElement sal2ndrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
		public static WebElement sal2ndrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
		public static WebElement sal2ndrow_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
		public static WebElement sal2ndrow_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
		public static WebElement sal2ndrow_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[7]")
		public static WebElement sal2ndrow_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[8]")
		public static WebElement sal2ndrow_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[9]")
		public static WebElement sal2ndrow_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[10]")
		public static WebElement sal2ndrow_10thColumn;
		
		// 3rd
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
		public static WebElement sal3rdrow_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
		public static WebElement sal3rdrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
		public static WebElement sal3rdrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
		public static WebElement sal3rdrow_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
		public static WebElement sal3rdrow_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[6]")
		public static WebElement sal3rdrow_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[7]")
		public static WebElement sal3rdrow_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[8]")
		public static WebElement sal3rdrow_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[9]")
		public static WebElement sal3rdrow_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[10]")
		public static WebElement sal3rdrow_10thColumn;
		
		// 4th
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[1]")
		public static WebElement sal4throw_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[2]")
		public static WebElement sal4throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[3]")
		public static WebElement sal4throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[4]")
		public static WebElement sal4throw_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[5]")
		public static WebElement sal4throw_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[6]")
		public static WebElement sal4throw_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[7]")
		public static WebElement sal4throw_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[8]")
		public static WebElement sal4throw_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[9]")
		public static WebElement sal4throw_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[10]")
		public static WebElement sal4throw_10thColumn;
		
		//5th
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[1]")
		public static WebElement sal5throw_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[2]")
		public static WebElement sal5throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[3]")
		public static WebElement sal5throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[4]")
		public static WebElement sal5throw_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[5]")
		public static WebElement sal5throw_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[6]")
		public static WebElement sal5throw_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[7]")
		public static WebElement sal5throw_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[8]")
		public static WebElement sal5throw_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[9]")
		public static WebElement sal5throw_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[10]")
		public static WebElement sal5throw_10thColumn;
		
		//6th
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[1]")
		public static WebElement sal6throw_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[2]")
		public static WebElement sal6throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[3]")
		public static WebElement sal6throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[4]")
		public static WebElement sal6throw_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[5]")
		public static WebElement sal6throw_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[6]")
		public static WebElement sal6throw_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[7]")
		public static WebElement sal6throw_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[8]")
		public static WebElement sal6throw_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[9]")
		public static WebElement sal6throw_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[10]")
		public static WebElement sal6throw_10thColumn;
		
		// 7th
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[1]")
		public static WebElement sal7throw_1stColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[2]")
		public static WebElement sal7throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[3]")
		public static WebElement sal7throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[4]")
		public static WebElement sal7throw_4thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[5]")
		public static WebElement sal7throw_5thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[6]")
		public static WebElement sal7throw_6thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[7]")
		public static WebElement sal7throw_7thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[8]")
		public static WebElement sal7throw_8thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[9]")
		public static WebElement sal7throw_9thColumn;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[10]")
		public static WebElement sal7throw_10thColumn;

		
		@FindBy(xpath="//td[contains(text(),'Quantity Sold Till Date:')]")
		public static WebElement qtySoldTillDate;
		
		@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
		public static WebElement salTotalWa;
				
		
		
		// Warehouse Table
		
		@FindBy(xpath="//div[contains(text(),'Warehouse')]")
		public static WebElement BalancebyWareHouselable;
		
		@FindBy(xpath="//div[@id='PrdtDetails']//div[1]//div[1]//span[1]")
		public static WebElement BalancebyWareHouseExpandBtn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[1]/td[2]")
		public static WebElement wh1strow_2ndColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[1]/td[3]")
		public static WebElement wh1strow_3rdColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[1]/td[4]")
		public static WebElement wh1strow_4thColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[1]/td[5]")
		public static WebElement wh1strow_5thColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[1]/td[6]")
		public static WebElement wh1strow_6thColumn;
		
		
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[2]")
		public static WebElement wh2ndrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[3]")
		public static WebElement wh2ndrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[4]")
		public static WebElement wh2ndrow_4thColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[5]")
		public static WebElement wh2ndrow_5thColumn;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[6]")
		public static WebElement wh2ndrow_6thColumn;
		
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[3]/td[2]")
		public static WebElement whStockTotal;
		
		@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[3]/td[4]")
		public static WebElement whValueTotal;
		
		
		// Selling rate and buying rates
		
		@FindBy(xpath="//div[contains(text(),'Selling rates and Buying rates')]")
		public static WebElement sellingAndBuyingRateslable;
		
		@FindBy(xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
		public static WebElement sellingAndBuyingRatesExpandBtn;
		
		// 1st 
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
		public static WebElement sbr1strow_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
		public static WebElement sbr1strow_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
		public static WebElement sbr1strow_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
		public static WebElement sbr1strow_5thColumn;
		
		// 2nd 
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
		public static WebElement sbr2ndrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
		public static WebElement sbr2ndrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
		public static WebElement sbr2ndrow_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
		public static WebElement sbr2ndrow_5thColumn;
		
		//3rd
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
		public static WebElement sbr3rdrow_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
		public static WebElement sbr3rdrow_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
		public static WebElement sbr3rdrow_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
		public static WebElement sbr3rdrow_5thColumn;
		
		// 4th
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
		public static WebElement sbr4throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
		public static WebElement sbr4throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
		public static WebElement sbr4throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
		public static WebElement sbr4throw_5thColumn;
		
		
		
		// 5th
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
		public static WebElement sbr5throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
		public static WebElement sbr5throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
		public static WebElement sbr5throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
		public static WebElement sbr5throw_5thColumn;
			
			
		// 6th
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
		public static WebElement sbr6throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
		public static WebElement sbr6throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
		public static WebElement sbr6throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
		public static WebElement sbr6throw_5thColumn;
			
		
		
		// 7th

		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
		public static WebElement sbr7throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
		public static WebElement sbr7throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
		public static WebElement sbr7throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
		public static WebElement sbr7throw_5thColumn;
			
			
		// 8th
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
		public static WebElement sbr8throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
		public static WebElement sbr8throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
		public static WebElement sbr8throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
		public static WebElement sbr8throw_5thColumn;
			
			
		
		// 9th
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
		public static WebElement sbr9throw_2ndColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
		public static WebElement sbr9throw_3rdColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
		public static WebElement sbr9throw_4thColumn;
		
		@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
		public static WebElement sbr9throw_5thColumn;
			
			
		// 10th
		
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
			public static WebElement sbr10throw_2ndColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
			public static WebElement sbr10throw_3rdColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
			public static WebElement sbr10throw_4thColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
			public static WebElement sbr10throw_5thColumn;
			
		// 11th
		
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
			public static WebElement sbr11throw_2ndColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
			public static WebElement sbr11throw_3rdColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
			public static WebElement sbr11throw_4thColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
			public static WebElement sbr11throw_5thColumn;
			
		// 12th
		
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
			public static WebElement sbr12throw_2ndColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
			public static WebElement sbr12throw_3rdColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
			public static WebElement sbr12throw_4thColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
			public static WebElement sbr12throw_5thColumn;
			
		// 13th
		
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
			public static WebElement sbr13throw_2ndColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
			public static WebElement sbr13throw_3rdColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
			public static WebElement sbr13throw_4thColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
			public static WebElement sbr13throw_5thColumn;
		
		// 14th
		
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
			public static WebElement sbr14throw_2ndColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
			public static WebElement sbr14throw_3rdColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
			public static WebElement sbr14throw_4thColumn;
			
			@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
			public static WebElement sbr14throw_5thColumn;
       	
       	
       	
       	
       	
       	
       	public boolean checkItemQueryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
    	{
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));1
    		inventoryMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
    		inventoryReportsMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemQuery));
    		itemQuery.click();
    		
    		Thread.sleep(2000);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_ItemTxt));
    		iq_ItemTxt.click();
    		iq_ItemTxt.sendKeys("BR COGS ITEM");
    		Thread.sleep(2000);
    		iq_ItemTxt.sendKeys(Keys.TAB);
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_getStockBtn));
    		iq_getStockBtn.click();
    		
    		Thread.sleep(5000);
    		
    		String actiq_OpeningStocks				=iq_OpeningStocks.getText();
    		String actiq_PendingPurchaseOrders		=iq_PendingPurchaseOrders.getText();
    		String actiq_CurrentStock				=iq_CurrentStock.getText();
    		String actiq_PendingSalesOrders			=iq_PendingSalesOrders.getText();
    		String actiq_AvgStockRate				=iq_AvgStockRate.getText();
    		String actiq_QtyToBeOrdered				=iq_QtyToBeOrdered.getText();
    		String actiq_Value						=iq_Value.getText();
    		String actiq_BaseUnit     				=iq_BaseUnit.getText();
    		
    		String expiq_OpeningStocks				="36.00";
    		String expiq_PendingPurchaseOrders		="0.00";
    		String expiq_CurrentStock				="62.00";
    		String expiq_PendingSalesOrders			="0.00";
    		String expiq_AvgStockRate				="0.69";
    		String expiq_QtyToBeOrdered				="0.00";
    		String expiq_Value						="42.75";
    		String expiq_BaseUnit     				="Pcs";
    		
    		
    		// Recent Stock Transaction -Purchases
    		
    		String actpurVoucherNoR1	=pur1strow_2ndColumn.getText();
    		String actpurVendorR1		=pur1strow_3rdColumn.getText();
    		String actpurQtyR1			=pur1strow_4thColumn.getText();
    		String actpurUnitR1			=pur1strow_5thColumn.getText();
    		String actpurRateR1			=pur1strow_6thColumn.getText();
    		String actpurCurrencyR1		=pur1strow_7thColumn.getText();
    		String actpurQtyInBaseR1	=pur1strow_8thColumn.getText();
    		
    		String actpurVoucherNoR2	=pur2ndrow_2ndColumn.getText();
    		String actpurVendorR2		=pur2ndrow_3rdColumn.getText();
    		String actpurQtyR2			=pur2ndrow_4thColumn.getText();
    		String actpurUnitR2			=pur2ndrow_5thColumn.getText();
    		String actpurRateR2			=pur2ndrow_6thColumn.getText();
    		String actpurCurrencyR2		=pur2ndrow_7thColumn.getText();
    		String actpurQtyInBaseR2	=pur2ndrow_8thColumn.getText();
    		
    		String actpurTotalWa		=purTotalWa.getText();
    		
    		// Expected
    		
    		String exppurVoucherNoR1	="NDT57:SU/IND/TEXT2";
    		String exppurVendorR1		="Vendor B";
    		String exppurQtyR1			="1.00";
    		String exppurUnitR1			="Dozs";
    		String exppurRateR1			="10.00";
    		String exppurCurrencyR1		="Indian Rupees";
    		String exppurQtyInBaseR1	="12.0000000000";
    		
    		String exppurVoucherNoR2	="NDT57:SU/IND/TEXT2";
    		String exppurVendorR2		="Vendor B";
    		String exppurQtyR2			="2.00";
    		String exppurUnitR2			="Dozs";
    		String exppurRateR2			="10.00";
    		String exppurCurrencyR2		="Indian Rupees";
    		String exppurQtyInBaseR2	="24.0000000000";
    		
    		String exppurTotalWa		="3.00";
    		
    		getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
    		
    		
    		// Recent Stock Transaction -Sales
    		
    		String actsalVoucherNoR1	=sal1strow_2ndColumn.getText();
    		String actsalCustomerR1		=sal1strow_3rdColumn.getText();
    		String actsalQtyR1			=sal1strow_4thColumn.getText();
    		String actsalUnitR1			=sal1strow_5thColumn.getText();
    		String actsalRateR1			=sal1strow_6thColumn.getText();
    		String actsalCurrencyR1		=sal1strow_7thColumn.getText();
    		String actsalQtyInBaseR1	=sal1strow_8thColumn.getText();
    		
    		String actsalVoucherNoR2	=sal2ndrow_2ndColumn.getText();
    		String actsalCustomerR2		=sal2ndrow_3rdColumn.getText();
    		String actsalQtyR2			=sal2ndrow_4thColumn.getText();
    		String actsalUnitR2			=sal2ndrow_5thColumn.getText();
    		String actsalRateR2			=sal2ndrow_6thColumn.getText();
    		String actsalCurrencyR2		=sal2ndrow_7thColumn.getText();
    		String actsalQtyInBaseR2	=sal2ndrow_8thColumn.getText();
    		
    		String actsalTotalWa		=salTotalWa.getText();

    		// Expected
    		String expsalVoucherNoR1	="NDT50:1";
    		String expsalCustomerR1		="Customer A";
    		String expsalQtyR1			="10.00";
    		String expsalUnitR1			="Pcs";
    		String expsalRateR1			="10.00";
    		String expsalCurrencyR1		="Indian Rupees";
    		String expsalQtyInBaseR1	="10.00000000";
    		
    		String expsalVoucherNoR2	="NDT50:7";
    		String expsalCustomerR2 	="Customer A";
    		String expsalQtyR2			="12.00";
    		String expsalUnitR2			="Pcs";
    		String expsalRateR2			="10.00";
    		String expsalCurrencyR2		="Indian Rupees";
    		String expsalQtyInBaseR2	="12.00000000";
    		
    		String expsalTotalWa		="22.00";
    		
    		
    		// WareHouse Table
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BalancebyWareHouseExpandBtn));
    		BalancebyWareHouseExpandBtn.click();
    		
    		Thread.sleep(3000);
    		
    		getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
    		
    		
    		String actwareHouseR1		=wh1strow_2ndColumn.getText();
    		String actstockR1			=wh1strow_3rdColumn.getText();
    		String actrateR1			=wh1strow_4thColumn.getText();
    		String actvalueR1			=wh1strow_5thColumn.getText();
    		
    		String acttotalStock		=wh2ndrow_2ndColumn.getText();
    		String acttotalValue		=wh2ndrow_4thColumn.getText();
    		
    		// Expected
    		String expwareHouseR1		="HYDERABAD";
    		String expstockR1			="62.00";
    		String exprateR1			="12.00";
    		String expvalueR1			="50.00";
    		
    		String exptotalStock		="62.00";
    		String exptotalValue		="12.00";
    		
    		
    		
    		
    		
    		// Seller And Buying rates Table
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sellingAndBuyingRatesExpandBtn));
    		sellingAndBuyingRatesExpandBtn.click();
    		
    		Thread.sleep(2000);
    		
    		getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
    		
    		Thread.sleep(2000);
    		
    		String actsellingRateR1		=sbr1strow_2ndColumn.getText();
    		String actsellingValueR1	=sbr1strow_3rdColumn.getText();
    		String actbuyingRateR1		=sbr1strow_4thColumn.getText();
    		String actbuyingValueR1		=sbr1strow_5thColumn.getText();
    		
    		String actsellingRateR2		=sbr2ndrow_2ndColumn.getText();
    		String actsellingValueR2	=sbr2ndrow_3rdColumn.getText();
    		String actbuyingRateR2		=sbr2ndrow_4thColumn.getText();
    		String actbuyingValueR2		=sbr2ndrow_5thColumn.getText();
    		
    		String actsellingRateR3		=sbr3rdrow_2ndColumn.getText();
    		String actsellingValueR3	=sbr3rdrow_3rdColumn.getText();
    		String actbuyingRateR3		=sbr3rdrow_4thColumn.getText();
    		String actbuyingValueR3		=sbr3rdrow_5thColumn.getText();
    		
    		String actsellingRateR4		=sbr4throw_2ndColumn.getText();
    		String actsellingValueR4	=sbr4throw_3rdColumn.getText();
    		String actbuyingRateR4		=sbr4throw_4thColumn.getText();
    		String actbuyingValueR4		=sbr4throw_5thColumn.getText();
    		
    		String actsellingRateR5		=sbr5throw_2ndColumn.getText();
    		String actsellingValueR5	=sbr5throw_3rdColumn.getText();
    		String actbuyingRateR5		=sbr5throw_4thColumn.getText();
    		String actbuyingValueR5		=sbr5throw_5thColumn.getText();
    		
    		String actsellingRateR6		=sbr6throw_2ndColumn.getText();
    		String actsellingValueR6	=sbr6throw_3rdColumn.getText();
    		String actbuyingRateR6		=sbr6throw_4thColumn.getText();
    		String actbuyingValueR6		=sbr6throw_5thColumn.getText();
    		
    		String actsellingRateR7		=sbr7throw_2ndColumn.getText();
    		String actsellingValueR7	=sbr7throw_3rdColumn.getText();
    		String actbuyingRateR7		=sbr7throw_4thColumn.getText();
    		String actbuyingValueR7		=sbr7throw_5thColumn.getText();
    		
    		String actsellingRateR8		=sbr8throw_2ndColumn.getText();
    		String actsellingValueR8	=sbr8throw_3rdColumn.getText();
    		String actbuyingRateR8		=sbr8throw_4thColumn.getText();
    		String actbuyingValueR8		=sbr8throw_5thColumn.getText();
    		
    		String actsellingRateR9		=sbr9throw_2ndColumn.getText();
    		String actsellingValueR9	=sbr9throw_3rdColumn.getText();
    		String actbuyingRateR9		=sbr9throw_4thColumn.getText();
    		String actbuyingValueR9		=sbr9throw_5thColumn.getText();
    		
    		String actsellingRateR10	=sbr10throw_2ndColumn.getText();
    		String actsellingValueR10	=sbr10throw_3rdColumn.getText();
    		String actbuyingRateR10		=sbr10throw_4thColumn.getText();
    		String actbuyingValueR10	=sbr10throw_5thColumn.getText();
    		
    		String actsellingRateR11	=sbr11throw_2ndColumn.getText();
    		String actsellingValueR11	=sbr11throw_3rdColumn.getText();
    		String actbuyingRateR11		=sbr11throw_4thColumn.getText();
    		String actbuyingValueR11	=sbr11throw_5thColumn.getText();
    		
    		String actsellingRateR12	=sbr12throw_2ndColumn.getText();
    		String actsellingValueR12	=sbr12throw_3rdColumn.getText();
    		String actbuyingRateR12		=sbr12throw_4thColumn.getText();
    		String actbuyingValueR12	=sbr12throw_5thColumn.getText();
    		
    		String actsellingRateR13	=sbr13throw_2ndColumn.getText();
    		String actsellingValueR13	=sbr13throw_3rdColumn.getText();
    		String actbuyingRateR13		=sbr13throw_4thColumn.getText();
    		String actbuyingValueR13	=sbr13throw_5thColumn.getText();
    		
    		String actsellingRateR14	=sbr14throw_2ndColumn.getText();
    		String actsellingValueR14	=sbr14throw_3rdColumn.getText();
    		String actbuyingRateR14		=sbr14throw_4thColumn.getText();
    		String actbuyingValueR14	=sbr14throw_5thColumn.getText();
    		
    		
    		// Expected
    		
    		String expsellingRateR1		="So";
    		String expsellingValueR1	="10.00";
    		String expbuyingRateR1		="Po";
    		String expbuyingValueR1		="9.00";

    		String expsellingRateR2		="St";
    		String expsellingValueR2	="10.10";
    		String expbuyingRateR2		="Pt";
    		String expbuyingValueR2		="9.10";
    		
    		String expsellingRateR3		="Val 2";
    		String expsellingValueR3	="10.20";
    		String expbuyingRateR3		="Val 2";
    		String expbuyingValueR3		="9.20";
    		
    		String expsellingRateR4		="Val 3";
    		String expsellingValueR4	="0.00";
    		String expbuyingRateR4		="Val 3";
    		String expbuyingValueR4		="0.00";
    		
    		String expsellingRateR5		="Val 4";
    		String expsellingValueR5	="0.00";
    		String expbuyingRateR5		="Val 4";
    		String expbuyingValueR5		="0.00";
    		
    		String expsellingRateR6		="Val 5";
    		String expsellingValueR6	="0.00";
    		String expbuyingRateR6		="Val 5";
    		String expbuyingValueR6		="0.00";
    		
    		String expsellingRateR7		="Val 6";
    		String expsellingValueR7	="0.00";
    		String expbuyingRateR7		="Val 6";
    		String expbuyingValueR7		="0.00";
    		
    		String expsellingRateR8		="Val 7";
    		String expsellingValueR8	="0.00";
    		String expbuyingRateR8		="Val 7";
    		String expbuyingValueR8		="0.00";

    		String expsellingRateR9		="Val 8";
    		String expsellingValueR9	="0.00";
    		String expbuyingRateR9		="Val 8";
    		String expbuyingValueR9		="0.00";
    		
    		String expsellingRateR10	="Val 9";
    		String expsellingValueR10	="0.00";
    		String expbuyingRateR10		="Val 9";
    		String expbuyingValueR10	="0.00";
    		
    		String expsellingRateR11	="Val 10";
    		String expsellingValueR11	="0.00";
    		String expbuyingRateR11		="Val 10";
    		String expbuyingValueR11	="0.00";
    		
    		String expsellingRateR12	="Val 11";
    		String expsellingValueR12	="0.00";
    		String expbuyingRateR12		="Val 11";
    		String expbuyingValueR12	="0.00";
    		
    		String expsellingRateR13	="Val 12";
    		String expsellingValueR13	="0.00";
    		String expbuyingRateR13		="Val 12";
    		String expbuyingValueR13	="0.00";
    		
    		String expsellingRateR14	="Val 13";
    		String expsellingValueR14	="0.00";
    		String expbuyingRateR14		="Val 13";
    		String expbuyingValueR14	="0.00";
    		
    		
    		System.out.println("************************************checkItemQueryOfBatchWAItem*************************************");
    		
    		System.out.println("iq_OpeningStocks     		 :   "+actiq_OpeningStocks					+" Value Expected : "+expiq_OpeningStocks);
    		System.out.println("iq_PendingPurchaseOrders     :   "+actiq_PendingPurchaseOrders			+" Value Expected : "+expiq_PendingPurchaseOrders);
    		System.out.println("iq_CurrentStock     		 :   "+actiq_CurrentStock					+" Value Expected : "+expiq_CurrentStock);
    		System.out.println("iq_PendingSalesOrders     	 :   "+actiq_PendingSalesOrders				+" Value Expected : "+expiq_PendingSalesOrders);
    		System.out.println("iq_AvgStockRate     		 :   "+actiq_AvgStockRate					+" Value Expected : "+expiq_AvgStockRate);
    		System.out.println("iq_QtyToBeOrdered     		 :   "+actiq_QtyToBeOrdered					+" Value Expected : "+expiq_QtyToBeOrdered);
    		System.out.println("iq_Value     				 :   "+actiq_Value							+" Value Expected : "+expiq_Value);
    		System.out.println("iq_BaseUnit     			 :   "+actiq_BaseUnit						+" Value Expected : "+expiq_BaseUnit);
    		
    		System.out.println("********************* Purchase ******************");
    		
    		System.out.println("purVoucherNoR1     			 :   "+actpurVoucherNoR1					+" Value Expected : "+exppurVoucherNoR1);
    		System.out.println("purVendorR1     			 :   "+actpurVendorR1						+" Value Expected : "+exppurVendorR1);
    		System.out.println("purQtyR1     				 :   "+actpurQtyR1							+" Value Expected : "+exppurQtyR1);
    		System.out.println("purUnitR1     				 :   "+actpurUnitR1							+" Value Expected : "+exppurUnitR1);
    		System.out.println("purRateR1     				 :   "+actpurRateR1							+" Value Expected : "+exppurRateR1);
    		System.out.println("purCurrencyR1     			 :   "+actpurCurrencyR1						+" Value Expected : "+exppurCurrencyR1);
    		System.out.println("purQtyInBaseR1     			 :   "+actpurQtyInBaseR1					+" Value Expected : "+exppurQtyInBaseR1);
    		
    		System.out.println("purVoucherNoR2     			 :   "+actpurVoucherNoR2					+" Value Expected : "+exppurVoucherNoR2);
    		System.out.println("purVendorR2     			 :   "+actpurVendorR2						+" Value Expected : "+exppurVendorR2);
    		System.out.println("purQtyR2     				 :   "+actpurQtyR2							+" Value Expected : "+exppurQtyR2);
    		System.out.println("purUnitR2     				 :   "+actpurUnitR2							+" Value Expected : "+exppurUnitR2);
    		System.out.println("purRateR2     				 :   "+actpurRateR2							+" Value Expected : "+exppurRateR2);
    		System.out.println("purCurrencyR2     			 :   "+actpurCurrencyR2						+" Value Expected : "+exppurCurrencyR2);
    		System.out.println("purQtyInBaseR2     			 :   "+actpurQtyInBaseR2					+" Value Expected : "+exppurQtyInBaseR2);
    		
    		System.out.println("purTotalWa                   :   "+actpurTotalWa                        +" Value expected : "+exppurTotalWa);
    		
    		
    		
    		System.out.println("********************* Sales ******************");
    		
    		System.out.println("salVoucherNoR1     			 :   "+actsalVoucherNoR1					+" Value Expected : "+expsalVoucherNoR1);
    		System.out.println("salCustomerR1     			 :   "+actsalCustomerR1						+" Value Expected : "+expsalCustomerR1);
    		System.out.println("salQtyR1     				 :   "+actsalQtyR1							+" Value Expected : "+expsalQtyR1);
    		System.out.println("salUnitR1     				 :   "+actsalUnitR1							+" Value Expected : "+expsalUnitR1);
    		System.out.println("salRateR1     				 :   "+actsalRateR1							+" Value Expected : "+expsalRateR1);
    		System.out.println("salCurrencyR1     			 :   "+actsalCurrencyR1						+" Value Expected : "+expsalCurrencyR1);
    		System.out.println("salQtyInBaseR1     			 :   "+actsalQtyInBaseR1					+" Value Expected : "+expsalQtyInBaseR1);
    		
    		System.out.println("salVoucherNoR2     			 :   "+actsalVoucherNoR2					+" Value Expected : "+expsalVoucherNoR2);
    		System.out.println("salCustomerR2     			 :   "+actsalCustomerR2						+" Value Expected : "+expsalCustomerR2);
    		System.out.println("salQtyR2     				 :   "+actsalQtyR2							+" Value Expected : "+expsalQtyR2);
    		System.out.println("salUnitR2     				 :   "+actsalUnitR2							+" Value Expected : "+expsalUnitR2);
    		System.out.println("salRateR2     				 :   "+actsalRateR2							+" Value Expected : "+expsalRateR2);
    		System.out.println("salCurrencyR2     			 :   "+actsalCurrencyR2						+" Value Expected : "+expsalCurrencyR2);
    		System.out.println("salQtyInBaseR2     			 :   "+actsalQtyInBaseR2					+" Value Expected : "+expsalQtyInBaseR2);
    		
    		System.out.println("salTotalWa                   :   "+actsalTotalWa                        +" Value expected : "+expsalTotalWa);
    		
    		
    		System.out.println("********************* WareHouse ******************");
    		
    		System.out.println("wareHouseR1     			 :   "+actwareHouseR1						+" Value Expected : "+expwareHouseR1);
    		System.out.println("stockR1     				 :   "+actstockR1							+" Value Expected : "+expstockR1);
    		System.out.println("rateR1     				 	 :   "+actrateR1							+" Value Expected : "+exprateR1);
    		System.out.println("valueR1     				 :   "+actvalueR1							+" Value Expected : "+expvalueR1);
    		
    		System.out.println("wareHouseR2     			 :   "+actwareHouseR2						+" Value Expected : "+expwareHouseR2);
    		System.out.println("stockR2     				 :   "+actstockR2							+" Value Expected : "+expstockR2);
    		System.out.println("rateR2     				 	 :   "+actrateR2							+" Value Expected : "+exprateR2);
    		System.out.println("valueR2     				 :   "+actvalueR2							+" Value Expected : "+expvalueR2);
    		
    		System.out.println("totalStock     				 :   "+acttotalStock						+" Value Expected : "+exptotalStock);
    		System.out.println("totalValue     				 :   "+acttotalValue						+" Value Expected : "+exptotalValue);
    		
    		
    		System.out.println("*************************Selling and Buying rates********************");
    		
    		System.out.println("sellingRateR1     			 :   "+actsellingRateR1						+" Value Expected : "+expsellingRateR1);
    		System.out.println("sellingValueR1  			 :   "+actsellingValueR1					+" Value Expected : "+expsellingValueR1);
    		System.out.println("buyingRateR1     			 :   "+actbuyingRateR1						+" Value Expected : "+expbuyingRateR1);
    		System.out.println("buyingValueR1     			 :   "+actbuyingValueR1						+" Value Expected : "+expbuyingValueR1);
    		
    		System.out.println("sellingRateR2     			 :   "+actsellingRateR2						+" Value Expected : "+expsellingRateR2);
    		System.out.println("sellingValueR2  			 :   "+actsellingValueR2					+" Value Expected : "+expsellingValueR2);
    		System.out.println("buyingRateR2     			 :   "+actbuyingRateR2						+" Value Expected : "+expbuyingRateR2);
    		System.out.println("buyingValueR2     			 :   "+actbuyingValueR2						+" Value Expected : "+expbuyingValueR2);
    		
    		System.out.println("sellingRateR3     			 :   "+actsellingRateR3						+" Value Expected : "+expsellingRateR3);
    		System.out.println("sellingValueR3  			 :   "+actsellingValueR3					+" Value Expected : "+expsellingValueR3);
    		System.out.println("buyingRateR3     			 :   "+actbuyingRateR3						+" Value Expected : "+expbuyingRateR3);
    		System.out.println("buyingValueR3     			 :   "+actbuyingValueR3						+" Value Expected : "+expbuyingValueR3);
    		
    		System.out.println("sellingRateR4     			 :   "+actsellingRateR4						+" Value Expected : "+expsellingRateR4);
    		System.out.println("sellingValueR4  			 :   "+actsellingValueR4					+" Value Expected : "+expsellingValueR4);
    		System.out.println("buyingRateR4     			 :   "+actbuyingRateR4						+" Value Expected : "+expbuyingRateR4);
    		System.out.println("buyingValueR4     			 :   "+actbuyingValueR4						+" Value Expected : "+expbuyingValueR4);
    		
    		System.out.println("sellingRateR5     			 :   "+actsellingRateR5						+" Value Expected : "+expsellingRateR5);
    		System.out.println("sellingValueR5  			 :   "+actsellingValueR5					+" Value Expected : "+expsellingValueR5);
    		System.out.println("buyingRateR5     			 :   "+actbuyingRateR5						+" Value Expected : "+expbuyingRateR5);
    		System.out.println("buyingValueR5     			 :   "+actbuyingValueR5						+" Value Expected : "+expbuyingValueR5);
    		
    		System.out.println("sellingRateR6     			 :   "+actsellingRateR6						+" Value Expected : "+expsellingRateR6);
    		System.out.println("sellingValueR6  			 :   "+actsellingValueR6					+" Value Expected : "+expsellingValueR6);
    		System.out.println("buyingRateR6     			 :   "+actbuyingRateR6						+" Value Expected : "+expbuyingRateR6);
    		System.out.println("buyingValueR6     			 :   "+actbuyingValueR6						+" Value Expected : "+expbuyingValueR6);
    		
    		System.out.println("sellingRateR7     			 :   "+actsellingRateR7						+" Value Expected : "+expsellingRateR7);
    		System.out.println("sellingValueR7  			 :   "+actsellingValueR7					+" Value Expected : "+expsellingValueR7);
    		System.out.println("buyingRateR7     			 :   "+actbuyingRateR7						+" Value Expected : "+expbuyingRateR7);
    		System.out.println("buyingValueR7     			 :   "+actbuyingValueR7						+" Value Expected : "+expbuyingValueR7);
    		
    		System.out.println("sellingRateR8     			 :   "+actsellingRateR8						+" Value Expected : "+expsellingRateR8);
    		System.out.println("sellingValueR8  			 :   "+actsellingValueR8					+" Value Expected : "+expsellingValueR8);
    		System.out.println("buyingRateR8     			 :   "+actbuyingRateR8						+" Value Expected : "+expbuyingRateR8);
    		System.out.println("buyingValueR8     			 :   "+actbuyingValueR8						+" Value Expected : "+expbuyingValueR8);
    		
    		System.out.println("sellingRateR9     			 :   "+actsellingRateR9						+" Value Expected : "+expsellingRateR9);
    		System.out.println("sellingValueR9  			 :   "+actsellingValueR9					+" Value Expected : "+expsellingValueR9);
    		System.out.println("buyingRateR9     			 :   "+actbuyingRateR9						+" Value Expected : "+expbuyingRateR9);
    		System.out.println("buyingValueR9     			 :   "+actbuyingValueR9						+" Value Expected : "+expbuyingValueR9);
    		
    		System.out.println("sellingRateR10     			 :   "+actsellingRateR10					+" Value Expected : "+expsellingRateR10);
    		System.out.println("sellingValueR10  			 :   "+actsellingValueR10					+" Value Expected : "+expsellingValueR10);
    		System.out.println("buyingRateR10     			 :   "+actbuyingRateR10						+" Value Expected : "+expbuyingRateR10);
    		System.out.println("buyingValueR10     			 :   "+actbuyingValueR10					+" Value Expected : "+expbuyingValueR10);
    		
    		System.out.println("sellingRateR11     			 :   "+actsellingRateR11					+" Value Expected : "+expsellingRateR11);
    		System.out.println("sellingValueR11  			 :   "+actsellingValueR11					+" Value Expected : "+expsellingValueR11);
    		System.out.println("buyingRateR11     			 :   "+actbuyingRateR11						+" Value Expected : "+expbuyingRateR11);
    		System.out.println("buyingValueR11     			 :   "+actbuyingValueR11					+" Value Expected : "+expbuyingValueR11);
    		
    		System.out.println("sellingRateR12     			 :   "+actsellingRateR12					+" Value Expected : "+expsellingRateR12);
    		System.out.println("sellingValueR12  			 :   "+actsellingValueR12					+" Value Expected : "+expsellingValueR12);
    		System.out.println("buyingRateR12     			 :   "+actbuyingRateR12						+" Value Expected : "+expbuyingRateR12);
    		System.out.println("buyingValueR12     			 :   "+actbuyingValueR12					+" Value Expected : "+expbuyingValueR12);
    		
    		System.out.println("sellingRateR13     			 :   "+actsellingRateR13					+" Value Expected : "+expsellingRateR13);
    		System.out.println("sellingValueR13  			 :   "+actsellingValueR13					+" Value Expected : "+expsellingValueR13);
    		System.out.println("buyingRateR13     			 :   "+actbuyingRateR13						+" Value Expected : "+expbuyingRateR13);
    		System.out.println("buyingValueR13     			 :   "+actbuyingValueR13					+" Value Expected : "+expbuyingValueR13);
    		
    		System.out.println("sellingRateR14     			 :   "+actsellingRateR14					+" Value Expected : "+expsellingRateR14);
    		System.out.println("sellingValueR14  			 :   "+actsellingValueR14					+" Value Expected : "+expsellingValueR14);
    		System.out.println("buyingRateR14     			 :   "+actbuyingRateR14						+" Value Expected : "+expbuyingRateR14);
    		System.out.println("buyingValueR14     			 :   "+actbuyingValueR14					+" Value Expected : "+expbuyingValueR14);
    		
    		if(actiq_OpeningStocks.equalsIgnoreCase(expiq_OpeningStocks) && actiq_PendingPurchaseOrders.equalsIgnoreCase(expiq_PendingPurchaseOrders)
    				&& actiq_CurrentStock.equalsIgnoreCase(expiq_CurrentStock) && actiq_PendingSalesOrders.equalsIgnoreCase(expiq_PendingSalesOrders)
    				&& actiq_AvgStockRate.equalsIgnoreCase(expiq_AvgStockRate) && actiq_QtyToBeOrdered.equalsIgnoreCase(expiq_QtyToBeOrdered)
    				&& actiq_Value.equalsIgnoreCase(expiq_Value) && actiq_BaseUnit.equalsIgnoreCase(expiq_BaseUnit)
    				
    				&& actpurVoucherNoR1.equalsIgnoreCase(exppurVoucherNoR1) && actpurVendorR1.equalsIgnoreCase(exppurVendorR1) && actpurQtyR1.equalsIgnoreCase(exppurQtyR1)
    				&& actpurUnitR1.equalsIgnoreCase(exppurUnitR1) && actpurRateR1.equalsIgnoreCase(exppurRateR1) && actpurCurrencyR1.equalsIgnoreCase(exppurCurrencyR1)
    				&& actpurQtyInBaseR1.equalsIgnoreCase(exppurQtyInBaseR1)
    				
    				&& actpurVoucherNoR2.equalsIgnoreCase(exppurVoucherNoR2) && actpurVendorR2.equalsIgnoreCase(exppurVendorR2) && actpurQtyR2.equalsIgnoreCase(exppurQtyR2)
    				&& actpurUnitR2.equalsIgnoreCase(exppurUnitR2) && actpurRateR2.equalsIgnoreCase(exppurRateR2) && actpurCurrencyR2.equalsIgnoreCase(exppurCurrencyR2)
    				&& actpurQtyInBaseR2.equalsIgnoreCase(exppurQtyInBaseR2)
    				
    				&& actpurTotalWa.equalsIgnoreCase(exppurTotalWa)
    				
    				&& actsalVoucherNoR1.equalsIgnoreCase(expsalVoucherNoR1) && actsalCustomerR1.equalsIgnoreCase(expsalCustomerR1) && actsalQtyR1.equalsIgnoreCase(expsalQtyR1)
    				&& actsalUnitR1.equalsIgnoreCase(expsalUnitR1) && actsalRateR1.equalsIgnoreCase(expsalRateR1) && actsalCurrencyR1.equalsIgnoreCase(expsalCurrencyR1)
    				&& actsalQtyInBaseR1.equalsIgnoreCase(expsalQtyInBaseR1)
    				
    				&& actsalVoucherNoR2.equalsIgnoreCase(expsalVoucherNoR2) && actsalCustomerR2.equalsIgnoreCase(expsalCustomerR2) && actsalQtyR2.equalsIgnoreCase(expsalQtyR2)
    				&& actsalUnitR2.equalsIgnoreCase(expsalUnitR2) && actsalRateR2.equalsIgnoreCase(expsalRateR2) && actsalCurrencyR2.equalsIgnoreCase(expsalCurrencyR2)
    				&& actsalQtyInBaseR2.equalsIgnoreCase(expsalQtyInBaseR2)
    				
    				&& actsalTotalWa.equalsIgnoreCase(expsalTotalWa)
    				
    				&& actwareHouseR1.equalsIgnoreCase(expwareHouseR1) && actstockR1.equalsIgnoreCase(expstockR1) 
    				&& actrateR1.equalsIgnoreCase(exprateR1) && actvalueR1.equalsIgnoreCase(expvalueR1)
    				
    				&& actwareHouseR2.equalsIgnoreCase(expwareHouseR2) && actstockR2.equalsIgnoreCase(expstockR2) 
    				&& actrateR2.equalsIgnoreCase(exprateR2) && actvalueR2.equalsIgnoreCase(expvalueR2)
    				
    				&& acttotalStock.equalsIgnoreCase(exptotalStock) && acttotalValue.equalsIgnoreCase(exptotalValue)
    				
    				&& actsellingRateR1.equalsIgnoreCase(expsellingRateR1) && actsellingValueR1.equalsIgnoreCase(expsellingValueR1)
    				&& actbuyingRateR1.equalsIgnoreCase(expbuyingRateR1) && actbuyingValueR1.equalsIgnoreCase(expbuyingValueR1)
    				
    				&& actsellingRateR2.equalsIgnoreCase(expsellingRateR2) && actsellingValueR2.equalsIgnoreCase(expsellingValueR2)
    				&& actbuyingRateR2.equalsIgnoreCase(expbuyingRateR2) && actbuyingValueR2.equalsIgnoreCase(expbuyingValueR2)
    				
    				&& actsellingRateR3.equalsIgnoreCase(expsellingRateR3) && actsellingValueR3.equalsIgnoreCase(expsellingValueR3)
    				&& actbuyingRateR3.equalsIgnoreCase(expbuyingRateR3) && actbuyingValueR3.equalsIgnoreCase(expbuyingValueR3)
    				
    				&& actsellingRateR4.equalsIgnoreCase(expsellingRateR4) && actsellingValueR4.equalsIgnoreCase(expsellingValueR4)
    				&& actbuyingRateR4.equalsIgnoreCase(expbuyingRateR4) && actbuyingValueR4.equalsIgnoreCase(expbuyingValueR4)
    				
    				&& actsellingRateR5.equalsIgnoreCase(expsellingRateR5) && actsellingValueR4.equalsIgnoreCase(expsellingValueR5)
    				&& actbuyingRateR5.equalsIgnoreCase(expbuyingRateR5) && actbuyingValueR5.equalsIgnoreCase(expbuyingValueR5)
    				
    				&& actsellingRateR6.equalsIgnoreCase(expsellingRateR6) && actsellingValueR6.equalsIgnoreCase(expsellingValueR6)
    				&& actbuyingRateR6.equalsIgnoreCase(expbuyingRateR6) && actbuyingValueR6.equalsIgnoreCase(expbuyingValueR6)
    				
    				&& actsellingRateR7.equalsIgnoreCase(expsellingRateR7) && actsellingValueR7.equalsIgnoreCase(expsellingValueR7)
    				&& actbuyingRateR7.equalsIgnoreCase(expbuyingRateR7) && actbuyingValueR7.equalsIgnoreCase(expbuyingValueR7)
    				
    				&& actsellingRateR8.equalsIgnoreCase(expsellingRateR8) && actsellingValueR8.equalsIgnoreCase(expsellingValueR8)
    				&& actbuyingRateR8.equalsIgnoreCase(expbuyingRateR8) && actbuyingValueR8.equalsIgnoreCase(expbuyingValueR8)
    				
    				&& actsellingRateR9.equalsIgnoreCase(expsellingRateR9) && actsellingValueR9.equalsIgnoreCase(expsellingValueR9)
    				&& actbuyingRateR9.equalsIgnoreCase(expbuyingRateR9) && actbuyingValueR9.equalsIgnoreCase(expbuyingValueR9)
    				
    				&& actsellingRateR10.equalsIgnoreCase(expsellingRateR10) && actsellingValueR10.equalsIgnoreCase(expsellingValueR10)
    				&& actbuyingRateR10.equalsIgnoreCase(expbuyingRateR10) && actbuyingValueR10.equalsIgnoreCase(expbuyingValueR10)
    				
    				&& actsellingRateR11.equalsIgnoreCase(expsellingRateR11) && actsellingValueR11.equalsIgnoreCase(expsellingValueR11)
    				&& actbuyingRateR11.equalsIgnoreCase(expbuyingRateR11) && actbuyingValueR11.equalsIgnoreCase(expbuyingValueR11)
    				
    				&& actsellingRateR12.equalsIgnoreCase(expsellingRateR12) && actsellingValueR12.equalsIgnoreCase(expsellingValueR12)
    				&& actbuyingRateR12.equalsIgnoreCase(expbuyingRateR12) && actbuyingValueR12.equalsIgnoreCase(expbuyingValueR12)
    				
    				&& actsellingRateR13.equalsIgnoreCase(expsellingRateR13) && actsellingValueR13.equalsIgnoreCase(expsellingValueR13)
    				&& actbuyingRateR13.equalsIgnoreCase(expbuyingRateR13) && actbuyingValueR13.equalsIgnoreCase(expbuyingValueR13)
    				
    				&& actsellingRateR14.equalsIgnoreCase(expsellingRateR14) && actsellingValueR14.equalsIgnoreCase(expsellingValueR14)
    				&& actbuyingRateR14.equalsIgnoreCase(expbuyingRateR14) && actbuyingValueR14.equalsIgnoreCase(expbuyingValueR14))
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_closeBtn));
    			iq_closeBtn.click();
    			return true;
    		}
    		else
    		{
    			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_closeBtn));
    			iq_closeBtn.click();
    			return false;
    		}
    	}
    	
    	
       	
       	
       	
    	
		// Stock Ledger Elements 
		
		@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
		public static WebElement sl_Dropdown1;
		
		@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
		public static WebElement sl_Dropdown2;
		
		@FindBy(xpath="//label[@id='oncheckaccorderan']")
		public static WebElement sl_oncheckBtn;
		
		@FindBy(xpath="//input[@id='txtsrch-term']")
		public static WebElement sl_SearchItemTxt;
		
		@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
		public static WebElement sl_SearchBtn;
		
		@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
		public static WebElement sl_MasterTypeTxt;
		
		@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
		public static WebElement sl_AutoAdjustColumnsBtn;
		
		@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
		public static WebElement sl_SearchItemTxt;
		
		@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
		public static WebElement sl_ItemGroupsBtn;
		
		@FindBy(xpath="//input[@id='liSelectAllMasters']")
		public static WebElement sl_HeaderSelectChkBox;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
		public static WebElement sl_ScheduleBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
		public static WebElement sl_CustomizeBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
		public static WebElement sl_FilterBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
		public static WebElement sl_OkBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
		public static WebElement sl_CloseBtn;
		
		@FindBy(xpath="//select[@id='DateOptions_']")
		public static WebElement sl_DateOptionDropdown;
		
		@FindBy(xpath="//input[@id='id_starting_date_']")
		public static WebElement sl_StartDateTxt;
		
		@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		public static WebElement sl_StartDateCalanderBtn;
		
		@FindBy(xpath="//input[@id='id_ending_date_']")
		public static WebElement sl_EndDateTxt;
		
		@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
		public static WebElement sl_EndDateCalanderBtn;
		
		@FindBy(xpath="//*[@id='MasterSingle__101']")
		public static WebElement sl_WarehouseTxt;
		
		@FindBy(xpath="//*[@id='RITCheckbox__6']")
		public static WebElement sl_IgnoreInternalTransferForAgeingChkbox;
		
		@FindBy(xpath="//*[@id='RITCombobox__2']")
		public static WebElement sl_ReportingLevelDropdown;
		
		@FindBy(xpath="//*[@id='RITCheckbox__4']")
		public static WebElement sl_DisplayLinearReportChkbox;
		
		@FindBy(xpath="//*[@id='RITCombobox__1']")
		public static WebElement sl_StockValuationDropdown;
		
		@FindBy(xpath="//input[@id='RITCheckbox__3']")
		public static WebElement sl_IncludeServiceTypeItemChkBox;
		
		@FindBy(xpath="//select[@id='RITLayout_']")
		public static WebElement sl_LayoutDropdown;
		
		@FindBy(xpath="//select[@id='RITOutput_']")
		public static WebElement sl_OutputDropdown;
		
		@FindBy(xpath="//input[@id='selectAllMasters_']")
		public static WebElement sl_SelectAllItemsChkBox;
		
		@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_FirstBtn;
		
		@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_PreviousBtn;
		
		@FindBy(xpath="//input[@id='btn1']")
		public static WebElement sl_PageBtn;
		
		@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_NextBtn;
		
		@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
		public static WebElement sl_EndBtn;
		
		@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]//input")
		public static WebElement sl_1stRowChkBox;
		
		@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]//input")
		public static WebElement sl_2ndRowChkBox;
		
		@FindBy(xpath="//tr[3]//td[8]//div[1]//label[1]//input")
		public static WebElement sl_3rdRowChkBox;
		
		
		
		////////
		
		@FindBy(xpath="//span[@id='reportSort']")
		public static WebElement report_sortingBtn;
				
		@FindBy(xpath="//span[@id='reportRefresh']")
		public static WebElement report_RefreshBtn;
				
		@FindBy(xpath="//span[@id='print_report_']")
		public static WebElement report_PrintBtn;
				
		@FindBy(xpath="//*[@id='reportRenderControls']/ul/li/span[4]")
		public static WebElement report_ExportBtn;
		
		@FindBy(xpath="//a[@id='pdf_report_']")
		public static WebElement report_ExportPDFBtn;
		
		
				
		@FindBy(xpath="//span[@id='GraphIcon']")
		public static WebElement report_GraphBtn;
				
		@FindBy(xpath="//span[@id='BackTrackIcon']")
		public static WebElement report_BackTrackBtn;
		
		
				
		@FindBy(xpath="//span[@id='reportCustomize_']")
		public static WebElement report_ReportCustomizeBtn;
		
		@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[7]")
		public static WebElement report_ReportCustomizeBtn;	
			
		@FindBy(xpath="//span[@id='filterIcon_']")
		public static WebElement report_FilterBtn;
		
		
		@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		public static WebElement report_FilterDownBtn;
				
		@FindBy(xpath="//span[@id='analyzeIcon_']")
		public static WebElement report_AnalyzeBtn;
				
		@FindBy(xpath="//span[@id='CrossrefrenceIcon_']")
		public static WebElement report_CrossReferenceBtn;
				
		@FindBy(xpath="//span[contains(text(),'Options')]")
		public static WebElement report_OptionsBtn;
				
		@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
		public static WebElement report_OptionsDownBtn;
				
		@FindBy(xpath="//span[@id='reportClose_']")
		public static WebElement report_CloseBtn;
		
		@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[12]")
		public static WebElement report_CloseBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[1]")
		public static WebElement report_FirstBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[2]")
		public static WebElement report_PreviousBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[3]")
		public static WebElement report_PageNoBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[4]")
		public static WebElement report_NextBtn;
				
		@FindBy(xpath="//div[@id='tblFooterReportRender']/div[2]/button[5]")
		public static WebElement report_LastBtn;
		
		@FindBy(xpath="//input[@id='txtSearchReport']")
		public static WebElement report_SearchTxt;
		
		
		@FindBy(xpath="//*[@id='trRender_0']/td[2]")
		public static WebElement sl_1stRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_0']/td[3]")
		public static WebElement sl_1stRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[4]")
		public static WebElement sl_1stRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[5]")
		public static WebElement sl_1stRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[6]")
		public static WebElement sl_1stRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[7]")
		public static WebElement sl_1stRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[8]")
		public static WebElement sl_1stRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[9]")
		public static WebElement sl_1stRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[10]")
		public static WebElement sl_1stRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[11]")
		public static WebElement sl_1stRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[12]")
		public static WebElement sl_1stRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[13]")
		public static WebElement sl_1stRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[14]")
		public static WebElement sl_1stRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[15]")
		public static WebElement sl_1stRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[16]")
		public static WebElement sl_1stRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[17]")
		public static WebElement sl_1stRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[18]")
		public static WebElement sl_1stRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[19]")
		public static WebElement sl_1stRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[20]")
		public static WebElement sl_1stRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[21]")
		public static WebElement sl_1stRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[22]")
		public static WebElement sl_1stRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[23]")
		public static WebElement sl_1stRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[24]")
		public static WebElement sl_1stRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[25]")
		public static WebElement sl_1stRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[26]")
		public static WebElement sl_1stRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[27]")
		public static WebElement sl_1stRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[28]")
		public static WebElement sl_1stRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[29]")
		public static WebElement sl_1stRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[30]")
		public static WebElement sl_1stRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[31]")
		public static WebElement sl_1stRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[32]")
		public static WebElement sl_1stRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[33]")
		public static WebElement sl_1stRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[34]")
		public static WebElement sl_1stRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[35]")
		public static WebElement sl_1stRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[36]")
		public static WebElement sl_1stRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[37]")
		public static WebElement sl_1stRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[38]")
		public static WebElement sl_1stRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[39]")
		public static WebElement sl_1stRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[40]")
		public static WebElement sl_1stRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[41]")
		public static WebElement sl_1stRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[42]")
		public static WebElement sl_1stRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[43]")
		public static WebElement sl_1stRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[44]")
		public static WebElement sl_1stRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[45]")
		public static WebElement sl_1stRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[46]")
		public static WebElement sl_1stRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[47]")
		public static WebElement sl_1stRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[48]")
		public static WebElement sl_1stRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[49]")
		public static WebElement sl_1stRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[50]")
		public static WebElement sl_1stRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_0']/td[51]")
		public static WebElement sl_1stRow50thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_1']/td[2]")
		public static WebElement sl_2ndRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_1']/td[3]")
		public static WebElement sl_2ndRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[4]")
		public static WebElement sl_2ndRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[5]")
		public static WebElement sl_2ndRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[6]")
		public static WebElement sl_2ndRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[7]")
		public static WebElement sl_2ndRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[8]")
		public static WebElement sl_2ndRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[9]")
		public static WebElement sl_2ndRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[10]")
		public static WebElement sl_2ndRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[11]")
		public static WebElement sl_2ndRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[12]")
		public static WebElement sl_2ndRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[13]")
		public static WebElement sl_2ndRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[14]")
		public static WebElement sl_2ndRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[15]")
		public static WebElement sl_2ndRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[16]")
		public static WebElement sl_2ndRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[17]")
		public static WebElement sl_2ndRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[18]")
		public static WebElement sl_2ndRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[19]")
		public static WebElement sl_2ndRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[20]")
		public static WebElement sl_2ndRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[21]")
		public static WebElement sl_2ndRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[22]")
		public static WebElement sl_2ndRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[23]")
		public static WebElement sl_2ndRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[24]")
		public static WebElement sl_2ndRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[25]")
		public static WebElement sl_2ndRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[26]")
		public static WebElement sl_2ndRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[27]")
		public static WebElement sl_2ndRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[28]")
		public static WebElement sl_2ndRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[29]")
		public static WebElement sl_2ndRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[30]")
		public static WebElement sl_2ndRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[31]")
		public static WebElement sl_2ndRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[32]")
		public static WebElement sl_2ndRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[33]")
		public static WebElement sl_2ndRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[34]")
		public static WebElement sl_2ndRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[35]")
		public static WebElement sl_2ndRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[36]")
		public static WebElement sl_2ndRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[37]")
		public static WebElement sl_2ndRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[38]")
		public static WebElement sl_2ndRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[39]")
		public static WebElement sl_2ndRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[40]")
		public static WebElement sl_2ndRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[41]")
		public static WebElement sl_2ndRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[42]")
		public static WebElement sl_2ndRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[43]")
		public static WebElement sl_2ndRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[44]")
		public static WebElement sl_2ndRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[45]")
		public static WebElement sl_2ndRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[46]")
		public static WebElement sl_2ndRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[47]")
		public static WebElement sl_2ndRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[48]")
		public static WebElement sl_2ndRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[49]")
		public static WebElement sl_2ndRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[50]")
		public static WebElement sl_2ndRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_1']/td[51]")
		public static WebElement sl_2ndRow50thCol;
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_2']/td[2]")
		public static WebElement sl_3rdRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_2']/td[3]")
		public static WebElement sl_3rdRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[4]")
		public static WebElement sl_3rdRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[5]")
		public static WebElement sl_3rdRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[6]")
		public static WebElement sl_3rdRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[7]")
		public static WebElement sl_3rdRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[8]")
		public static WebElement sl_3rdRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[9]")
		public static WebElement sl_3rdRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[10]")
		public static WebElement sl_3rdRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[11]")
		public static WebElement sl_3rdRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[12]")
		public static WebElement sl_3rdRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[13]")
		public static WebElement sl_3rdRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[14]")
		public static WebElement sl_3rdRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[15]")
		public static WebElement sl_3rdRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[16]")
		public static WebElement sl_3rdRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[17]")
		public static WebElement sl_3rdRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[18]")
		public static WebElement sl_3rdRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[19]")
		public static WebElement sl_3rdRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[20]")
		public static WebElement sl_3rdRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[21]")
		public static WebElement sl_3rdRow20thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[22]")
		public static WebElement sl_3rdRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[23]")
		public static WebElement sl_3rdRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[24]")
		public static WebElement sl_3rdRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[25]")
		public static WebElement sl_3rdRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[26]")
		public static WebElement sl_3rdRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[27]")
		public static WebElement sl_3rdRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[28]")
		public static WebElement sl_3rdRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[29]")
		public static WebElement sl_3rdRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[30]")
		public static WebElement sl_3rdRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[31]")
		public static WebElement sl_3rdRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[32]")
		public static WebElement sl_3rdRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[33]")
		public static WebElement sl_3rdRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[34]")
		public static WebElement sl_3rdRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[35]")
		public static WebElement sl_3rdRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[36]")
		public static WebElement sl_3rdRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[37]")
		public static WebElement sl_3rdRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[38]")
		public static WebElement sl_3rdRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[39]")
		public static WebElement sl_3rdRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[40]")
		public static WebElement sl_3rdRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[41]")
		public static WebElement sl_3rdRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[42]")
		public static WebElement sl_3rdRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[43]")
		public static WebElement sl_3rdRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[44]")
		public static WebElement sl_3rdRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[45]")
		public static WebElement sl_3rdRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[46]")
		public static WebElement sl_3rdRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[47]")
		public static WebElement sl_3rdRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[48]")
		public static WebElement sl_3rdRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[49]")
		public static WebElement sl_3rdRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[50]")
		public static WebElement sl_3rdRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_2']/td[51]")
		public static WebElement sl_3rdRow50thCol;
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_3']/td[2]")
		public static WebElement sl_4thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_3']/td[3]")
		public static WebElement sl_4thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[4]")
		public static WebElement sl_4thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[5]")
		public static WebElement sl_4thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[6]")
		public static WebElement sl_4thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[7]")
		public static WebElement sl_4thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[8]")
		public static WebElement sl_4thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[9]")
		public static WebElement sl_4thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[10]")
		public static WebElement sl_4thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[11]")
		public static WebElement sl_4thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[12]")
		public static WebElement sl_4thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[13]")
		public static WebElement sl_4thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[14]")
		public static WebElement sl_4thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[15]")
		public static WebElement sl_4thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[16]")
		public static WebElement sl_4thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[17]")
		public static WebElement sl_4thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[18]")
		public static WebElement sl_4thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[19]")
		public static WebElement sl_4thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[20]")
		public static WebElement sl_4thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[21]")
		public static WebElement sl_4thRow20thCol;
		

		@FindBy(xpath="//*[@id='trRender_3']/td[22]")
		public static WebElement sl_4thRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[23]")
		public static WebElement sl_4thRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[24]")
		public static WebElement sl_4thRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[25]")
		public static WebElement sl_4thRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[26]")
		public static WebElement sl_4thRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[27]")
		public static WebElement sl_4thRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[28]")
		public static WebElement sl_4thRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[29]")
		public static WebElement sl_4thRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[30]")
		public static WebElement sl_4thRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[31]")
		public static WebElement sl_4thRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[32]")
		public static WebElement sl_4thRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[33]")
		public static WebElement sl_4thRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[34]")
		public static WebElement sl_4thRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[35]")
		public static WebElement sl_4thRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[36]")
		public static WebElement sl_4thRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[37]")
		public static WebElement sl_4thRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[38]")
		public static WebElement sl_4thRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[39]")
		public static WebElement sl_4thRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[40]")
		public static WebElement sl_4thRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[41]")
		public static WebElement sl_4thRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[42]")
		public static WebElement sl_4thRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[43]")
		public static WebElement sl_4thRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[44]")
		public static WebElement sl_4thRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[45]")
		public static WebElement sl_4thRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[46]")
		public static WebElement sl_4thRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[47]")
		public static WebElement sl_4thRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[48]")
		public static WebElement sl_4thRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[49]")
		public static WebElement sl_4thRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[50]")
		public static WebElement sl_4thRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_3']/td[51]")
		public static WebElement sl_4thRow50thCol;
		
		

		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_4']/td[2]")
		public static WebElement sl_5thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_4']/td[3]")
		public static WebElement sl_5thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[4]")
		public static WebElement sl_5thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[5]")
		public static WebElement sl_5thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[6]")
		public static WebElement sl_5thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[7]")
		public static WebElement sl_5thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[8]")
		public static WebElement sl_5thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[9]")
		public static WebElement sl_5thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[10]")
		public static WebElement sl_5thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[11]")
		public static WebElement sl_5thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[12]")
		public static WebElement sl_5thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[13]")
		public static WebElement sl_5thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[14]")
		public static WebElement sl_5thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[15]")
		public static WebElement sl_5thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[16]")
		public static WebElement sl_5thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[17]")
		public static WebElement sl_5thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[18]")
		public static WebElement sl_5thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[19]")
		public static WebElement sl_5thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[20]")
		public static WebElement sl_5thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[21]")
		public static WebElement sl_5thRow20thCol;
		

		@FindBy(xpath="//*[@id='trRender_4']/td[22]")
		public static WebElement sl_5thRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[23]")
		public static WebElement sl_5thRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[24]")
		public static WebElement sl_5thRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[25]")
		public static WebElement sl_5thRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[26]")
		public static WebElement sl_5thRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[27]")
		public static WebElement sl_5thRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[28]")
		public static WebElement sl_5thRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[29]")
		public static WebElement sl_5thRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[30]")
		public static WebElement sl_5thRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[31]")
		public static WebElement sl_5thRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[32]")
		public static WebElement sl_5thRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[33]")
		public static WebElement sl_5thRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[34]")
		public static WebElement sl_5thRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[35]")
		public static WebElement sl_5thRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[36]")
		public static WebElement sl_5thRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[37]")
		public static WebElement sl_5thRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[38]")
		public static WebElement sl_5thRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[39]")
		public static WebElement sl_5thRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[40]")
		public static WebElement sl_5thRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[41]")
		public static WebElement sl_5thRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[42]")
		public static WebElement sl_5thRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[43]")
		public static WebElement sl_5thRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[44]")
		public static WebElement sl_5thRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[45]")
		public static WebElement sl_5thRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[46]")
		public static WebElement sl_5thRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[47]")
		public static WebElement sl_5thRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[48]")
		public static WebElement sl_5thRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[49]")
		public static WebElement sl_5thRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[50]")
		public static WebElement sl_5thRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_4']/td[51]")
		public static WebElement sl_5thRow50thCol;
		
		
		
		

		
		@FindBy(xpath="//*[@id='trRender_5']/td[2]")
		public static WebElement sl_6thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_5']/td[3]")
		public static WebElement sl_6thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[4]")
		public static WebElement sl_6thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[5]")
		public static WebElement sl_6thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[6]")
		public static WebElement sl_6thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[7]")
		public static WebElement sl_6thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[8]")
		public static WebElement sl_6thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[9]")
		public static WebElement sl_6thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[10]")
		public static WebElement sl_6thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[11]")
		public static WebElement sl_6thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[12]")
		public static WebElement sl_6thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[13]")
		public static WebElement sl_6thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[14]")
		public static WebElement sl_6thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[15]")
		public static WebElement sl_6thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[16]")
		public static WebElement sl_6thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[17]")
		public static WebElement sl_6thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[18]")
		public static WebElement sl_6thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[19]")
		public static WebElement sl_6thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[20]")
		public static WebElement sl_6thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[21]")
		public static WebElement sl_6thRow20thCol;
		

		@FindBy(xpath="//*[@id='trRender_5']/td[22]")
		public static WebElement sl_6thRow21thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[23]")
		public static WebElement sl_6thRow22thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[24]")
		public static WebElement sl_6thRow23thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[25]")
		public static WebElement sl_6thRow24thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[26]")
		public static WebElement sl_6thRow25thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[27]")
		public static WebElement sl_6thRow26thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[28]")
		public static WebElement sl_6thRow27thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[29]")
		public static WebElement sl_6thRow28thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[30]")
		public static WebElement sl_6thRow29thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[31]")
		public static WebElement sl_6thRow30thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[32]")
		public static WebElement sl_6thRow31thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[33]")
		public static WebElement sl_6thRow32thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[34]")
		public static WebElement sl_6thRow33thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[35]")
		public static WebElement sl_6thRow34thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[36]")
		public static WebElement sl_6thRow35thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[37]")
		public static WebElement sl_6thRow36thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[38]")
		public static WebElement sl_6thRow37thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[39]")
		public static WebElement sl_6thRow38thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[40]")
		public static WebElement sl_6thRow39thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[41]")
		public static WebElement sl_6thRow40thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[42]")
		public static WebElement sl_6thRow41thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[43]")
		public static WebElement sl_6thRow42thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[44]")
		public static WebElement sl_6thRow43thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[45]")
		public static WebElement sl_6thRow44thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[46]")
		public static WebElement sl_6thRow45thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[47]")
		public static WebElement sl_6thRow46thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[48]")
		public static WebElement sl_6thRow47thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[49]")
		public static WebElement sl_6thRow48thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[50]")
		public static WebElement sl_6thRow49thCol;
		
		@FindBy(xpath="//*[@id='trRender_5']/td[51]")
		public static WebElement sl_6thRow50thCol;
		
		
		
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_6']/td[2]")
		public static WebElement sl_7thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_6']/td[3]")
		public static WebElement sl_7thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[4]")
		public static WebElement sl_7thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[5]")
		public static WebElement sl_7thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[6]")
		public static WebElement sl_7thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[7]")
		public static WebElement sl_7thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[8]")
		public static WebElement sl_7thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[9]")
		public static WebElement sl_7thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[10]")
		public static WebElement sl_7thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[11]")
		public static WebElement sl_7thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[12]")
		public static WebElement sl_7thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[13]")
		public static WebElement sl_7thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[14]")
		public static WebElement sl_7thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[15]")
		public static WebElement sl_7thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[16]")
		public static WebElement sl_7thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[17]")
		public static WebElement sl_7thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[18]")
		public static WebElement sl_7thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[19]")
		public static WebElement sl_7thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[20]")
		public static WebElement sl_7thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_6']/td[21]")
		public static WebElement sl_7thRow20thCol;
		
		
		
		
		
		@FindBy(xpath="//*[@id='trRender_7']/td[2]")
		public static WebElement sl_8thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_7']/td[3]")
		public static WebElement sl_8thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[4]")
		public static WebElement sl_8thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[5]")
		public static WebElement sl_8thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[6]")
		public static WebElement sl_8thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[7]")
		public static WebElement sl_8thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[8]")
		public static WebElement sl_8thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[9]")
		public static WebElement sl_8thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[10]")
		public static WebElement sl_8thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[11]")
		public static WebElement sl_8thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[12]")
		public static WebElement sl_8thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[13]")
		public static WebElement sl_8thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[14]")
		public static WebElement sl_8thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[15]")
		public static WebElement sl_8thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[16]")
		public static WebElement sl_8thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[17]")
		public static WebElement sl_8thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[18]")
		public static WebElement sl_8thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[19]")
		public static WebElement sl_8thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[20]")
		public static WebElement sl_8thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_7']/td[21]")
		public static WebElement sl_8thRow20thCol;
		
		
		
		@FindBy(xpath="//*[@id='trRender_8']/td[2]")
		public static WebElement sl_9thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_8']/td[3]")
		public static WebElement sl_9thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[4]")
		public static WebElement sl_9thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[5]")
		public static WebElement sl_9thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[6]")
		public static WebElement sl_9thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[7]")
		public static WebElement sl_9thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[8]")
		public static WebElement sl_9thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[9]")
		public static WebElement sl_9thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[10]")
		public static WebElement sl_9thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[11]")
		public static WebElement sl_9thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[12]")
		public static WebElement sl_9thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[13]")
		public static WebElement sl_9thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[14]")
		public static WebElement sl_9thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[15]")
		public static WebElement sl_9thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[16]")
		public static WebElement sl_9thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[17]")
		public static WebElement sl_9thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[18]")
		public static WebElement sl_9thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[19]")
		public static WebElement sl_9thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[20]")
		public static WebElement sl_9thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_8']/td[21]")
		public static WebElement sl_9thRow20thCol;
		
		
		
		@FindBy(xpath="//*[@id='trRender_9']/td[2]")
		public static WebElement sl_10thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_9']/td[3]")
		public static WebElement sl_10thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[4]")
		public static WebElement sl_10thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[5]")
		public static WebElement sl_10thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[6]")
		public static WebElement sl_10thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[7]")
		public static WebElement sl_10thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[8]")
		public static WebElement sl_10thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[9]")
		public static WebElement sl_10thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[10]")
		public static WebElement sl_10thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[11]")
		public static WebElement sl_10thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[12]")
		public static WebElement sl_10thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[13]")
		public static WebElement sl_10thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[14]")
		public static WebElement sl_10thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[15]")
		public static WebElement sl_10thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[16]")
		public static WebElement sl_10thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[17]")
		public static WebElement sl_10thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[18]")
		public static WebElement sl_10thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[19]")
		public static WebElement sl_10thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[20]")
		public static WebElement sl_10thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_9']/td[21]")
		public static WebElement sl_10thRow20thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_10']/td[2]")
		public static WebElement sl_11thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_10']/td[3]")
		public static WebElement sl_11thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[4]")
		public static WebElement sl_11thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[5]")
		public static WebElement sl_11thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[6]")
		public static WebElement sl_11thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[7]")
		public static WebElement sl_11thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[8]")
		public static WebElement sl_11thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[9]")
		public static WebElement sl_11thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[10]")
		public static WebElement sl_11thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[11]")
		public static WebElement sl_11thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[12]")
		public static WebElement sl_11thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[13]")
		public static WebElement sl_11thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[14]")
		public static WebElement sl_11thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[15]")
		public static WebElement sl_11thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[16]")
		public static WebElement sl_11thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[17]")
		public static WebElement sl_11thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[18]")
		public static WebElement sl_11thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[19]")
		public static WebElement sl_11thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[20]")
		public static WebElement sl_11thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_10']/td[21]")
		public static WebElement sl_11thRow20thCol;
		
		
		@FindBy(xpath="//*[@id='trRender_11']/td[2]")
		public static WebElement sl_12thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_11']/td[3]")
		public static WebElement sl_12thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[4]")
		public static WebElement sl_12thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[5]")
		public static WebElement sl_12thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[6]")
		public static WebElement sl_12thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[7]")
		public static WebElement sl_12thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[8]")
		public static WebElement sl_12thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[9]")
		public static WebElement sl_12thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[10]")
		public static WebElement sl_12thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[11]")
		public static WebElement sl_12thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[12]")
		public static WebElement sl_12thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[13]")
		public static WebElement sl_12thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[14]")
		public static WebElement sl_12thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[15]")
		public static WebElement sl_12thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[16]")
		public static WebElement sl_12thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[17]")
		public static WebElement sl_12thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[18]")
		public static WebElement sl_12thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[19]")
		public static WebElement sl_12thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[20]")
		public static WebElement sl_12thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_11']/td[21]")
		public static WebElement sl_12thRow20thCol;
		
		
		
		@FindBy(xpath="//*[@id='trRender_12']/td[2]")
		public static WebElement sl_13thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_12']/td[3]")
		public static WebElement sl_13thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[4]")
		public static WebElement sl_13thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[5]")
		public static WebElement sl_13thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[6]")
		public static WebElement sl_13thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[7]")
		public static WebElement sl_13thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[8]")
		public static WebElement sl_13thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[9]")
		public static WebElement sl_13thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[10]")
		public static WebElement sl_13thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[11]")
		public static WebElement sl_13thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[12]")
		public static WebElement sl_13thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[13]")
		public static WebElement sl_13thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[14]")
		public static WebElement sl_13thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[15]")
		public static WebElement sl_13thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[16]")
		public static WebElement sl_13thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[17]")
		public static WebElement sl_13thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[18]")
		public static WebElement sl_13thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[19]")
		public static WebElement sl_13thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[20]")
		public static WebElement sl_13thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_12']/td[21]")
		public static WebElement sl_13thRow20thCol;
		
		
		
		@FindBy(xpath="//*[@id='trRender_13']/td[2]")
		public static WebElement sl_14thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_13']/td[3]")
		public static WebElement sl_14thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[4]")
		public static WebElement sl_14thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[5]")
		public static WebElement sl_14thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[6]")
		public static WebElement sl_14thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[7]")
		public static WebElement sl_14thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[8]")
		public static WebElement sl_14thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[9]")
		public static WebElement sl_14thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[10]")
		public static WebElement sl_14thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[11]")
		public static WebElement sl_14thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[12]")
		public static WebElement sl_14thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[13]")
		public static WebElement sl_14thRow12thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[14]")
		public static WebElement sl_14thRow13thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[15]")
		public static WebElement sl_14thRow14thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[16]")
		public static WebElement sl_14thRow15thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[17]")
		public static WebElement sl_14thRow16thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[18]")
		public static WebElement sl_14thRow17thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[19]")
		public static WebElement sl_14thRow18thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[20]")
		public static WebElement sl_14thRow19thCol;
		
		@FindBy(xpath="//*[@id='trRender_13']/td[21]")
		public static WebElement sl_14thRow20thCol;
		
		
		
		@FindBy(xpath="//*[@id='trRender_14']/td[2]")
		public static WebElement sl_15thRow1stCol;
				
		@FindBy(xpath="//*[@id='trRender_14']/td[3]")
		public static WebElement sl_15thRow2ndCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[4]")
		public static WebElement sl_15thRow3rdCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[5]")
		public static WebElement sl_15thRow4thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[6]")
		public static WebElement sl_15thRow5thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[7]")
		public static WebElement sl_15thRow6thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[8]")
		public static WebElement sl_15thRow7thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[9]")
		public static WebElement sl_15thRow8thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[10]")
		public static WebElement sl_15thRow9thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[11]")
		public static WebElement sl_15thRow10thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[12]")
		public static WebElement sl_15thRow11thCol;
		
		@FindBy(xpath="//*[@id='trRender_14']/td[13]")
		public static WebElement sl_15thRow12thCol;
		
		
		
		@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
		public static List<WebElement> stockLedgerHometableRowCount;
		
		
		 // Reports Table Row List  
	  	@FindBy(xpath="(//tr[@id='trRender_0'])[1]/td")
		public static List<WebElement> reportsRow1List;
		
		@FindBy(xpath="(//tr[@id='trRender_1'])[1]/td")
		public static List<WebElement> reportsRow2List;
		
		@FindBy(xpath="(//tr[@id='trRender_2'])[1]/td")
		public static List<WebElement> reportsRow3List;
		
		@FindBy(xpath="(//tr[@id='trRender_3'])[1]/td")
		public static List<WebElement> reportsRow4List;
		
		@FindBy(xpath="(//tr[@id='trRender_4'])[1]/td")
		public static List<WebElement> reportsRow5List;
		
		@FindBy(xpath="(//tr[@id='trRender_5'])[1]/td")
		public static List<WebElement> reportsRow6List;
		
		@FindBy(xpath="(//tr[@id='trRender_6'])[1]/td")
		public static List<WebElement> reportsRow7List;
		
		@FindBy(xpath="(//tr[@id='trRender_7'])[1]/td")
		public static List<WebElement> reportsRow8List;
		
		@FindBy(xpath="(//tr[@id='trRender_8'])[1]/td")
		public static List<WebElement> reportsRow9List;
		
		@FindBy(xpath="(//tr[@id='trRender_9'])[1]/td")
		public static List<WebElement> reportsRow10List;
		
		@FindBy(xpath="(//tr[@id='trRender_10'])[1]/td")
		public static List<WebElement> reportsRow11List;
		
		@FindBy(xpath="(//tr[@id='trRender_11'])[1]/td")
		public static List<WebElement> reportsRow12List;
		
		@FindBy(xpath="(//tr[@id='trRender_12'])[1]/td")
		public static List<WebElement> reportsRow13List;
		
		@FindBy(xpath="(//tr[@id='trRender_13'])[1]/td")
		public static List<WebElement> reportsRow14List;
		
		
		
		@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[12]")
		public static List<WebElement> stockLedgerHometableItemNamesList;
		
		@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div/label/input")
		public static List<WebElement> stockLedgerHometableItemChkboxList;
		
		@FindBy(xpath="(//div[@id='dvReportDetails']/div/table/thead)[1]/tr/th")
		public static List<WebElement> reportsHeaderList;
		
		
		
       	
		public boolean checkStockLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
			stockLedger.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("WA COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM WA COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 24.00, , , , 24.00, , , 84.00, 3.50, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT57:SU/IND/TEXT5, 12.00, 10.50, , , 36.00, 126.00, , 210.00, 5.83, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT57:SU/IND/TEXT5, 10.00, 10.50, , , 46.00, 105.00, , 315.00, 6.85, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[ExeStk:2, 10.00, 10.00, , , 56.00, 100.00, , 415.00, 7.41, , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[StkTrf:2, , , 10.00, 7.41, 46.00, , 74.11, 340.89, 7.41, , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[StkTrf:2, 10.00, 7.41, , , 56.00, 74.11, , 415.00, 7.41, , , ]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[NDT50:5, , , 3.00, 7.41, 53.00, , 22.23, 392.77, 7.41, , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[NDT50:7, , , 10.00, 7.41, 43.00, , 74.11, 318.66, 7.41, , , ]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[Reserved stock, , , 43.00, , , , , , , , , ]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Grand Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
			
			
			
			
			System.out.println("************************************checkStockLedgerReport********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
		
		
       	
		// With Customizing Warehouse
		
		@FindBy(xpath="//*[@id='CustomizeTransTree']/ul/li/span")
		public static WebElement  osr_customizeFieldsTransactionExpansion; 
		
		@FindBy(xpath="//*[@id='rd_customization_tree2']/span")
		public static WebElement  osr_customizeFieldsTransExtraFieldsExpansion; 
		
		@FindBy(xpath="//*[@id='rd_customization_tree2_43']/span/span")
		public static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseExpansion; 
		
		@FindBy(xpath="//*[@id='rd_customization_tree2_43_0']")
		public static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseName; 
		
		@FindBy(xpath="//li[@id='rd_customization_tree2_15']")
		public static WebElement  osr_customizeFieldsTransExtraFieldsNarration;
		
		@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
		public static List<WebElement> osr_customizeHeaderList;
		
		@FindBy(xpath="//table[@id='tblRDRender']/thead/tr/th")
		public static List<WebElement> osr_reportHeaderList;
		
		
		@FindBy(xpath="//ul[@id='id_Item_main']/li/span")
		public static WebElement  osr_customizeFieldsItemExpansion; 
		
		@FindBy(xpath="//li[@id='id_Item_main_0']")
		public static WebElement  osr_customizeFieldsItemName; 
		
		
		@FindBy(xpath="//input[@id='HidethisColumn']")
		public static WebElement osr_customizeTabHideThisColumnChkBox;
		
		@FindBy(xpath="//input[@id='ScrollTexttonextLine']")
		public static WebElement osr_customizeTabScrollTextToNextLineChkBox;
		
		@FindBy(xpath="//input[@id='Printunderpreviouscolumn']")
		public static WebElement osr_customizeTabPrintUnderPreviousColumnChkBox;
		
		@FindBy(xpath="//input[@id='Mandatorycolumn']")
		public static WebElement osr_customizeTabMandatoryColumnChkBox;
		
		@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
		public static WebElement osr_customizeTabRemoveColumnBtn;
		
		@FindBy(xpath="//*[@id='Save']/div[1]/span")
		public static WebElement  osr_customizeSaveBtn;
		
		@FindBy(xpath="//*[@id='Deleteayout']/div[2]")
		public static WebElement  osr_customizeDeleteLayoutBtn;
		
		@FindBy(xpath="//div[@id='btnCustomizeClose']")
		public static WebElement  osr_customizeCloseBtn;
		
		@FindBy(xpath="//div[@id='Deleteayout']")
		public static WebElement report_CustomizationDeleteLayoutBtn;
		
       	
		
		public boolean checkStockLedgerCustomizationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransactionExpansion));
			osr_customizeFieldsTransactionExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsExpansion));
			osr_customizeFieldsTransExtraFieldsExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseExpansion));
			osr_customizeFieldsTransExtraFieldsWarehouseExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseName));
			getAction().doubleClick(osr_customizeFieldsTransExtraFieldsWarehouseName).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
			Thread.sleep(4000);
			
			if (sl_OkBtn.isDisplayed()==true) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
				sl_OkBtn.click();
				
				Thread.sleep(4000);
			}
		    else
		    {
		    	if (osr_customizeCloseBtn.isDisplayed()==true) 
		    	{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeCloseBtn));
					osr_customizeCloseBtn.click();
					
					Thread.sleep(4000);
				}
		    }
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM WA COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 24.00, , , , 24.00, , , 84.00, 3.50, , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT57:SU/IND/TEXT5, 12.00, 10.50, , , 36.00, 126.00, , 210.00, 5.83, , , , HYDERABAD]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT57:SU/IND/TEXT5, 10.00, 10.50, , , 46.00, 105.00, , 315.00, 6.85, , , , HYDERABAD]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[ExeStk:2, 10.00, 10.00, , , 56.00, 100.00, , 415.00, 7.41, , , , HYDERABAD]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[StkTrf:2, , , 10.00, 7.41, 46.00, , 74.11, 340.89, 7.41, , , , HYDERABAD]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[StkTrf:2, 10.00, 7.41, , , 56.00, 74.11, , 415.00, 7.41, , , , SECUNDERABAD]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[NDT50:5, , , 3.00, 7.41, 53.00, , 22.23, 392.77, 7.41, , , , HYDERABAD]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[NDT50:7, , , 10.00, 7.41, 43.00, , 74.11, 318.66, 7.41, , , , SECUNDERABAD]";
			
			

			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[Reserved stock, , , 43.00, , , , , , , , , , ]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , , ]";
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Grand Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , , ]";
			
			
			System.out.println("************************************checkStockLedgerCustomizationReport********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expDeleteMessage = "Layout Deleted Successfully";
		    
		    String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		    
		    Thread.sleep(4000);
		    
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		    
		    int reportsHeaderListCount = reportsHeaderList.size();
			ArrayList<String> reportsHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportsHeaderListCount;i++)
			{
				String data = reportsHeaderList.get(i).getText();
				reportsHeaderListArray.add(data);
			}
			String actHeaderList = reportsHeaderListArray.toString();
			String expHeaderList = "[#, Date, Voucher, Received, Issued, Balance, Received, Issued, Balance, Avg Rate, Alternate, Received Quantity, Rate, "
									+ "Issued Quantity, Rate, Balance Quantity, Value, Value, Value, Received Quantity, Issued Quantity, Balance Quantity]";
		    
		    System.out.println(actHeaderList);
		    System.out.println(expHeaderList);
		    
			if(actMessage.equalsIgnoreCase(expMessage)
				&& actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actDeleteMessage.equalsIgnoreCase(expDeleteMessage)
				&& actHeaderList.equalsIgnoreCase(expHeaderList))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
			
       	
		
		@FindBy(xpath="//input[@id='RITCheckbox__2']")
		public static WebElement sl_MovedItemsOnlyChkBox;
		
		
		
		
		
		public boolean checkStockLedgerReportWithMovedItemsOnlyAndIncludeServiceTypeItemsCheckBoxs() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_MovedItemsOnlyChkBox));
			sl_MovedItemsOnlyChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM WA COGS ITEM]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 24.00, , , , 24.00, , , 84.00, 3.50, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT57:SU/IND/TEXT5, 12.00, 10.50, , , 36.00, 126.00, , 210.00, 5.83, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT57:SU/IND/TEXT5, 10.00, 10.50, , , 46.00, 105.00, , 315.00, 6.85, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[ExeStk:2, 10.00, 10.00, , , 56.00, 100.00, , 415.00, 7.41, , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[StkTrf:2, , , 10.00, 7.41, 46.00, , 74.11, 340.89, 7.41, , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[StkTrf:2, 10.00, 7.41, , , 56.00, 74.11, , 415.00, 7.41, , , ]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[NDT50:5, , , 3.00, 7.41, 53.00, , 22.23, 392.77, 7.41, , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[NDT50:7, , , 10.00, 7.41, 43.00, , 74.11, 318.66, 7.41, , , ]";
			
			

			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[Reserved stock, , , 43.00, , , , , , , , , ]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Grand Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
			
			
			System.out.println("************************checkStockLedgerReportWithMovedItemsOnlyAndIncludeServiceTypeItemsCheckBoxs********************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
		
		
		
		@FindBy (xpath="//span[@id='BackTrackIcon_']")
		public static WebElement sl_BackTrackBtn;
		
		@FindBy (xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[6]")
		public static WebElement sl_BackTrackBtn;
		
		@FindBy (xpath="(//div[@id='reportRenderRowDetails']/ul/li/button)[1]")
		public static WebElement BackTrackItemDetailsBackBtn;
		
		@FindBy (xpath="(//div[@id='reportRenderRowDetails']/ul/li/button)[2]")
		public static WebElement BackTrackMonthDetailsBackBtn;
		
		@FindBy (xpath="(//div[@id='reportRenderRowDetails']/ul/li/button)[3]")
		public static WebElement BackTrackDateDetailsBackBtn;
		
		
		
		@FindBy (xpath="(//div[@id='dvReportDetails']/div/table/tbody)[1]/tr/td[3]")
		public static List<WebElement> reportTableColumn2RowsList;
		
		public boolean checkStockLedgerReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 1; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             
	             System.err.println(data);
	             
	             if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT5"))
	             {
	            	 reportTableColumn2RowsList.get(i).click();
            		 break;
                 }
		    }
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	Thread.sleep(2000);
		 	
		 	checkValidationMessage("");
		 	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "SU/IND/TEXT5";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor = vendorAccountTxt.getAttribute("value");
			String expVendor = "Vendor B";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "DUBAI";

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "HYDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "WA COGS ITEM";
			
			String actR1TaxCode = select1stRow_3rdColumn.getText();
			String expR1TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR1PurchaseAccount = select1stRow_4thColumn.getText();
			String expR1PurchaseAccount = "WA COGS ACC INV";
			
			String actR1Units = select1stRow_5thColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_9thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_11thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_12thColumn.getText();
			String expR1Gross = "120.00";
			
			String actR1RMA = select1stRow_19thColumn.getText();
			String expR1RMA = "RMA#R1PVVAT1,RMA#R1PVVAT2,RMA#R1PVVAT3,RMA#R1PVVAT4,RMA#R1PVVAT5,RMA#R1PVVAT6,RMA#R1PVVAT7,RMA#R1PVVAT8,RMA#R1PVVAT9,RMA#R1PVVAT10,RMA#R1PVVAT11,RMA#R1PVVAT12";

			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "HYDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "WA COGS ITEM";
			
			String actR2TaxCode = select2ndRow_3rdColumn.getText();
			String expR2TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
			String expR2PurchaseAccount = "WA COGS ACC INV";
			
			String actR2Units = select2ndRow_5thColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_9thColumn.getText();
			String expR2Quantity = "10.00";
			
			String actR2Rate = select2ndRow_11thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_12thColumn.getText();
			String expR2Gross = "100.00";
			
			String actR2RMA = select2ndRow_19thColumn.getText();
			String expR2RMA = "RMA#R2PVVAT1,RMA#R2PVVAT2,RMA#R2PVVAT3,RMA#R2PVVAT4,RMA#R2PVVAT5,RMA#R2PVVAT6,RMA#R2PVVAT7,RMA#R2PVVAT8,RMA#R2PVVAT9,RMA#R2PVVAT10";

			System.out.println("*******************************checkStockLedgerReportBackTrackOption*********************************");
			
			System.out.println("OpenWindowsCount: "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
			System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			System.out.println("RMA             : "+actR1RMA				+"  Value Expected  "+expR1RMA);
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
			System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("RMA             : "+actR2RMA				+"  Value Expected  "+expR2RMA);
			
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			if(actOpenWindowsCount==expOpenWindowsCount 
				&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
				&& actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
				&& actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
				&& actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
				&& actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
				&& actR1Gross.equalsIgnoreCase(expR1Gross) && actR1RMA.equalsIgnoreCase(expR1RMA) 
				&& actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
				&& actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
				&& actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
				&& actR2Gross.equalsIgnoreCase(expR2Gross) && actR2RMA.equalsIgnoreCase(expR2RMA))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
	    

		
		
		
		
		public boolean checkOpeningStockRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksRegister));
			openingStocksRegister.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 12.00, 10.00, 10.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 24.00, 5.00, 10.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[STD RATE COGS ITEM, 12.00, 10.00, 10.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 24.00, 5.00, 10.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[FIFO COGS ITEM, 12.00, 10.00, 10.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[WA COGS ITEM, 12.00, 5.00, 60.00]";
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[WA COGS ITEM, 12.00, 2.00, 24.00]";
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[Grand Total, , 132.00, 57.00, 144.00]";
			
			
			System.out.println("***************************checkOpenigStockRegisterReport*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			Thread.sleep(1000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
					&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
					&& actRow10List.equalsIgnoreCase(expRow10List))
			{
				return true;
			}
			else
			{
				if (actRow10List.equalsIgnoreCase(expRow10List)) 
				{
					return true;
				}
				else 
				{
					return false;
				}
			}
		}

		
		
		
		@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
		public static WebElement  report_FilterCustomizeBtn;
		
		@FindBy(xpath="//a[contains(text(),'Item')]//i")
		public static WebElement  report_FilterItemExpansion;
		
		@FindBy(xpath="//input[@id='5021']")
		public static WebElement  report_FilterItemNameChkbox;
		
		//@FindBy(xpath="(//input[@class='FButton-Primary'])[1]")
		@FindBy(xpath="(//button[@class='Fbutton'])[1]")
		public static WebElement  reports_Filter_Customize_OkBtn;
		
		@FindBy(xpath="//input[@id='FOption_552_0_DefaultFilter_0']")
		public static WebElement  osr_DefaultFilterTxt;
		
		@FindBy(xpath="//span[@id='filterRefresh']")
		public static WebElement  report_Filter_RefreshBtn;
		
		@FindBy(xpath="//tbody/tr[1]/td[6]/span[1]")
		public static WebElement  report_Filter_RefreshConditionBtn;
		
		
		
		@FindBy(xpath="//span[@id='filter_Okbtn_']")
		public static WebElement  report_FilterOkBtn;
		
		@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
		public static WebElement  report_FilterCancelBtn;
		
		
		@FindBy(xpath="(//table[@class='CommonReportTable']/tbody)[1]/tr")
		public static List<WebElement> reportsRowsCount;
		
		
		
		
		public boolean checkOpeningStockRegisterReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			1
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_DefaultFilterTxt));
			osr_DefaultFilterTxt.click();
			osr_DefaultFilterTxt.sendKeys("FIFO COGS ITEM");
			
			Thread.sleep(2000);
			
			osr_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM, 12.00, 10.00, 10.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Grand Total, , 36.00, 20.00, 20.00]";
			
			
			System.out.println("***************************checkOpeningStockRegisterReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 10; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

    	
		
		
		
		@FindBy (xpath="(//div[@id='dvReportDetails']/div/table/tbody)[1]/tr/td[4]")
		public static List<WebElement> reportTableColumn3RowsList;
		
		
		
		public boolean checkOpeningStockRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             String data1=reportTableColumn3RowsList.get(i).getText();
	             
	             System.err.println(data+"  "+data1);
	             
	             if (data.equalsIgnoreCase("BR COGS ITEM") && data1.equalsIgnoreCase("12.00"))
	             {
	            	 reportTableColumn2RowsList.get(i).click();
            		 break;
                 }
		    }
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			String actWarehouse=warehouseTxt.getAttribute("value");
			String expWarehouse="HYDERABAD";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actItem=select1stRow_1stColumn.getText();
			String expItem="BR COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actUnits=select1stRow_2ndColumn.getText();
			String expUnits="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actQuantity=select1stRow_3rdColumn.getText();
			String expQuantity="2.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			String actRate=select1stRow_4thColumn.getText();
			String expRate="5.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			String actGross=select1stRow_5thColumn.getText();
			String expGross="10.00";
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			String actBatch=select1stRow_6thColumn.getText();
			String expBatch="Batch#OSVR1";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String actExpiryDate=select1stRow_8thColumn.getText();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Calendar cal=Calendar.getInstance();
			//cal.add(Calendar.DAY_OF_WEEK, 5); 
			String expExpiryDate=df.format(cal.getTime());
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actItem2=select2ndRow_1stColumn.getText();
			String expItem2="BR COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actUnits2=select2ndRow_2ndColumn.getText();
			String expUnits2="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actQuantity2=select2ndRow_3rdColumn.getText();
			String expQuantity2="1.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actRate2=select2ndRow_4thColumn.getText();
			String expRate2="10.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actGross2=select2ndRow_5thColumn.getText();
			String expGross2="10.00";
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
			String actBatch2=select2ndRow_6thColumn.getText();
			String expBatch2="Batch#OSVR2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			String actExpiryDate2=select2ndRow_8thColumn.getText();
			
			Calendar cal2=Calendar.getInstance();
			//cal2.add(Calendar.DAY_OF_WEEK, 7); 
			
			String expExpiryDate2=df.format(cal2.getTime());
			
			
			System.out.println("**********************checkOpeningStockRegisterReportBackTrackOption*********************");
			
			
			System.out.println("*********** OpenWindowsCount : "+actOpenWindowsCount+"  value expected  "+expOpenWindowsCount);
			System.out.println("*********** Voucher No : "+actDocNo      +"  value expected  "+expDocNo);
			System.out.println("*********** Warehouse  : "+actWarehouse  +"  value expected  "+expWarehouse);
			System.out.println("*********** Item       : "+actItem       +"  value expected  "+expItem);
			System.out.println("*********** Units      : "+actUnits      +"  value expected  "+expUnits);
			System.out.println("*********** Quantity   : "+actQuantity   +"  value expected  "+expQuantity);
			System.out.println("*********** Rate       : "+actRate       +"  value expected  "+expRate);
			System.out.println("*********** Gross      : "+actGross      +"  value expected  "+expGross);
			System.out.println("*********** Batch      : "+actBatch      +"  value expected  "+expBatch);
			System.out.println("*********** ExpiryDate : "+actExpiryDate +"  value expected  "+expExpiryDate);
			System.out.println("*********** Item2       : "+actItem2       +"  value expected  "+expItem2);
			System.out.println("*********** Units2      : "+actUnits2      +"  value expected  "+expUnits2);
			System.out.println("*********** Quantity2   : "+actQuantity2   +"  value expected  "+expQuantity2);
			System.out.println("*********** Rate2       : "+actRate2       +"  value expected  "+expRate2);
			System.out.println("*********** Gross2      : "+actGross2      +"  value expected  "+expGross2);
			System.out.println("*********** Batch2      : "+actBatch2      +"  value expected  "+expBatch2);
			System.out.println("*********** ExpiryDate2 : "+actExpiryDate2 +"  value expected  "+expExpiryDate2);
		 	
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			if(actOpenWindowsCount==expOpenWindowsCount
				 && actDocNo.equalsIgnoreCase(expDocNo) && actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) 
				 && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actRate.equalsIgnoreCase(expRate)
				 && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch) && actExpiryDate.equalsIgnoreCase(expExpiryDate)
				 && actItem2.equalsIgnoreCase(expItem2) && actUnits2.equalsIgnoreCase(expUnits2) && actQuantity2.equalsIgnoreCase(expQuantity2) 
				 && actRate2.equalsIgnoreCase(expRate2) && actGross2.equalsIgnoreCase(expGross2) && actBatch2.equalsIgnoreCase(expBatch2) 
				 && actExpiryDate2.equalsIgnoreCase(expExpiryDate2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockStatement));
			stockStatement.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[36.00, 60.00, 34.00, 62.00, 42.75, , , , ]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Total, 36.00, 60.00, 34.00, 62.00, 42.75, , , , ]";
			
			
			System.out.println("***************************checkStockStatementReport*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		
		@FindBy (xpath="//span[@id='print_report_']")
		public static WebElement sl_ReportPrintBtn;
		
		@FindBy (xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[3]")
		public static WebElement sl_ReportPrintBtn;
		
		
		
		
		public boolean checkStockStatementReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockStatementReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}

		
		
		
		
		
		public boolean checkStockStatementReportWithIncludeServiceTypeItem() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[36.00, 60.00, 34.00, 62.00, 42.75, , , , ]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Total, 36.00, 60.00, 34.00, 62.00, 42.75, , , , ]";
			
			
			System.out.println("***************************checkStockStatementReport*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}

		
		
		
		
		
		
		
		
		
		public boolean checkStockMovementReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovement));
			stockMovement.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_HeaderSelectChkBox));
			sl_HeaderSelectChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 24.00, 84.00, 42.00, 405.11, 23.00, 170.45, 43.00, 318.66, 7.41, , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 36.00, 20.00, 57.00, 46.50, 24.00, 10.00, 69.00, 56.50, 0.82, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 36.00, 20.00, 60.00, 51.50, 34.00, 28.75, 62.00, 42.75, 0.69, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 36.00, 20.00, 96.00, 344.50, 36.00, 595.50, 96.00, 960.00, 10.00, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 132.00, 144.00, 255.00, 847.61, 117.00, 386.30, 270.00, 1,377.91, 18.92, , , ]";
			
			System.out.println("*********************************checkStockMovementReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		@FindBy (xpath="//select[@id='RITCombobox__1']")
		public static WebElement stockMovementDropdown;
		
		
		
		public boolean checkStockMovementReportsWithStockMovementByWarehouseAndIncludeServiceTypeItemOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovementDropdown));
			
			Select sm=new Select(stockMovementDropdown);
			sm.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 24.00, 84.00, 32.00, 331.00, 13.00, 96.34, 43.00, 318.66, 7.41, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 36.00, 20.00, 48.00, 41.50, 15.00, 6.25, 69.00, 55.25, 0.80, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM, 36.00, 20.00, 48.00, 41.50, 22.00, 18.75, 62.00, 42.75, 0.69, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 36.00, 20.00, 84.00, 224.50, 24.00, 27.67, 96.00, 216.83, 2.26, , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, 132.00, 144.00, 212.00, 638.50, 74.00, 149.01, 270.00, 633.49, 11.16, , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[SECUNDERABAD]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[WA COGS ITEM, , , 10.00, 74.11, 10.00, 74.11, , , , , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[FIFO COGS ITEM, , , 9.00, 5.00, 9.00, 5.00, , , , , , ]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[BR COGS ITEM, , , 12.00, 10.00, 12.00, 10.00, , , , , , ]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[STD RATE COGS ITEM, , , 12.00, 120.00, 12.00, 120.00, , , , , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Sub Total, , , 43.00, 209.11, 43.00, 209.11, , , , , , ]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[Grand Total, 132.00, 144.00, 255.00, 847.61, 117.00, 358.11, 270.00, 633.49, 11.16, , , ]";
			
			
			System.out.println("********************checkStockMovementReportsWithStockMovementByWarehouseAndIncludeServiceTypeItemOptions**********************");

			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		public static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy (xpath="//input[@id='5058']")
		public static WebElement report_FilterWarehouseNameChkbox;
		
		@FindBy (xpath="//input[@id='FOption_575_0_DefaultFilter_0']")
		public static WebElement sMovement_DefaultFilterTxt;
		
		
		
		
		public boolean checkStockMovementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_DefaultFilterTxt));
			sMovement_DefaultFilterTxt.click();
			sMovement_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			sMovement_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 24.00, 84.00, 32.00, 331.00, 13.00, 96.34, 43.00, 318.66, 7.41, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 36.00, 20.00, 48.00, 41.50, 15.00, 6.25, 69.00, 55.25, 0.80, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM, 36.00, 20.00, 48.00, 41.50, 22.00, 18.75, 62.00, 42.75, 0.69, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 36.00, 20.00, 84.00, 224.50, 24.00, 27.67, 96.00, 216.83, 2.26, , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, 132.00, 144.00, 212.00, 638.50, 74.00, 149.01, 270.00, 633.49, 11.16, , , ]";
			
			System.out.println("****************************checkStockMovementReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 13; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr/td")
		public static List<WebElement> backTrackItemDetailsMonthsTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table")
		public static WebElement backTrackItemDetailsMonthsTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		public static WebElement backTrackItemDetailsMonths1stRow1stCol;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[1]/div[1]/div[2]/table/tbody/tr[2]/td[1]")
		public static WebElement backTrackItemDetailsMonths2ndRow1stCol;
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table/tbody/tr/td")
		public static List<WebElement> backTrackItemDetailsDaysTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table")
		public static WebElement backTrackItemDetailsDaysTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[2]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		public static WebElement backTrackItemDetailsDays1stRow1stCol;
		
		
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table/tbody/tr/td")
		public static List<WebElement> backTrackItemDetailsVouchersTableList;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table")
		public static WebElement backTrackItemDetailsVouchersTable;
		
		@FindBy (xpath="//div[@id='dvReportRenderBacktracking']/div[3]/div[1]/div[2]/table/tbody/tr[1]/td[1]")
		public static WebElement backTrackItemDetailsVouchers1stRow1stCol;
		
		
		
		@FindBy (xpath="(//table[@class='CommonReportTable']/tbody)[1]/tr/td[2]")
		public static List<WebElement> reportTableColumn1RowsList;
		
		
		public boolean checkStockMovementReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("HYDERABAD"))
	             {
                     int count =i+5;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("FIFO COGS ITEM"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             }
		      }

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("January 2020")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("1");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("36.00");
			expDayList.add("");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick().build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("OpeStk:3");
			expVouchersList.add("");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("OpeStk:3")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="3";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			String actWarehouse=warehouseTxt.getAttribute("value");
			String expWarehouse="HYDERABAD";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Item=select1stRow_1stColumn.getText();
			String expR1Item="FIFO COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actR1Units=select1stRow_2ndColumn.getText();
			String expR1Units="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actR1Quantity=select1stRow_3rdColumn.getText();
			String expR1Quantity="1.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			String actR1Rate=select1stRow_4thColumn.getText();
			String expR1Rate="5.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			String actR1Gross=select1stRow_5thColumn.getText();
			String expR1Gross="5.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
			String actR1Bin=select1stRow_7thColumn.getText();
			String expR1Bin="Bin4";
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Item=select2ndRow_1stColumn.getText();
			String expR2Item="FIFO COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actR2Units=select2ndRow_2ndColumn.getText();
			String expR2Units="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actR2Quantity=select2ndRow_3rdColumn.getText();
			String expR2Quantity="1.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actR2Rate=select2ndRow_4thColumn.getText();
			String expR2Rate="5.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actR2Gross=select2ndRow_5thColumn.getText();
			String expR2Gross="5.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_7thColumn));
			String actR2Bin=select2ndRow_7thColumn.getText();
			String expR2Bin="Bin5";
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Item=select3rdRow_1stColumn.getText();
			String expR3Item="FIFO COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_2ndColumn));
			String actR3Units=select3rdRow_2ndColumn.getText();
			String expR3Units="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_3rdColumn));
			String actR3Quantity=select3rdRow_3rdColumn.getText();
			String expR3Quantity="1.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_4thColumn));
			String actR3Rate=select3rdRow_4thColumn.getText();
			String expR3Rate="10.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_5thColumn));
			String actR3Gross=select3rdRow_5thColumn.getText();
			String expR3Gross="10.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_7thColumn));
			String actR3Bin=select3rdRow_7thColumn.getText();
			String expR3Bin="Bin4";
			

			System.out.println("**********************checkStockMovementReportBackTrackOption*********************");
			
			System.out.println("*********** Voucher No : "+actDocNo        +"  value expected  "+expDocNo);
			System.out.println("*********** Warehouse  : "+actWarehouse    +"  value expected  "+expWarehouse);
			System.out.println("*********************************Row1******************************************");
			System.out.println("*********** Item       : "+actR1Item       +"  value expected  "+expR1Item);
			System.out.println("*********** Units      : "+actR1Units      +"  value expected  "+expR1Units);
			System.out.println("*********** Quantity   : "+actR1Quantity   +"  value expected  "+expR1Quantity);
			System.out.println("*********** Rate       : "+actR1Rate       +"  value expected  "+expR1Rate);
			System.out.println("*********** Gross      : "+actR1Gross      +"  value expected  "+expR1Gross);
			System.out.println("*********** Bin        : "+actR1Bin        +"  value expected  "+expR1Bin);
			System.out.println("*********************************Row2******************************************");
			System.out.println("*********** Item       : "+actR2Item       +"  value expected  "+expR2Item);
			System.out.println("*********** Units      : "+actR2Units      +"  value expected  "+expR2Units);
			System.out.println("*********** Quantity   : "+actR2Quantity   +"  value expected  "+expR2Quantity);
			System.out.println("*********** Rate       : "+actR2Rate       +"  value expected  "+expR2Rate);
			System.out.println("*********** Gross      : "+actR2Gross      +"  value expected  "+expR2Gross);
			System.out.println("*********** Bin        : "+actR2Bin        +"  value expected  "+expR2Bin);
			System.out.println("*********************************Row3******************************************");
			System.out.println("*********** Item       : "+actR3Item       +"  value expected  "+expR3Item);
			System.out.println("*********** Units      : "+actR3Units      +"  value expected  "+expR3Units);
			System.out.println("*********** Quantity   : "+actR3Quantity   +"  value expected  "+expR3Quantity);
			System.out.println("*********** Rate       : "+actR3Rate       +"  value expected  "+expR3Rate);
			System.out.println("*********** Gross      : "+actR3Gross      +"  value expected  "+expR3Gross);
			System.out.println("*********** Bin        : "+actR3Bin        +"  value expected  "+expR3Bin);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actWarehouse.equalsIgnoreCase(expWarehouse) 
					&& actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) 
					&& actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Bin.equalsIgnoreCase(expR1Bin) 
					
					&& actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) 
					&& actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Bin.equalsIgnoreCase(expR2Bin) 
					
					&& actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) && actR3Quantity.equalsIgnoreCase(expR3Quantity) 
					&& actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) && actR3Bin.equalsIgnoreCase(expR3Bin))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkMultiLevelStockMovementReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevelStockMovement));
			multiLevelStockMovement.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || actName.equalsIgnoreCase("STD RATE COGS ITEM") 
						|| actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 24.00, 84.00, 42.00, 405.11, 23.00, 170.45, 43.00, 318.66, 7.41]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 36.00, 20.00, 57.00, 46.50, 24.00, 13.33, 69.00, 56.50, 0.82]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 36.00, 20.00, 60.00, 51.50, 34.00, 28.75, 62.00, 42.75, 0.69]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 36.00, 20.00, 96.00, 344.50, 36.00, 360.00, 96.00, 960.00, 10.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 132.00, 144.00, 255.00, 847.61, 117.00, 572.53, 270.00, 1,377.91, 18.92]";
			
			
			System.out.println("****************************checkMultiLevelStockMovementReports******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_576_0_DefaultFilter_0']")
		public static WebElement mlsm_DefaultFilterTxt;
		
		
		
		public boolean checkMultiLevelStockMovementReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mlsm_DefaultFilterTxt));
			mlsm_DefaultFilterTxt.click();
			mlsm_DefaultFilterTxt.sendKeys("STD RATE COGS ITEM");
			
			Thread.sleep(2000);
			
			mlsm_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Grand Total, , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 12.00, 5.00, 5.00]";
			
			
			System.out.println("***************************checkMultiLevelStockMovementReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 1; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
			reportWithLevel_CloseBtn.click();
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		
		
		
		
		public boolean checkMultiLevelStockMovementReportWithIncludeServiceTypeItemOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 24.00, 84.00, 42.00, 405.11, 23.00, 170.45, 43.00, 318.66, 7.41]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 36.00, 20.00, 57.00, 46.50, 24.00, 13.33, 69.00, 56.50, 0.82]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 36.00, 20.00, 60.00, 51.50, 34.00, 28.75, 62.00, 42.75, 0.69]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 36.00, 20.00, 96.00, 344.50, 36.00, 360.00, 96.00, 960.00, 10.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 132.00, 144.00, 255.00, 847.61, 117.00, 572.53, 270.00, 1,377.91, 18.92]";
			
			
			System.out.println("********************checkMultiLevelStockMovementReportWithIncludeServiceTypeItemOption**********************");

			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkMultiLevelStockMovementReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("WA COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add(Row2Month);

			//expMonthlyList.add(Row2Month);
			expMonthlyList.add("24.00");
			expMonthlyList.add("42.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("43.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("66.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("January 2020")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("1");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();

				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("OpeStk:4");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase("OpeStk:4")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="4";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			String actWarehouse=warehouseTxt.getAttribute("value");
			String expWarehouse="HYDERABAD";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actItem=select1stRow_1stColumn.getText();
			String expItem="WA COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actUnits=select1stRow_2ndColumn.getText();
			String expUnits="Pcs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actQuantity=select1stRow_3rdColumn.getText();
			String expQuantity="12.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			String actRate=select1stRow_4thColumn.getText();
			String expRate="2.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			String actGross=select1stRow_5thColumn.getText();
			String expGross="24.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			String actRMA=select1stRow_9thColumn.getText();
			String expRMA="RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R1OSV10,RMA#R1OSV11,RMA#R1OSV12";
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actItem2=select2ndRow_1stColumn.getText();
			String expItem2="WA COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actUnits2=select2ndRow_2ndColumn.getText();
			String expUnits2="Pcs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actQuantity2=select2ndRow_3rdColumn.getText();
			String expQuantity2="12.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actRate2=select2ndRow_4thColumn.getText();
			String expRate2="5.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actGross2=select2ndRow_5thColumn.getText();
			String expGross2="60.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			String actRMA2=select2ndRow_9thColumn.getText();
			String expRMA2="RMA#R2OSV1,RMA#R2OSV2,RMA#R2OSV3,RMA#R2OSV4,RMA#R2OSV5,RMA#R2OSV6,RMA#R2OSV7,RMA#R2OSV8,RMA#R2OSV9,RMA#R2OSV10,RMA#R2OSV11,RMA#R2OSV12";
			
			System.out.println("**********************checkMultiLevelStockMovementReportBackTrackOption*********************");
			
			System.out.println("*********** Voucher No : "+actDocNo      +"  value expected  "+expDocNo);
			System.out.println("*********** Warehouse  : "+actWarehouse  +"  value expected  "+expWarehouse);
			System.out.println("*********** Item       : "+actItem       +"  value expected  "+expItem);
			System.out.println("*********** Units      : "+actUnits      +"  value expected  "+expUnits);
			System.out.println("*********** Quantity   : "+actQuantity   +"  value expected  "+expQuantity);
			System.out.println("*********** Rate       : "+actRate       +"  value expected  "+expRate);
			System.out.println("*********** Gross      : "+actGross      +"  value expected  "+expGross);
			System.out.println(actRMA);
			System.out.println(expRMA);
			System.out.println("*********** Item2       : "+actItem2       +"  value expected  "+expItem2);
			System.out.println("*********** Units2      : "+actUnits2      +"  value expected  "+expUnits2);
			System.out.println("*********** Quantity2   : "+actQuantity2   +"  value expected  "+expQuantity2);
			System.out.println("*********** Rate2       : "+actRate2       +"  value expected  "+expRate2);
			System.out.println("*********** Gross2      : "+actGross2      +"  value expected  "+expGross2);
			System.out.println(actRMA2);
			System.out.println(expRMA2);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				 && actDocNo.equalsIgnoreCase(expDocNo) && actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) 
				 && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actRate.equalsIgnoreCase(expRate)
				 && actGross.equalsIgnoreCase(expGross) && actRMA.equalsIgnoreCase(expRMA)
				 && actItem2.equalsIgnoreCase(expItem2) && actUnits2.equalsIgnoreCase(expUnits2) && actQuantity2.equalsIgnoreCase(expQuantity2) 
				 && actRate2.equalsIgnoreCase(expRate2) && actGross2.equalsIgnoreCase(expGross2) && actRMA2.equalsIgnoreCase(expRMA2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
				reportWithLevel_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
				reportWithLevel_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkVirtualStockAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStockAnalysis));
			virtualStockAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM, 69.00, , , 6.00, 75.00]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 43.00, , , 14.33, 57.33]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, 112.00, , , 20.33, 132.33]";
			
			
			System.out.println("*********************************checkVirtualStockAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkVirtualStockAnalysisReportWithIncludeServiceTypeItemOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM, 69.00, , , 6.00, 75.00]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 43.00, , , 14.33, 57.33]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, 112.00, , , 20.33, 132.33]";
			
			
			System.out.println("*********************************checkVirtualStockAnalysisReportWithIncludeServiceTypeItemOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkVirtualStockAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("FIFO COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			//expMonthlyList.add(Row2Month);
			expMonthlyList.add(Row2Month);

			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);
			
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("69.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("48.00");
			expVouchersList.add("9.00");
			expVouchersList.add("9.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("48.00");
			expVouchersList.add("");
			expVouchersList.add("9.00");
			expVouchersList.add("39.00");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("39.00");
			expVouchersList.add("");
			expVouchersList.add("6.00");
			expVouchersList.add("33.00");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("33.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("69.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("57.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:4")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	checkValidationMessage("");
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="4";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "FIFO COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "6.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:3";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "60.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
		 	String actBin = select1stRow_20thColumn.getText();
		 	String expBin = "Bin4";
		 	
			System.out.println("**********************checkVirtualStockAnalysisReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Bin              : "+actBin           +"  Value Expected  "+expBin);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBin.equalsIgnoreCase(expBin)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockValuationReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation));
			stockValuation.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, STD RATE COGS ITEM, 96.00, 960.00, 10.00, , ]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Total, , , 96.00, 960.00, 10.00, , ]";
			
			System.out.println("*********************************checkStockValuationReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		//@FindBy (xpath="//span[@id='id_Item_spanplus']")
		@FindBy(xpath="//*[@id='CustomizeTransTree']/ul/li/span")
		public static WebElement sv_CustomizationFieldsItemExpansion;
		
		@FindBy (xpath="//*[@id='id_Item_main_40']/span/span/i")
		//@FindBy(xpath="//*[@id='rd_customization_tree42']/span/span/i")
		public static WebElement sv_CustomizationFieldsPurchaseVarianceExpansion;
		
		@FindBy (xpath="//li[@id='id_Item_main_40_0']")
		//@FindBy(xpath="//*[@id='rd_customization_tree42_0']")
		public static WebElement sv_CustomizationFieldsPurchaseVarianceName;
		
		
		public boolean checkStockValuationCustomizationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sv_CustomizationFieldsItemExpansion));
			sv_CustomizationFieldsItemExpansion.click();
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sv_CustomizationFieldsPurchaseVarianceExpansion));
			getAction().moveToElement(sv_CustomizationFieldsPurchaseVarianceExpansion).click().build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sv_CustomizationFieldsPurchaseVarianceName));
			getAction().doubleClick(sv_CustomizationFieldsPurchaseVarianceName).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
			Thread.sleep(4000);
			
			if (sl_OkBtn.isDisplayed()==true) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
				sl_OkBtn.click();
				
				Thread.sleep(4000);
			}
		    else
		    {
		    	if (osr_customizeCloseBtn.isDisplayed()==true) 
		    	{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeCloseBtn));
					osr_customizeCloseBtn.click();
					
					Thread.sleep(4000);
				}
		    }
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, STD RATE COGS ITEM, 96.00, 960.00, 10.00, , , PURCHASE VARIANCE]";
			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Total, , , 96.00, 960.00, 10.00, , , ]";
			
			
			System.out.println("************************************checkStockValuationCustomizationReport********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			Thread.sleep(1000);
			
			getWaitForAlert();
			getAlert().accept();
			
			String expDeleteMessage = "Layout Deleted Successfully";
		    
		    String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		    
		    Thread.sleep(4000);
		    
		    
		    int reportsHeaderListCount = reportsHeaderList.size();
			ArrayList<String> reportsHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportsHeaderListCount;i++)
			{
				String data = reportsHeaderList.get(i).getText();
				reportsHeaderListArray.add(data);
			}
			String actHeaderList = reportsHeaderListArray.toString();
			String expHeaderList = "[#, Item, Item Code, Item Alias, Quantity, Stock Value, Unit Price, Warehouse, Alternate Quantity]";
		    
		    System.out.println(actHeaderList);
		    System.out.println(expHeaderList);
		    
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		    report_CloseBtn.click();
			
			Thread.sleep(2000);
		    
			if(actMessage.equalsIgnoreCase(expMessage)
				&& actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)
				&& actDeleteMessage.equalsIgnoreCase(expDeleteMessage)
				&& actHeaderList.equalsIgnoreCase(expHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		@FindBy (xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[13]")
		public static WebElement reportWithLevel_CloseBtn;

		
		
		@FindBy (xpath="//input[@id='RITCheckbox__4']")
		public static WebElement sl_DisplayLinearReportChkBox;
		
		
		
		
		public boolean checkStockValuationReportWithStockValuationDisplayLinearReportIncludeServiceTypeItemOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Select s = new Select(sl_StockValuationDropdown);
			s.selectByIndex(2);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DisplayLinearReportChkBox));
			sl_DisplayLinearReportChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[HYDERABAD]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, STD RATE COGS ITEM, 96.00, 216.83, 2.26, HYDERABAD, ]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Total, , , 96.00, 216.83, 2.26, , ]";
			
			
			System.out.println("************checkStockValuationReportWithStockValuationDisplayLinearReportIncludeServiceTypeItemOption***********");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		


		
		public boolean checkStockValuationReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("HYDERABAD"))
	             {
                     int count =i+2;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("STD RATE COGS ITEM"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);

			//expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("132.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add(Row1Date);
			expDayList.add(Row1Date);

			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("36.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("60.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("46.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("96.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("108.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("108.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("108.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("108.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("96.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:6")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="6";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "12.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:2";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "120.00";
		 	
			System.out.println("**********************checkStockValuationReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkStockReportbyTagReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag));
			stockReportByTag.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || actName.equalsIgnoreCase("STD RATE COGS ITEM") 
						|| actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, WA COGS ITEM, 43.00, 7.41, 318.66, , , , , , , 43.00, 7.41, 318.66, , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, FIFO COGS ITEM, 69.00, 0.82, 56.50, , , , , , , 69.00, 0.80, 55.25, , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, BR COGS ITEM, 62.00, 0.69, 42.75, , , , , , , 62.00, 0.69, 42.75, , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, 96.00, 10.00, 960.00, , , , , , , 96.00, 2.26, 216.83, , , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , 270.00, 18.92, 1,377.91, , , , , , , 270.00, 11.16, 633.49, , , , , , , , , ]";

			
			System.out.println("************************************checkStockReportbyTagReports********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockReportbyTagReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockReportbyTagReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		
		
		
		
		public boolean checkStockReportbyTagReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("132.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("36.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("60.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("96.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("108.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("108.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("108.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("108.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("96.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("SalRet:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actSalesAccount = select1stRow_3rdColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actUnits = select1stRow_4thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		 	String actQuantity = select1stRow_6thColumn.getText();
		 	String expQuantity = "12.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		 	String actLSalesInvoice = select1stRow_7thColumn.getText();
		 	String expLSalesInvoice = "NDT50:6";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		 	String actRate = select1stRow_8thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actGross = select1stRow_9thColumn.getText();
		 	String expGross = "120.00";
		 	
			System.out.println("**********************checkStockReportbyTagReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesInvoice +"  Value Expected  "+expLSalesInvoice);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesInvoice.equalsIgnoreCase(expLSalesInvoice)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
				reportWithLevel_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
				reportWithLevel_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkABCAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis));
			abcAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || actName.equalsIgnoreCase("STD RATE COGS ITEM") 
						|| actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[A Product]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 69.00, 56.50]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 62.00, 42.75]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ITEM, 43.00, 318.66]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 96.00, 960.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, 270.00, 1,377.91]";
			
			
			System.out.println("************************************checkABCAnalysisReports********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		@FindBy (xpath="//select[@id='RITCombobox__1']")
		public static WebElement ABCClassificationDropdown;
		
		@FindBy (xpath="//select[@id='RITCombobox__2']")
		public static WebElement ABCCriteriaDropdown;
		
		
		public boolean checkABCAnalysisReportWithClassificationAndCriteriaOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Select Classification = new Select(ABCClassificationDropdown);
			Classification.selectByIndex(1);
			
			Select Criteria = new Select(ABCCriteriaDropdown);
			Criteria.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, , 170.45]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, , 28.75]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, , 13.33]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Sub Total, , 212.53]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[A Product]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[STD RATE COGS ITEM, , 360.00]";
			
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Sub Total, , 360.00]";
			
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[Grand Total, , 572.53]";
			
			
			System.out.println("**************************checkABCAnalysisReportWithClassificationAndCriteriaOptions**********************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockAnalysisByBatchReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch));
			stockAnalysisByBatch.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[PVATR1#V1, 12.00, 0.88, 10.50]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[PVATR2#V1, 14.00, 0.88, 12.25]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[BATCH#OSVR1, 24.00, 0.42, 10.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[EX BATCH UPDATE, 12.00, 0.83, 10.00]";
			
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Grand Total, 62.00, 3.00, 42.75]";
			
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, 86.00, 3.77, 67.25]";
			
			
			System.out.println("*********************************checkStockAnalysisByBatchReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_580_0_DefaultFilter_0']")
		public static WebElement sab_DefaultFilterTxt;
		
		
		
		public boolean checkStockAnalysisByBatchReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sab_DefaultFilterTxt));
			sab_DefaultFilterTxt.click();
			sab_DefaultFilterTxt.sendKeys("SECUNDERABAD");
			
			Thread.sleep(2000);
			
			sab_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			boolean actReportTable = reportsTable.getText().isEmpty();
			boolean expReportTable = true;
			
			System.out.println("*********************************checkStockAnalysisByBatchReportFilterOption*****************************************");
			
			System.out.println(actReportTable);
			System.out.println(expReportTable);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			if(actReportTable==expReportTable && actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//select[@id='RITCombobox__1']")
		public static WebElement stockTypeDropdown;
		
		@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody")
		public static WebElement reportsTable;
		
		
		public boolean checkStockAnalysisByBatchReportWithStockTypeGoodBatches() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTypeDropdown));
			Select s=new Select(stockTypeDropdown);
			s.selectByIndex(2);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[PVATR1#V1, 12.00, 0.88, 10.50]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[PVATR2#V1, 14.00, 0.88, 12.25]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[BATCH#OSVR1, 24.00, 0.42, 10.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[EX BATCH UPDATE, 12.00, 0.83, 10.00]";
			
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Grand Total, 62.00, 3.00, 42.75]";
			
			
			
			 *int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, 86.00, 3.77, 67.25]";
			
			
			System.out.println("*********************************checkStockAnalysisByBatchReportWithStockTypeGoodBatches*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockAnalysisByBatchReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             String data1=reportTableColumn2RowsList.get(i).getText();
	             
	             System.out.println(data+"  "+data1);
	             
	             if (data.equalsIgnoreCase("PVATR2#V1") && data1.equalsIgnoreCase("28.00"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("0.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("0.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);

			//expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("0.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("0.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("36.00");
			expVouchersList.add("36.00");
			expVouchersList.add("0.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("72.00");
			expMonthlyList.add("0.00");
			expVouchersList.add("12.00");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("60.00");
			expVouchersList.add("0.00");
			expVouchersList.add("10.00");
			expVouchersList.add("50.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("50.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("50.00");
			expVouchersList.add("12.00");
			expVouchersList.add("0.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("0.00");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("62.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "SU/IND/TEXT2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor = vendorAccountTxt.getAttribute("value");
			String expVendor = "Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "DUBAI";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "HYDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "BR COGS ITEM";
			
			String actR1TaxCode = select1stRow_3rdColumn.getText();
			String expR1TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR1PurchaseAccount = select1stRow_4thColumn.getText();
			String expR1PurchaseAccount = "BR COGS ACC INV";
			
			String actR1Units = select1stRow_5thColumn.getText();
			String expR1Units = "Dozs";
			
			String actR1Quantity = select1stRow_9thColumn.getText();
			String expR1Quantity = "1.00";
			
			String actR1Rate = select1stRow_11thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_12thColumn.getText();
			String expR1Gross = "10.00";
			
			String actR1Batch = select1stRow_16thColumn.getText();
			String expR1Batch = "PVATR1#V1";

			String actR1Expiry = select1stRow_18thColumn.getText();
			DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
			Calendar R1cal=Calendar.getInstance();
			R1cal.add(Calendar.DATE, 2); 
			String expR1Expiry=dtf.format(R1cal.getTime());
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "HYDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2TaxCode = select2ndRow_3rdColumn.getText();
			String expR2TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
			String expR2PurchaseAccount = "BR COGS ACC INV";
			
			String actR2Units = select2ndRow_5thColumn.getText();
			String expR2Units = "Dozs";
			
			String actR2Quantity = select2ndRow_9thColumn.getText();
			String expR2Quantity = "2.00";
			
			String actR2Rate = select2ndRow_11thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_12thColumn.getText();
			String expR2Gross = "20.00";
			
			String actR2Batch = select2ndRow_16thColumn.getText();
			String expR2Batch = "PVATR2#V1";

			String actR2Expiry = select2ndRow_18thColumn.getText();
			Calendar R2cal=Calendar.getInstance();
			R2cal.add(Calendar.DATE, 5); 
			String expR2Expiry=dtf.format(R2cal.getTime());
		 	
			System.out.println("**********************checkStockAnalysisByBatchReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
			System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
			System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
			System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
				   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
				   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
				   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
				   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
				   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) && actR1Expiry.equalsIgnoreCase(expR1Expiry)
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
				   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
				   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
				   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		

		
		
		
		
		
		
		public boolean checkStockAnalysisByRmaReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByRMA));
			stockAnalysisByRMA.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("WA COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, RMA#R2OSV2, 1.00, 5.00, 5.00, 2, RMA#R2OSV3, 1.00, 5.00, 5.00, 3, RMA#R2OSV4, 1.00, 5.00, 5.00, 4, RMA#R2OSV5, 1.00, 5.00, 5.00, 5, RMA#R2OSV6, 1.00, 5.00, 5.00, 6, RMA#R2OSV7, 1.00, 5.00, 5.00, 7, RMA#R1OSV11, 1.00, 2.00, 2.00, 8, RMA#R1OSV12, 1.00, 2.00, 2.00, 9, RMA#R2OSV10, 1.00, 5.00, 5.00, 10, RMA#R2OSV11, 1.00, 5.00, 5.00, 11, RMA#R2OSV12, 1.00, 5.00, 5.00, 12, RMA#R1PVVAT1, 1.00, 10.50, 10.50, 13, RMA#R1PVVAT2, 1.00, 10.50, 10.50, 14, RMA#R1PVVAT3, 1.00, 10.50, 10.50, 15, RMA#R1PVVAT4, 1.00, 10.50, 10.50, 16, RMA#R1PVVAT5, 1.00, 10.50, 10.50, 17, RMA#R1PVVAT6, 1.00, 10.50, 10.50, 18, RMA#R1PVVAT7, 1.00, 10.50, 10.50, 19, RMA#R1PVVAT8, 1.00, 10.50, 10.50]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[20, RMA#R1PVVAT9, 1.00, 10.50, 10.50, 21, RMA#R2PVVAT1, 1.00, 10.50, 10.50, 22, RMA#R2PVVAT2, 1.00, 10.50, 10.50, 23, RMA#R2PVVAT3, 1.00, 10.50, 10.50, 24, RMA#R2PVVAT4, 1.00, 10.50, 10.50, 25, RMA#R2PVVAT5, 1.00, 10.50, 10.50, 26, RMA#R2PVVAT6, 1.00, 10.50, 10.50, 27, RMA#R2PVVAT7, 1.00, 10.50, 10.50, 28, RMA#R2PVVAT8, 1.00, 10.50, 10.50, 29, RMA#R2PVVAT9, 1.00, 10.50, 10.50, 30, Ex Rma Update, 1.00, 10.00, 10.00, 31, RMA#R1PVVAT10, 1.00, 10.50, 10.50, 32, RMA#R1PVVAT11, 1.00, 10.50, 10.50, 33, RMA#R1PVVAT12, 1.00, 10.50, 10.50, 34, RMA#R2PVVAT10, 1.00, 10.50, 10.50, 35, Ex Rma Update1, 1.00, 10.00, 10.00, 36, Ex Rma Update2, 1.00, 10.00, 10.00, 37, Ex Rma Update3, 1.00, 10.00, 10.00, 38, Ex Rma Update4, 1.00, 10.00, 10.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[39, Ex Rma Update5, 1.00, 10.00, 10.00, 40, Ex Rma Update6, 1.00, 10.00, 10.00, 41, Ex Rma Update7, 1.00, 10.00, 10.00, 42, Ex Rma Update8, 1.00, 10.00, 10.00, 43, Ex Rma Update9, 1.00, 10.00, 10.00, 44, Grand Total, 43.00, 380.00, 380.00]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, Ex Rma Update9, 1.00, 10.00, 10.00, 44, Grand Total, 43.00, 380.00, 380.00]";
			
			System.out.println("*****************************************checkStockAnalysisByRmaReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockAnalysisByRmaReportsPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockAnalysisByRmaReportsPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
		
		
		
		
		
		public boolean checkStockDetailsByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockDetailsByBins));
			stockDetailsByBins.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Bin4, 0, 0, 45.00, 6.00, 39.00]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Bin5, 0, 0, 24.00, , 24.00]";
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Total, , , 69.00, 6.00, 63.00]";
			
			
			System.out.println("*********************************checkStockDetailsByBinsReports*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
				&& actRow4List.equalsIgnoreCase(expRow4List))
			
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		@FindBy (xpath="//a[contains(text(),'Bins')]//i")
		public static WebElement report_FilterBinExpansion;
		
		@FindBy (xpath="//input[@id='5188']")
		public static WebElement report_FilterBinNameChkbox;
		
		@FindBy (xpath="//input[@id='FOption_587_0_DefaultFilter_0']")
		public static WebElement sdb_DefaultFilterTxt;
		
		
		
		public boolean checkStockDetailsByBinsReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinExpansion));
			report_FilterBinExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinNameChkbox));
			
			if (report_FilterBinNameChkbox.isSelected()==false) 
			{
				report_FilterBinNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sdb_DefaultFilterTxt));
			sdb_DefaultFilterTxt.click();
			sdb_DefaultFilterTxt.sendKeys("Bin4");
			
			Thread.sleep(2000);
			
			sdb_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Bin4, 0, 0, 45.00, 6.00, 39.00]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Total, , , 45.00, 6.00, 39.00]";
			
			
			System.out.println("*********************************checkStockDetailsByBinsReportFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinNameChkbox));
			
			if (report_FilterBinNameChkbox.isSelected()==true) 
			{
				report_FilterBinNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 4; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
					&& actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkStockDetailsByBinsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("Bin5"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("69.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("48.00");
			expVouchersList.add("9.00");
			expVouchersList.add("9.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("48.00");
			expVouchersList.add("");
			expVouchersList.add("9.00");
			expVouchersList.add("39.00");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("39.00");
			expVouchersList.add("");
			expVouchersList.add("6.00");
			expVouchersList.add("33.00");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("33.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("69.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("57.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkStockDetailsByBinsReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalanaceByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalancesByBins));
			stockBalancesByBins.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Bin5 Bin5]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 0, 0, 24.00, , 24.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, , , 24.00, , 24.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Bin4 Bin4]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[FIFO COGS ITEM, 0, 0, 45.00, 6.00, 39.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, , , 45.00, 6.00, 39.00]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Grand Total, , , 69.00, 6.00, 63.00]";
			
			
			
			System.out.println("***************************checkStockBalanaceByBinsReports*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			Thread.sleep(1000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
					&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_588_0_DefaultFilter_0']")
		public static WebElement sbb_DefaultFilterTxt;
		
		public boolean checkStockBalanaceByBinsReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", report_FilterBinExpansion);
			
			Thread.sleep(2000); 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinExpansion));
			report_FilterBinExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinNameChkbox));
			
			if (report_FilterBinNameChkbox.isSelected()==false) 
			{
				report_FilterBinNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sbb_DefaultFilterTxt));
			sbb_DefaultFilterTxt.click();
			sbb_DefaultFilterTxt.sendKeys("Bin4");
			
			Thread.sleep(2000);
			
			sbb_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[Bin4 Bin4]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 0, 0, 45.00, 6.00, 39.00]";
			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 45.00, 6.00, 39.00]";
			
			
			System.out.println("*********************************checkStockBalanaceByBinsReportFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBinNameChkbox));
			
			if (report_FilterBinNameChkbox.isSelected()==true) 
			{
				report_FilterBinNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 7; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
					&& actRowCount==expRowCount)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalanaceByBinsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("FIFO COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("69.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("48.00");
			expVouchersList.add("9.00");
			expVouchersList.add("9.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("48.00");
			expVouchersList.add("");
			expVouchersList.add("9.00");
			expVouchersList.add("39.00");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("39.00");
			expVouchersList.add("");
			expVouchersList.add("6.00");
			expVouchersList.add("33.00");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("33.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("69.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("57.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkStockDetailsByBinsReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalancesByItemByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalancesByItemByBins));
			stockBalancesByItemByBins.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Bin4, 0, 0, 45.00, 6.00, , 39.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Bin5, 0, 0, 24.00, , , 24.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Total, , , 69.00, 6.00, , 63.00]";
			
			
			System.out.println("***************************checkStockBalanaceByBinsReports*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			Thread.sleep(1000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List))			
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalancesByItemByBinsReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockBalancesByItemByBinsReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}

		
		
		
		
		
		
		
		
		
		public boolean checkExpiredStockByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(expiredStockByBins));
			expiredStockByBins.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;

			System.out.println("report_Body : "+actReportsTable+" Value Expected : "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		@FindBy (xpath="//span[@id='id_prog_spanPlus']")
		public static WebElement customizationFieldsProgrammableFieldExpansion;
		
		@FindBy (xpath="//li[@id='TColProg-2']/span")
		public static WebElement customizationFieldsProgrammableField;
		
		
		public boolean checkExpiredStockByBinsReportCustomizationOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizationFieldsProgrammableFieldExpansion));
			customizationFieldsProgrammableFieldExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizationFieldsProgrammableField));
			getAction().doubleClick(customizationFieldsProgrammableField).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(4000);
		    
		    if (sl_OkBtn.isDisplayed()==true) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
				sl_OkBtn.click();
				
				Thread.sleep(4000);
			}
		    else
		    {
		    	if (osr_customizeCloseBtn.isDisplayed()==true) 
		    	{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeCloseBtn));
					osr_customizeCloseBtn.click();
					
					Thread.sleep(4000);
				}
		    }
			
		    int reportsHeaderListCount1 = reportsHeaderList.size();
			ArrayList<String> reportsHeaderListArray1 = new ArrayList<String>();
			for(int i=0;i<reportsHeaderListCount1;i++)
			{
				String data = reportsHeaderList.get(i).getText();
				reportsHeaderListArray1.add(data);
			}
			String actHeaderList1 = reportsHeaderListArray1.toString();
			String expHeaderList1= "[#, Bin, Expiry Date, Manufacturing Date, Quantity, Reserved Quantity, On-Hold Quantity, Net Quantity, Programmable Field]";
		    
		    System.out.println(actHeaderList1);
		    System.out.println(expHeaderList1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expDeleteMessage = "Layout Deleted Successfully";
		    
		    String actDeleteMessage = checkValidationMessage(expDeleteMessage);
		    
		    Thread.sleep(4000);
		    
		    if (sl_OkBtn.isDisplayed()==true) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
				sl_OkBtn.click();
				
				Thread.sleep(4000);
			}
		    else
		    {
		    	if (osr_customizeCloseBtn.isDisplayed()==true) 
		    	{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeCloseBtn));
					osr_customizeCloseBtn.click();
					
					Thread.sleep(4000);
				}
		    }
		    
		    int reportsHeaderListCount = reportsHeaderList.size();
			ArrayList<String> reportsHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportsHeaderListCount;i++)
			{
				String data = reportsHeaderList.get(i).getText();
				reportsHeaderListArray.add(data);
			}
			String actHeaderList = reportsHeaderListArray.toString();
			String expHeaderList = "[#, Bin, Expiry Date, Manufacturing Date, Quantity, Reserved Quantity, On-Hold Quantity, Net Quantity]";
		    
		    System.out.println(actHeaderList);
		    System.out.println(expHeaderList);
		    
			if(actMessage.equalsIgnoreCase(expMessage) && actHeaderList1.equalsIgnoreCase(expHeaderList1) && actDeleteMessage.equalsIgnoreCase(expDeleteMessage)
					&& actHeaderList.equalsIgnoreCase(expHeaderList))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalanceByWarehouseReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse));
			stockBalanceByWarehouse.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(4000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 43.00, 43.00, ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 0, 0, 69.00, 6.00, 63.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=2) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM, 0, 62.00, 12.00, 50.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 0, 0, 96.00, 10.00, 86.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 270.00, 71.00, 199.00]";
			
			
			System.out.println("************************************checkStockBalanceByWarehouseReports********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
	
	
		
		
		
		
		
		
		
		public boolean checkStockBalanceByWarehouseReportIncludeServiceTypeItemOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 0, 0, 43.00, 43.00, ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 0, 0, 69.00, 6.00, 63.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=2) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM, 0, 62.00, 12.00, 50.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 0, 0, 96.00, 10.00, 86.00]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 270.00, 71.00, 199.00]";
			
			
			System.out.println("************************************checkStockBalanceByWarehouseReportIncludeServiceTypeItemOption********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	
		
		
		
		
		
		
		
		public boolean checkStockBalanceByWarehouseReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("HYDERABAD HYDERABAD"))
	             {
                     int count =i+5;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("STD RATE COGS ITEM"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("132.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("36.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("60.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("96.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("108.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("108.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("108.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("108.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("96.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT57:SU/IND/TEXT3")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "SU/IND/TEXT3";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor = vendorAccountTxt.getAttribute("value");
			String expVendor = "Vendor B";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = "INR";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = "INDIA";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = "Abu Dhabi";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = "DUBAI";

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "HYDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1TaxCode = select1stRow_3rdColumn.getText();
			String expR1TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR1PurchaseAccount = select1stRow_4thColumn.getText();
			String expR1PurchaseAccount = "STD RATE COGS ACC INV";
			
			String actR1Units = select1stRow_5thColumn.getText();
			String expR1Units = "Dozs";
			
			String actR1Quantity = select1stRow_9thColumn.getText();
			String expR1Quantity = "1.00";
			
			String actR1Rate = select1stRow_11thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_12thColumn.getText();
			String expR1Gross = "10.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "HYDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "STD RATE COGS ITEM";
			
			String actR2TaxCode = select2ndRow_3rdColumn.getText();
			String expR2TaxCode = "Standard Rated Purchase - Recoverable";
			
			String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
			String expR2PurchaseAccount = "STD RATE COGS ACC INV";
			
			String actR2Units = select2ndRow_5thColumn.getText();
			String expR2Units = "Dozs";
			
			String actR2Quantity = select2ndRow_9thColumn.getText();
			String expR2Quantity = "2.00";
			
			String actR2Rate = select2ndRow_11thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_12thColumn.getText();
			String expR2Gross = "20.00";
		 	
			System.out.println("**********************checkStockValuationReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
			System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
			System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
				   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
				   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
				   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
				   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
				   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
				   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
				   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
				   && actR2Gross.equalsIgnoreCase(expR2Gross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockAgeingAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysis));
			ageingAnalysis.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , , , 11.00, 81.52, ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 69.00, 56.50, 48.00, 39.30, , , , , , , , , , , , , 21.00, 17.20, ]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 62.00, 42.75, 48.00, 33.10, , , , , , , , , , , , , 14.00, 9.65, ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 96.00, 960.00, 84.00, 840.00, , , , , , , , , , , , , 12.00, 120.00, ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 270.00, 1,377.91, 212.00, 1,149.54, , , , , , , , , , , , , 58.00, 228.37, ]";
			
			
			System.out.println("***************************checkStockAgeingAnalysisReports*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(1000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))	
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_582_0_DefaultFilter_0']")
		public static WebElement saa_DefaultFilterTxt;
		
		
		public boolean checkStockAgeingAnalysisReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saa_DefaultFilterTxt));
			saa_DefaultFilterTxt.click();
			saa_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(2000);
			
			saa_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 53.00, 318.66, 32.00, 237.14, , , , , , , , , , , , , 21.00, 155.63, ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 78.00, 55.25, 48.00, 38.43, , , , , , , , , , , , , 30.00, 24.02, ]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 74.00, 42.75, 48.00, 33.10, , , , , , , , , , , , , 26.00, 17.93, ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 108.00, 960.00, 84.00, 840.00, , , , , , , , , , , , , 24.00, 240.00, ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 313.00, 1,376.66, 212.00, 1,148.67, , , , , , , , , , , , , 101.00, 437.57, ]";
			
			
			System.out.println("***************************checkStockAgeingAnalysisReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))	
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='MasterGroup__101']")
		public static WebElement stockAgeingAnalysisWarehouseTxt;
		
		@FindBy (xpath="//select[@id='RITCombobox__1']")
		public static WebElement stockAgeingDropdown;
		
		@FindBy (xpath="//input[@id='RITCheckbox__6']")
		public static WebElement ignoreInternalTransferForAgeingChkbox;
		
		@FindBy(xpath="//input[@id='RITCheckbox__9']")
		public static WebElement saa_IncludeServiceTypeItemChkBox;
		
		
		
		public boolean checkStockAgeingAnalysisReportWithOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisWarehouseTxt));
			stockAgeingAnalysisWarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			stockAgeingAnalysisWarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingDropdown));
			Select stockAgeing = new Select(stockAgeingDropdown);
			stockAgeing.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ignoreInternalTransferForAgeingChkbox));
			ignoreInternalTransferForAgeingChkbox.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTypeDropdown));
			Select stockType = new Select(stockTypeDropdown);
			stockType.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saa_IncludeServiceTypeItemChkBox));
			saa_IncludeServiceTypeItemChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , , , 11.00, 81.52, HYDERABAD]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 69.00, 55.25, 48.00, 38.43, , , , , , , , , , , , , 21.00, 16.82, HYDERABAD]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM, 62.00, 42.75, 48.00, 33.10, , , , , , , , , , , , , 14.00, 9.65, HYDERABAD]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[STD RATE COGS ITEM, 96.00, 216.83, 84.00, 189.73, , , , , , , , , , , , , 12.00, 27.10, HYDERABAD]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Grand Total, 270.00, 633.49, 212.00, 498.40, , , , , , , , , , , , , 58.00, 135.09, ]";
			
			
			System.out.println("***************************checkStockAgeingAnalysisReportWithOptions*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List))	
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockAgeingAnalysisReportWithBackTrackOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("HYDERABAD"))
	             {
                     int count =i+5;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("WA COGS ITEM"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("24.00");
			expMonthlyList.add("42.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("43.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("66.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("24.00");
			expDayList.add("42.00");
			expDayList.add("23.00");
			expDayList.add("43.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("42.00");
			expDayList.add("23.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();

			expVouchersList.add("ExeStk:2");
			expVouchersList.add("24.00");
			expVouchersList.add("10.00");
			expVouchersList.add("");
			expVouchersList.add("34.00");
			expVouchersList.add("NDT57:SU/IND/TEXT5");
			expVouchersList.add("34.00");
			expVouchersList.add("22.00");
			expVouchersList.add("");
			expVouchersList.add("56.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("56.00");
			expVouchersList.add("10.00");
			expVouchersList.add("10.00");
			expVouchersList.add("56.00");
			expVouchersList.add("NDT50:5");
			expVouchersList.add("56.00");
			expVouchersList.add("");
			expVouchersList.add("3.00");
			expVouchersList.add("53.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("53.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("43.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("42.00");
			expVouchersList.add("23.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);

			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:5")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="5";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "WA COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "3.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:4";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "30.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
		 	String actRMA = select1stRow_21stColumn.getText();
		 	String expRMA = "RMA#R2OSV8,RMA#R2OSV9,RMA#R1OSV10";
		 	
			System.out.println("**********************checkStockAgeingAnalysisReportWithBackTrackOptions*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("RMA              : "+actRMA           +"  Value Expected  "+expRMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actRMA.equalsIgnoreCase(expRMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
			
			
		public boolean checkAgeingAnalysisByBatchReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch));
			ageingAnalysisByBatch.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("BR COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount-1;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BATCH#OSVR1, 24.00, 10.00, , , , , , , , , , , , , , , 24.00, 10.00, 0]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount-1;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[EX BATCH UPDATE, 12.00, 10.00, 12.00, 10.00, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount-1;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[PVATR1#V1, 12.00, 10.50, 12.00, 10.50, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount-1;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[PVATR2#V1, 14.00, 12.25, 14.00, 12.25, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount-1;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Total, 62.00, 42.75, 38.00, 32.75, , , , , , , , , , , , , 24.00, 10.00, ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Total, 62.00, 42.75, 38.00, 32.75, , , , , , , , , , , 24.00, 15.00, , , , ]";
			
			
			System.out.println("*****************************************checkAgeingAnalysisByBatchReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
					&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//ul[@id='FilterFields_622_0']/li[5]/a/i")
		public static WebElement stockAnalysisByBatch_Filter_Customize_WarehouseExpandBtn;
		
		@FindBy (xpath="//*[@id='FilterFields_622_0']/ul[5]/li[1]/div/label/input")
		public static WebElement stockAnalysisByBatch_Filter_Customize_WarehouseNameChkBox;
		
		@FindBy (xpath="//input[@id='FOption_622_0_DefaultFilter_0']")
		public static WebElement stockAnalysisByBatch_DefaultFilterTxt;
		
		
		public boolean checkStockAnalysisByBatchReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockAnalysisByBatchReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBatchReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ignoreInternalTransferForAgeingChkbox));
			ignoreInternalTransferForAgeingChkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount-1;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BATCH#OSVR1, 24.00, 10.00, , , , , , , , , , , , , , , 24.00, 10.00, 0]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount-1;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[EX BATCH UPDATE, 12.00, 10.00, 12.00, 10.00, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount-1;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[PVATR1#V1, 12.00, 10.50, 12.00, 10.50, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount-1;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[PVATR2#V1, 14.00, 12.25, 14.00, 12.25, , , , , , , , , , , , , , , 0]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount-1;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Total, 62.00, 42.75, 38.00, 32.75, , , , , , , , , , , , , 24.00, 10.00, ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Total, 62.00, 42.75, 38.00, 32.75, , , , , , , , , , , 24.00, 15.00, , , , ]";
			
			
			System.out.println("*****************************************checkAgeingAnalysisByBatchReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
					&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBatchReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("BR COGS ITEM BR COGS ITEM"))
	             {
                     int count =i+5;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("PVATR1#V1"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "BR COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "100.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	
			System.out.println("**********************checkStockAgeingAnalysisReportWithBackTrackOptions*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="(//div[@id='dvReportDetails']/div/table/tbody)[1]/tr/td ")
		public static List<WebElement> reportTableCells;
		
		
		
		public boolean checkAgeingAnalysisByRMAReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByRMA));
			ageingAnalysisByRMA.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("WA COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = "[1, WA COGS ITEM WA COGS ITEM, 2, Ex Rma Update, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 3, Ex Rma Update1, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 4, Ex Rma Update2, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 5, Ex Rma Update3, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 6, Ex Rma Update4, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 7, Ex Rma Update5, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 8, Ex Rma Update6, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 9, Ex Rma Update7, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 10, Ex Rma Update8, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 11, Ex Rma Update9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 12, RMA#R1OSV11, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 13, RMA#R1OSV12, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 14, RMA#R1PVVAT1, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 15, RMA#R1PVVAT10, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 16, RMA#R1PVVAT11, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 17, RMA#R1PVVAT12, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 18, RMA#R1PVVAT2, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 19, RMA#R1PVVAT3, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[20, RMA#R1PVVAT4, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 21, RMA#R1PVVAT5, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 22, RMA#R1PVVAT6, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 23, RMA#R1PVVAT7, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 24, RMA#R1PVVAT8, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 25, RMA#R1PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 26, RMA#R2OSV10, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 27, RMA#R2OSV11, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 28, RMA#R2OSV12, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 29, RMA#R2OSV2, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 30, RMA#R2OSV3, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 31, RMA#R2OSV4, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 32, RMA#R2OSV5, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 33, RMA#R2OSV6, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 34, RMA#R2OSV7, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 35, RMA#R2PVVAT1, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 36, RMA#R2PVVAT10, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 37, RMA#R2PVVAT2, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 38, RMA#R2PVVAT3, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "[39, RMA#R2PVVAT4, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 40, RMA#R2PVVAT5, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 41, RMA#R2PVVAT6, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 42, RMA#R2PVVAT7, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 43, RMA#R2PVVAT8, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , , , 11.00, 81.52]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";
			
			System.out.println("*****************************************checkAgeingAnalysisByRMAReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_623_0_DefaultFilter_0']")
		public static WebElement stockAnalysisByRMA_DefaultFilterTxt;
		
		
		public boolean checkAgeingAnalysisByRMAReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByRMA_DefaultFilterTxt));
			stockAnalysisByRMA_DefaultFilterTxt.click();
			stockAnalysisByRMA_DefaultFilterTxt.sendKeys("SECUNDERABAD");
			
			Thread.sleep(2000);
			
			stockAnalysisByRMA_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportTable = reportsTable.getText().isEmpty();
			boolean expReportTable = true;
			
			System.out.println("****************************checkStockAnalysisByRMAReportWithFilterOption******************************");
			
			System.out.println(actReportTable);
			System.out.println(expReportTable);
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 19; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actReportTable==expReportTable && actRowCount==expRowCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByRMAReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys("Secunderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ignoreInternalTransferForAgeingChkbox));
			ignoreInternalTransferForAgeingChkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			boolean actReportTable = reportsTable.getText().isEmpty();
			boolean expReportTable = true;
			
			
			System.out.println("*****************************************checkAgeingAnalysisByRMAReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions***************************************");
			
			System.out.println(actReportTable);
			System.out.println(expReportTable);
			
			if(actReportTable==expReportTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByRMAReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
			sl_WarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			int reportItemGridListCount=reportTableColumn1RowsList.size();
			   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("WA COGS ITEM WA COGS ITEM"))
	             {
                     int count =i+7;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("Ex Rma Update"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("24.00");
			expMonthlyList.add("42.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("43.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("66.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("24.00");
			expDayList.add("42.00");
			expDayList.add("23.00");
			expDayList.add("43.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("42.00");
			expDayList.add("23.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("24.00");
			expVouchersList.add("10.00");
			expVouchersList.add("");
			expVouchersList.add("34.00");
			expVouchersList.add("NDT57:SU/IND/TEXT5");
			expVouchersList.add("34.00");
			expVouchersList.add("22.00");
			expVouchersList.add("");
			expVouchersList.add("56.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("56.00");
			expVouchersList.add("10.00");
			expVouchersList.add("10.00");
			expVouchersList.add("56.00");
			expVouchersList.add("NDT50:5");
			expVouchersList.add("56.00");
			expVouchersList.add("");
			expVouchersList.add("3.00");
			expVouchersList.add("53.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("53.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("43.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("42.00");
			expVouchersList.add("23.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkAgeingAnalysisByRMAReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//tbody[@id='LandingGridBody']/tr/td[10]")
		public static List<WebElement> ageingAnalysisByBinHomeTableItemNamesList;
		
		
		
		public boolean checkAgeingStockByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingStockByBins));
			ageingStockByBins.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = ageingAnalysisByBinHomeTableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("BSTB") || actName.equalsIgnoreCase("Bin3") || actName.equalsIgnoreCase("BG1") || actName.equalsIgnoreCase("BG2"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Bin5 Bin5]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 24.00, 19.65, 12.00, 9.83, , , , , , , , , , , , , 12.00, 9.83]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, 24.00, 19.65, 12.00, 9.83, , , , , , , , , , , , , 12.00, 9.83]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Bin4 Bin4]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[FIFO COGS ITEM, 54.00, 44.22, 36.00, 29.48, , , , , , , , , , , , , 18.00, 14.74]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, 54.00, 44.22, 36.00, 29.48, , , , , , , , , , , , , 18.00, 14.74]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Grand Total, 78.00, 63.87, 48.00, 39.30, , , , , , , , , , , , , 30.00, 24.57]";
			
			
			System.out.println("*****************************************checkAgeingStockByBinsReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
				
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
					&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_591_0_DefaultFilter_0']")
		public static WebElement stockAnalysisByBin_DefaultFilterTxt;
		
		
		public boolean checkStockAnalysisByBinReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBin_DefaultFilterTxt));
			stockAnalysisByBin_DefaultFilterTxt.click();
			stockAnalysisByBin_DefaultFilterTxt.sendKeys("Secunderabad");
			
			Thread.sleep(2000);
			
			stockAnalysisByBin_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(4000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Bin Update Bin Update]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , , , , , , , , , , , , , , , ]";
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockAnalysisByBinReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 7; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actReportsTable==expReportsTable	&& actRowCount==expRowCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBinReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys("Secunderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ignoreInternalTransferForAgeingChkbox));
			ignoreInternalTransferForAgeingChkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[Bin Update Bin Update]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , , , , , , , , , , , , , , , ]";
			
			
			System.out.println("*****************************************checkAgeingAnalysisByBinReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBinReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys(Keys.END, Keys.SHIFT, Keys.HOME);
			sl_WarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			int reportItemGridListCount=reportTableColumn1RowsList.size();
			   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("Bin5 Bin5"))
	             {
                     int count =i+2;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("FIFO COGS ITEM"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("69.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("48.00");
			expVouchersList.add("9.00");
			expVouchersList.add("9.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("48.00");
			expVouchersList.add("");
			expVouchersList.add("9.00");
			expVouchersList.add("39.00");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("39.00");
			expVouchersList.add("");
			expVouchersList.add("6.00");
			expVouchersList.add("33.00");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("33.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("69.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("57.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkAgeingAnalysisByBinReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkAgeingByItemByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingByItemByBins));
			ageingByItemByBins.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Bin4, 54.00, 44.22, 36.00, 29.48, , , , , , , , , , , , , 18.00, 14.74]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Bin5, 24.00, 19.65, 12.00, 9.83, , , , , , , , , , , , , 12.00, 9.83]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Total, 78.00, 63.87, 48.00, 39.30, , , , , , , , , , , , , 30.00, 24.57]";
			
			
			
			System.out.println("*****************************************checkAgeingByItemByBinsReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
				
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_646_0_DefaultFilter_0']")
		public static WebElement stockByItemByBin_DefaultFilterTxt;
		
		
		public boolean checkStockByItemByBinReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockByItemByBin_DefaultFilterTxt));
			stockByItemByBin_DefaultFilterTxt.click();
			stockByItemByBin_DefaultFilterTxt.sendKeys("Secunderabad");
			
			Thread.sleep(2000);
			
			stockByItemByBin_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(4000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Bin Update, , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Total, , , , , , , , , , , , , , , , , , ]";
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockByItemByBinReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 4; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actReportsTable==expReportsTable && actRowCount==expRowCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkAgeingByItemByBinReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys("Secunderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ignoreInternalTransferForAgeingChkbox));
			ignoreInternalTransferForAgeingChkbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Bin Update, , , , , , , , , , , , , , , , , , ]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Total, , , , , , , , , , , , , , , , , , ]";
			
			
			System.out.println("*****************************************checkAgeingByItemByBinReportWithWarehouseAndIgnoreInternalTransferForAgeingOptions***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkAgeingByItemByBinReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt));
			sl_WarehouseTxt.click();
			sl_WarehouseTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			sl_WarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			sl_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			
			int reportItemGridListCount=reportTableColumn1RowsList.size();
			   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("FIFO COGS ITEM FIFO COGS ITEM"))
	             {
                     int count =i+2;
                     
                     for (int j = i; j < count; j++) 
         		     {
                    	 String data1=reportTableColumn1RowsList.get(j).getText();
			             
                    	 if (data1.equalsIgnoreCase("Bin4"))
                         {
                    		 System.err.println("Item Name : "+data1);
                    		 reportTableColumn1RowsList.get(j).click();
                    		 Thread.sleep(1000);
                    		 break;
                         }
         		     }
	             }
		      }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("57.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("69.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("93.00");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("69.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("57.00");
			expDayList.add("24.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("48.00");
			expVouchersList.add("9.00");
			expVouchersList.add("9.00");
			expVouchersList.add("48.00");
			
			expVouchersList.add("NDT50:7");
			expVouchersList.add("48.00");
			expVouchersList.add("");
			expVouchersList.add("9.00");
			expVouchersList.add("39.00");
			expVouchersList.add("NDT50:4");
			expVouchersList.add("39.00");
			expVouchersList.add("");
			expVouchersList.add("6.00");
			expVouchersList.add("33.00");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("33.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("69.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("57.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);

			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkAgeingByItemByBinReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkReorderReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reorderReport));
			reorderReport.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkReorderReportReport*****************************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkReorderReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			String expMessage = "Nothing to print."; 
			String actMessage = checkValidationMessage(expMessage);
			
			System.out.println("*********************************checkReorderReportPrintOption*****************************************");
			
			System.out.println("Error Message : "+actMessage+"  Value Expected  "+expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		
		public boolean checkFastMovingItemsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItem));
			fastMovingItem.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || 
						actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, STD RATE COGS ITEM, 12.00, 216.83, 2.26, HYDERABAD, 96.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 10.00, 42.75, 0.69, HYDERABAD, 62.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, FIFO COGS ITEM, FIFO COGS ITEM, 6.00, 50.25, 0.73, HYDERABAD, 69.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ITEM, WA COGS ITEM, WA COGS ITEM, 3.00, 318.66, 7.41, HYDERABAD, 43.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , 31.00, 628.49, 11.09, , 270.00]";
			
			
			System.out.println("*********************************checkFastMovingItemsReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_584_0_DefaultFilter_0']")
		public static WebElement fastMovingItems_DefaultFilterTxt;
		
		
		public boolean checkFastMovingItemsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_DefaultFilterTxt));
			fastMovingItems_DefaultFilterTxt.click();
			fastMovingItems_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(2000);
			
			fastMovingItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, WA COGS ITEM, WA COGS ITEM, 3.00, 318.66, 7.41, HYDERABAD, 43.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 3.00, 318.66, 7.41, , 43.00]";
			
			System.out.println("****************************checkFastMovingItemsReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(4000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkFastMovingItemsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("BR COGS ITEM"))
	             {
             		 System.err.println("Item Name : "+data);
             		 reportTableColumn1RowsList.get(i).click();
             		 Thread.sleep(1000);
             		 break;
                  }
      		}
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);

			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "BR COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "100.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	
			System.out.println("**********************checkFastMovingItemsReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkSlowMovingItemsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItem));
			slowMovingItem.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || 
						actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, WA COGS ITEM, WA COGS ITEM, 3.00, 318.66, 7.41, HYDERABAD, 43.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, FIFO COGS ITEM, FIFO COGS ITEM, 6.00, 50.25, 0.73, HYDERABAD, 69.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 10.00, 42.75, 0.69, HYDERABAD, 62.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, STD RATE COGS ITEM, STD RATE COGS ITEM, 12.00, 216.83, 2.26, HYDERABAD, 96.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , 31.00, 628.49, 11.09, , 270.00]";
			
			
			System.out.println("*********************************checkSlowMovingItemsReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_585_0_DefaultFilter_0']")
		public static WebElement slowMovingItems_DefaultFilterTxt;
		
		
		public boolean checkSlowMovingItemsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_DefaultFilterTxt));
			slowMovingItems_DefaultFilterTxt.click();
			slowMovingItems_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			slowMovingItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 10.00, 42.75, 0.69, HYDERABAD, 62.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 10.00, 42.75, 0.69, , 62.00]";
			
			System.out.println("****************************checkSlowMovingItemsReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkSlowMovingItemsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("BR COGS ITEM"))
	             {
             		 System.err.println("Item Name : "+data);
             		 reportTableColumn1RowsList.get(i).click();
             		 Thread.sleep(1000);
             		 break;
                  }
      		}
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "BR COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "100.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	
			System.out.println("**********************checkSlowMovingItemsReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkPeakAndLowBalancesReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakORLowBalances));
			peakORLowBalances.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || 
						actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 0, , 12.00, 56.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 0, , 12.00, 84.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 0, , 24.00, 84.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 0, , 24.00, 108.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, , , , 72.00, , 332.00]";
			
			System.out.println("*********************************checkPeakAndLowBalancesReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_586_0_DefaultFilter_0']")
		public static WebElement peakAndLowBalance_DefaultFilterTxt;
		
		
		public boolean checkPeakAndLowBalancesReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalance_DefaultFilterTxt));
			peakAndLowBalance_DefaultFilterTxt.click();
			peakAndLowBalance_DefaultFilterTxt.sendKeys("FIFO COGS ITEM");
			
			Thread.sleep(2000);
			
			peakAndLowBalance_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM, , , 12.00, 87.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , , 12.00, , 87.00]";
			
			System.out.println("****************************checkPeakAndLowBalancesReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkPeakAndLowBalancesReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("BR COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("NDT50:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "BR COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "100.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	
			System.out.println("**********************checkPeakAndLowBalancesReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkBestSellingItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItem));
			bestSellingItem.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 22.00, 220.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 15.00, 150.00]";
			

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 12.00, 120.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 62.00, 620.00]";
			
			
			System.out.println("*********************************checkBestSellingItemReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//select[@id='RITCombobox__2']")
		public static WebElement bestSellingItemsSortingOnDrpdwn;
		
		@FindBy (xpath="//input[@id='RITCheckbox__3']")
		public static WebElement includeAllVoucherChkBox;
		
		
		
		public boolean checkBestSellingItemReportWithSortingOnAndIncludeAllVouchersChkBox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItemsSortingOnDrpdwn));
			Select s=new Select(bestSellingItemsSortingOnDrpdwn);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeAllVoucherChkBox));
			includeAllVoucherChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 34.00, 168.50]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[STD RATE COGS ITEM, 24.00, 124.50]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[FIFO COGS ITEM, 24.00, 98.50]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[WA COGS ITEM, 23.00, 185.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 105.00, 42.50]";
			
			
			System.out.println("*********************************checkBestSellingItemReportWithSortingOnAndIncludeAllVouchersChkBox*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkBestSellingItemReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{	
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("WA COGS ITEM"))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add("");
			expMonthlyList.add("24.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("24.00");
			expMonthlyList.add("42.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("43.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("66.00");
			expMonthlyList.add("23.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("January 2020")) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add("1");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("24.00");
			expDayList.add("");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("OpeStk:4");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("OpeStk:4")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;
	
		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="4";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			String actWarehouse=warehouseTxt.getAttribute("value");
			String expWarehouse="HYDERABAD";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actItem=select1stRow_1stColumn.getText();
			String expItem="WA COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actUnits=select1stRow_2ndColumn.getText();
			String expUnits="Pcs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actQuantity=select1stRow_3rdColumn.getText();
			String expQuantity="12.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			String actRate=select1stRow_4thColumn.getText();
			String expRate="2.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			String actGross=select1stRow_5thColumn.getText();
			String expGross="24.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			String actRMA=select1stRow_9thColumn.getText();
			String expRMA="RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R1OSV10,RMA#R1OSV11,RMA#R1OSV12";
			
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actItem2=select2ndRow_1stColumn.getText();
			String expItem2="WA COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
			String actUnits2=select2ndRow_2ndColumn.getText();
			String expUnits2="Pcs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
			String actQuantity2=select2ndRow_3rdColumn.getText();
			String expQuantity2="12.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_4thColumn));
			String actRate2=select2ndRow_4thColumn.getText();
			String expRate2="5.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_5thColumn));
			String actGross2=select2ndRow_5thColumn.getText();
			String expGross2="60.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			String actRMA2=select2ndRow_9thColumn.getText();
			String expRMA2="RMA#R2OSV1,RMA#R2OSV2,RMA#R2OSV3,RMA#R2OSV4,RMA#R2OSV5,RMA#R2OSV6,RMA#R2OSV7,RMA#R2OSV8,RMA#R2OSV9,RMA#R2OSV10,RMA#R2OSV11,RMA#R2OSV12";
			
			System.out.println("**********************checkMultiLevelStockMovementReportBackTrackOption*********************");
			
			System.out.println("*********** Voucher No : "+actDocNo      +"  value expected  "+expDocNo);
			System.out.println("*********** Warehouse  : "+actWarehouse  +"  value expected  "+expWarehouse);
			System.out.println("*********** Item       : "+actItem       +"  value expected  "+expItem);
			System.out.println("*********** Units      : "+actUnits      +"  value expected  "+expUnits);
			System.out.println("*********** Quantity   : "+actQuantity   +"  value expected  "+expQuantity);
			System.out.println("*********** Rate       : "+actRate       +"  value expected  "+expRate);
			System.out.println("*********** Gross      : "+actGross      +"  value expected  "+expGross);
			System.out.println(actRMA);
			System.out.println(expRMA);
			System.out.println("*********** Item2       : "+actItem2       +"  value expected  "+expItem2);
			System.out.println("*********** Units2      : "+actUnits2      +"  value expected  "+expUnits2);
			System.out.println("*********** Quantity2   : "+actQuantity2   +"  value expected  "+expQuantity2);
			System.out.println("*********** Rate2       : "+actRate2       +"  value expected  "+expRate2);
			System.out.println("*********** Gross2      : "+actGross2      +"  value expected  "+expGross2);
			System.out.println(actRMA2);
			System.out.println(expRMA2);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				 && actDocNo.equalsIgnoreCase(expDocNo) && actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) 
				 && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actRate.equalsIgnoreCase(expRate)
				 && actGross.equalsIgnoreCase(expGross) && actRMA.equalsIgnoreCase(expRMA)
				 && actItem2.equalsIgnoreCase(expItem2) && actUnits2.equalsIgnoreCase(expUnits2) && actQuantity2.equalsIgnoreCase(expQuantity2) 
				 && actRate2.equalsIgnoreCase(expRate2) && actGross2.equalsIgnoreCase(expGross2) && actRMA2.equalsIgnoreCase(expRMA2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockTransferRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferReport));
			stockTransferReport.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || 
						actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM STD RATE COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[, HYDERABAD, , 12.00, , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, , , , 12.00, , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM BR COGS ITEM]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, HYDERABAD, , 12.00, , , , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, , , , 12.00, , , , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[, HYDERABAD, , 9.00, , , , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Sub Total, , , , 9.00, , , , , ]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[WA COGS ITEM WA COGS ITEM]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[, HYDERABAD, , 10.00, , , , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Sub Total, , , , 10.00, , , , , ]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[Grand Total, , , , 43.00, , , , , ]";
			
			
			System.out.println("****************************************checkStockTransferRegisterReport******************************************");

			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkStockTransferRegisterReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkStockTransferRegisterReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount==expOpenWindowsCount)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='MasterSingle__1']")
		public static WebElement fromWarehouseTxt;
		
		@FindBy (xpath="//input[@id='MasterSingle__2']")
		public static WebElement toWarehouseTxt;

		@FindBy (xpath="//select[@id='RITCombobox__3']")
		public static WebElement summaryOrDetailsDrpdwn;
		
		
		public boolean checkStockTransferRegisterReportWithFromAndToWarehouseAndDetailsOptions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fromWarehouseTxt));
			fromWarehouseTxt.sendKeys("Hyderabad");
			Thread.sleep(2000);
			fromWarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(toWarehouseTxt));
			toWarehouseTxt.sendKeys("Secunderabad");
			Thread.sleep(2000);
			toWarehouseTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summaryOrDetailsDrpdwn));
			Select s=new Select(summaryOrDetailsDrpdwn);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM STD RATE COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[StkTrf:2, HYDERABAD, , 12.00, , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, , , , 12.00, , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[BR COGS ITEM BR COGS ITEM]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[StkTrf:2, HYDERABAD, , 12.00, , , , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, , , , 12.00, , , , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[StkTrf:2, HYDERABAD, , 9.00, , , , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Sub Total, , , , 9.00, , , , , ]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[WA COGS ITEM WA COGS ITEM]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[StkTrf:2, HYDERABAD, , 10.00, , , , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[Sub Total, , , , 10.00, , , , , ]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[Grand Total, , , , 43.00, , , , , ]";
			
			
			System.out.println("****************************************checkStockTransferRegisterReportWithFromAndToWarehouseAndDetailsOptions******************************************");

			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockTransferRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int Count=reportTableColumn1RowsList.size();
			   
			for (int i = 0; i < Count; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("StkTrf:2"))
	             {
	            	 reportTableColumn2RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
			
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("36.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);

			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("StkTrf:2")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo = "2";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferheaderWarehouse1Txt));
			String actFromWarehouse = stockTransferheaderWarehouse1Txt.getAttribute("value");
			String expFromWarehouse = "HYDERABAD";
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actR1Warehouse = select1stRow_1stColumn.getText();
			String expR1Warehouse = "SECUNDERABAD";
			
			String actR1Item = select1stRow_2ndColumn.getText();
			String expR1Item = "STD RATE COGS ITEM";
			
			String actR1Units = select1stRow_3rdColumn.getText();
			String expR1Units = "Pcs";
			
			String actR1Quantity = select1stRow_4thColumn.getText();
			String expR1Quantity = "12.00";
			
			String actR1Rate = select1stRow_6thColumn.getText();
			String expR1Rate = "10.00";
			
			String actR1Gross = select1stRow_7thColumn.getText();
			String expR1Gross = "120.00";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			String actR2Warehouse = select2ndRow_1stColumn.getText();
			String expR2Warehouse = "SECUNDERABAD";
			
			String actR2Item = select2ndRow_2ndColumn.getText();
			String expR2Item = "BR COGS ITEM";
			
			String actR2Units = select2ndRow_3rdColumn.getText();
			String expR2Units = "Pcs";
			
			String actR2Quantity = select2ndRow_4thColumn.getText();
			String expR2Quantity = "12.00";
			
			String actR2Rate = select2ndRow_6thColumn.getText();
			String expR2Rate = "10.00";
			
			String actR2Gross = select2ndRow_7thColumn.getText();
			String expR2Gross = "120.00";
			
			String actR2Batch = select2ndRow_8thColumn.getText();
			String expR2Batch = "BATCH#OSVR2";

			

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			String actR3Warehouse = select3rdRow_1stColumn.getText();
			String expR3Warehouse = "SECUNDERABAD";
			
			String actR3Item = select3rdRow_2ndColumn.getText();
			String expR3Item = "FIFO COGS ITEM";
			
			String actR3Units = select3rdRow_3rdColumn.getText();
			String expR3Units = "Pcs";
			
			String actR3Quantity = select3rdRow_4thColumn.getText();
			String expR3Quantity = "9.00";
			
			String actR3Rate = select3rdRow_6thColumn.getText();
			String expR3Rate = "10.00";
			
			String actR3Gross = select3rdRow_7thColumn.getText();
			String expR3Gross = "90.00";
			
			String actR3Bins = select3rdRow_9thColumn.getText();
			String expR3Bins = "Bin4";
			
			String actR3Bins2 = select3rdRow_10thColumn.getText();
			String expR3Bins2 = "Bin Update";
			
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			String actR4Warehouse = select4thRow_1stColumn.getText();
			String expR4Warehouse = "SECUNDERABAD";
			
			String actR4Item = select4thRow_2ndColumn.getText();
			String expR4Item = "WA COGS ITEM";
			
			String actR4Units = select4thRow_3rdColumn.getText();
			String expR4Units = "Pcs";
			
			String actR4Quantity = select4thRow_4thColumn.getText();
			String expR4Quantity = "10.00";
			
			String actR4Rate = select4thRow_6thColumn.getText();
			String expR4Rate = "10.00";
			
			String actR4Gross = select4thRow_7thColumn.getText();
			String expR4Gross = "100.00";
			
			String actR4RMA = select4thRow_11thColumn.getText();
			String expR4RMA = "RMA#R1OSV1,RMA#R1OSV2,RMA#R1OSV3,RMA#R1OSV4,RMA#R1OSV5,RMA#R1OSV6,RMA#R1OSV7,RMA#R1OSV8,RMA#R1OSV9,RMA#R2OSV1";
			
			
			System.out.println("**********************checkStockTransferRegisterReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
			System.out.println("From Warehouse  : "+actFromWarehouse	+"  Value Expected  "+expFromWarehouse);
			
			System.out.println("*******************************ROW1**********************************");
			
			System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
			System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
			System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
			System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
			System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
			System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
			
			
			System.out.println("*******************************ROW2**********************************");
			
			System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
			System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
			System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
			System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
			System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
			System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
			System.out.println("Bins            : "+actR2Batch				+"  Value Expected  "+expR2Batch);
			
			System.out.println("*******************************ROW3**********************************");
			
			System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
			System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
			System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
			System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
			System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
			System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
			System.out.println("Bins            : "+actR3Bins				+"  Value Expected  "+expR3Bins);
			System.out.println("Bins2           : "+actR3Bins2				+"  Value Expected  "+expR3Bins2);
			
			System.out.println("*******************************ROW4**********************************");
			
			System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
			System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
			System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
			System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
			System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
			System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
			System.out.println("RMA             : "+actR4RMA				+"  Value Expected  "+expR4RMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actFromWarehouse.equalsIgnoreCase(expFromWarehouse)
				   
				   
				   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) && actR1Item.equalsIgnoreCase(expR1Item) && actR1Units.equalsIgnoreCase(expR1Units) 
				   && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) && actR1Gross.equalsIgnoreCase(expR1Gross) 
				   
				   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) && actR2Item.equalsIgnoreCase(expR2Item) && actR2Units.equalsIgnoreCase(expR2Units) 
				   && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) 
				   
				   && actR3Warehouse.equalsIgnoreCase(expR3Warehouse) && actR3Item.equalsIgnoreCase(expR3Item) && actR3Units.equalsIgnoreCase(expR3Units) 
				   && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) && actR3Gross.equalsIgnoreCase(expR3Gross) 
				   && actR3Bins.equalsIgnoreCase(expR3Bins) && actR3Bins2.equalsIgnoreCase(expR3Bins2)
				   
				   && actR4Warehouse.equalsIgnoreCase(expR4Warehouse) && actR4Item.equalsIgnoreCase(expR4Item) && actR4Units.equalsIgnoreCase(expR4Units) 
				   && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) && actR4Gross.equalsIgnoreCase(expR4Gross) 
				   && actR4RMA.equalsIgnoreCase(expR4RMA)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockReservationRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationReport));
			stockReservationReport.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM WA COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Sales Orders, 4, WA COGS ITEM, 40.00, 10.00, Customer A]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sales invoice VAT, 5, WA COGS ITEM, 3.00, 10.00, Customer A]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Sales Orders, 4, WA COGS ITEM, 6.00, 10.00, Customer A]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Sub Total, , , , 43.00, 30.00, ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Sales Orders, 3, FIFO COGS ITEM, 6.00, 10.00, Customer A]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[Sub Total, , , , 6.00, 10.00, ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[Grand Total, , , , 49.00, 40.00, ]";
			
			
			System.out.println("*********************************checkStockReservationRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
					&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_665_0_DefaultFilter_0']")
		public static WebElement stockReservationRegister_DefaultFilterTxt;
		
		
		public boolean checkStockReservationRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationRegister_DefaultFilterTxt));
			stockReservationRegister_DefaultFilterTxt.click();
			stockReservationRegister_DefaultFilterTxt.sendKeys("FIFO COGS ITEM");
			
			Thread.sleep(2000);
			
			stockReservationRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
		
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM FIFO COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Sales Orders, 3, FIFO COGS ITEM, 6.00, 10.00, Customer A]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , , 6.00, 10.00, ]";
			
			System.out.println("****************************checkStockReservationRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 9; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockReservationRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		    int Count=reportTableColumn1RowsList.size();
			   
			for (int i = 0; i < Count; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("Sales invoice VAT"))
	             {
	            	 reportTableColumn2RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			Thread.sleep(4000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="5";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "WA COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = "Std Rate";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = "3.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:4";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = "30.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
		 	String actRMA = select1stRow_21stColumn.getText();
		 	String expRMA = "RMA#R2OSV8,RMA#R2OSV9,RMA#R1OSV10";
		 	
			System.out.println("**********************checkStockReservationRegisterReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("RMA              : "+actRMA           +"  Value Expected  "+expRMA);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			if (actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actRMA.equalsIgnoreCase(expRMA))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkTransactionTypeWiseStockReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionTypeWiseStockReport));
			transactionTypeWiseStockReport.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM")
						|| actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 43.00, 318.66, 7.41, 24.00, 84.00, 22.00, 231.00, , , , , , , , , , , , , , , 10.00, 100.00, , , , , , , , , , , , , 13.00, 96.34, , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 69.00, 56.50, 0.82, 36.00, 20.00, 36.00, 31.50, , , , , , , , , , , , , , , 12.00, 10.00, , , , , , , , , , , , , 15.00, 8.33, , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 62.00, 42.75, 0.69, 36.00, 20.00, 36.00, 31.50, , , , , , , , , , , , , , , 12.00, 10.00, , , , , , , , , , , , , 22.00, 18.75, , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 96.00, 960.00, 10.00, 36.00, 20.00, 60.00, 94.50, , , , , , , , , , , , , 12.00, 120.00, 12.00, 10.00, , , , , , , , , , , , , 24.00, 240.00, , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 270.00, 1,377.91, 18.92, 132.00, 144.00, 154.00, 388.50, , , , , , , , , , , , , 12.00, 120.00, 46.00, 130.00, , , , , , , , , , , , , 74.00, 363.42, , , , , , , , ]";
			
			
			System.out.println("*********************************checkTransactionTypeWiseStockReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_670_0_DefaultFilter_0']")
		public static WebElement tranTypeWiseStock_DefaultFilterTxt;
		
		
		public boolean checkTransactionTypeWiseStockReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranTypeWiseStock_DefaultFilterTxt));
			tranTypeWiseStock_DefaultFilterTxt.click();
			tranTypeWiseStock_DefaultFilterTxt.sendKeys("STD RATE COGS ITEM");
			
			Thread.sleep(2000);
			
			tranTypeWiseStock_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[STD RATE COGS ITEM, 96.00, 960.00, 10.00, 36.00, 20.00, 60.00, 94.50, , , , , , , , , , , , , 12.00, 120.00, 12.00, 10.00, , , , , , , , , , , , , 24.00, 240.00, , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 96.00, 960.00, 10.00, 36.00, 20.00, 60.00, 94.50, , , , , , , , , , , , , 12.00, 120.00, 12.00, 10.00, , , , , , , , , , , , , 24.00, 240.00, , , , , , , , ]";
			
			System.out.println("****************************checkTransactionTypeWiseStockReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(200);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkTransactionTypeWiseStockReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("132.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("36.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("60.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("96.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("108.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("108.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("108.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("108.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("96.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("SalRet:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actSalesAccount = select1stRow_3rdColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actUnits = select1stRow_4thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		 	String actQuantity = select1stRow_6thColumn.getText();
		 	String expQuantity = "12.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		 	String actLSalesInvoice = select1stRow_7thColumn.getText();
		 	String expLSalesInvoice = "NDT50:6";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		 	String actRate = select1stRow_8thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actGross = select1stRow_9thColumn.getText();
		 	String expGross = "120.00";
		 	
			System.out.println("**********************checkStockReportbyTagReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesInvoice +"  Value Expected  "+expLSalesInvoice);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesInvoice.equalsIgnoreCase(expLSalesInvoice)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkActualConsumptionReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport));
			actualConsumptionReport.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ITEM") || actName.equalsIgnoreCase("WA COGS ITEM") || actName.equalsIgnoreCase("BR COGS ITEM")
						|| actName.equalsIgnoreCase("STD RATE COGS ITEM"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[WA COGS ITEM, 24.00, 84.00, , , 22.00, 231.00, 10.00, 100.00, , , , , 13.00, 1,252.41, , , , , , , 43.00, 19.47, 837.41]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[FIFO COGS ITEM, 36.00, 20.00, , , 36.00, 31.50, 12.00, 10.00, , , , , 15.00, 125.00, , , , , , , 69.00, 0.92, 63.50]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[BR COGS ITEM, 36.00, 20.00, , , 36.00, 31.50, 12.00, 10.00, , , , , 22.00, 412.50, , , , , , , 62.00, 5.66, 351.00]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ITEM, 36.00, 20.00, , , 60.00, 94.50, 12.00, 10.00, 12.00, 120.00, , , 24.00, 5,760.00, , , , , , , 96.00, 57.45, 5,515.50]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 132.00, 144.00, , , 154.00, 388.50, 46.00, 130.00, 12.00, 120.00, , , 74.00, 7,549.91, , , , , , , 270.00, 83.51, 6,767.41]";
			
			
			System.out.println("*********************************checkActualConsumptionReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_680_0_DefaultFilter_0']")
		public static WebElement actualConsumption_DefaultFilterTxt;
		
		
		public boolean checkActualConsumptionReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumption_DefaultFilterTxt));
			actualConsumption_DefaultFilterTxt.click();
			actualConsumption_DefaultFilterTxt.sendKeys("BR COGS ITEM");
			
			Thread.sleep(2000);
			
			actualConsumption_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 36.00, 20.00, , , 36.00, 31.50, 12.00, 10.00, , , , , 22.00, 412.50, , , , , , , 62.00, 5.66, 351.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 36.00, 20.00, , , 36.00, 31.50, 12.00, 10.00, , , , , 22.00, 412.50, , , , , , , 62.00, 5.66, 351.00]";
			
			System.out.println("****************************checkTransactionTypeWiseStockReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				report_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int actRowCount = reportsRowsCount.size();
			int expRowCount = 5; 
			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount==expRowCount)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
	    
	                  
	    
	    
	    
	  
		public boolean checkActualConsumptionReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase("STD RATE COGS ITEM"))
	             {
            		 reportTableColumn1RowsList.get(i).click();
            		 Thread.sleep(1000);
            		 break;
                 }
 		     }
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("96.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("132.00");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			
			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("96.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("96.00");
			expDayList.add("36.00");
			expDayList.add("");
			
			System.out.println(actDayList);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("36.00");
			expVouchersList.add("24.00");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("NDT50:6");
			expVouchersList.add("60.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("48.00");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("SalRet:1");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("96.00");
			expVouchersList.add("12.00");
			expVouchersList.add("");
			expVouchersList.add("108.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("108.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("108.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("108.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("96.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("96.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase("SalRet:1")) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			int actOpenWindowsCount = getDriver().getWindowHandles().size();
			int expOpenWindowsCount = 2;

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer="Customer A";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = "HYDERABAD";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = "STD RATE COGS ITEM";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actSalesAccount = select1stRow_3rdColumn.getText();
		 	String expSalesAccount = "Sales - Computers";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actUnits = select1stRow_4thColumn.getText();
		 	String expUnits = "Pcs";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		 	String actQuantity = select1stRow_6thColumn.getText();
		 	String expQuantity = "12.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		 	String actLSalesInvoice = select1stRow_7thColumn.getText();
		 	String expLSalesInvoice = "NDT50:6";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		 	String actRate = select1stRow_8thColumn.getText();
		 	String expRate = "10.00";
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actGross = select1stRow_9thColumn.getText();
		 	String expGross = "120.00";
		 	
			System.out.println("**********************checkActualConsumptionReportBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesInvoice +"  Value Expected  "+expLSalesInvoice);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			if (actMonthlyList.equals(expMonthlyList) && actDayList.equals(expDayList) && actVouchersList.equals(expVouchersList) && actOpenWindowsCount==expOpenWindowsCount
				   && actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
				   && actItem.equalsIgnoreCase(expItem) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
				   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesInvoice.equalsIgnoreCase(expLSalesInvoice)
				   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
	    
	    
	    
		
		
		
		
		public boolean checkLoginWithUserForItemRestriction() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			 userNameDisplay.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(3000);
			 
			 String unamelt="UserForItemRestriction";
				
			 String pawslt="12345";
	      
			 LoginPage.enterUserName(unamelt);
	     
			 LoginPage.enterPassword(pawslt);
	  
			 LoginPage.clickOnSignInBtn();  
	        
			 Thread.sleep(5000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			 String actDashboardLabel                = labelDashboard.getText();
			 String expDashboardLabel                = "Dashboard";	
			 
			if(actDashboardLabel.equalsIgnoreCase(expDashboardLabel))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockReportbyTagReportsWithUserForItemRestriction() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag));
			stockReportByTag.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[FIFO COGS ITEM, FIFO COGS ITEM, 69.00, 0.82, 56.50, , , , , , , 69.00, 0.73, 50.25, , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, BR COGS ITEM, 62.00, 0.69, 42.75, , , , , , , 62.00, 0.69, 42.75, , , , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 131.00, 1.51, 99.25, , , , , , , 131.00, 1.42, 93.00, , , , , , , , , ]";
			
			System.out.println("************************checkStockReportbyTagReportsWithUserForItemRestriction********************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWithLevel_CloseBtn));
			reportWithLevel_CloseBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkLoginWithSU() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			 userNameDisplay.click();
				
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			 logoutOption.click();
			 
			 Thread.sleep(3000);
			 
			 String unamelt="su";
				
			 String pawslt="su";
	      
			 LoginPage.enterUserName(unamelt);
	     
			 LoginPage.enterPassword(pawslt);
	  
			 LoginPage.clickOnSignInBtn();  
	        
			 Thread.sleep(5000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			 boolean actDashboardLabel                = labelDashboard.isDisplayed();
			 boolean expDashboardLabel                = true;	
			 
			if(actDashboardLabel==expDashboardLabel)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		@FindBy(xpath="//tr[@id='tblHeaderReportRender']/th")
		public static List<WebElement> reportHeader;
		
		@FindBy(xpath="//a[@id='excel_report_']")
       	public static WebElement reportExcel;
		
		public boolean checkStockStatementReportInSERVER() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			LoginPage lp=new LoginPage(getDriver()); 
			
			String unamelt="su";
					      
			String pawslt="su";
					      
			lp.enterUserName(unamelt);
			
			Thread.sleep(3000);
					
			lp.enterPassword(pawslt);
			
			Thread.sleep(3000);
			
			companyDropDownList.sendKeys("ADISHWAR AUTO RIDE INDIA public LIMITED‎");
			
	        Thread.sleep(2000);
			
			lp.clickOnSignInBtn();
			
			Thread.sleep(5000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovement));
			stockStatement.click();
			
			Thread.sleep(6000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("40400N300001"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			String actreportHeader;
			String expreportHeader;
			String actRow1List;
			String expRow1List;
			String actRow2List;
			String expRow2List;
			String actRow3List;
			String expRow3List;
			String actRow4List;
			String expRow4List;
			String actRow5List;
			String expRow5List;
			String actRow6List;
			String expRow6List;
			
			for(int s1=0;s1<1;s1++)
			{
				System.err.println("RUN TIME : "+(s1+1));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
            report_ExportBtn.click();
            
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportExcel));
            reportExcel.click();
            
            Thread.sleep(4000);
			
			int reportHeaderCount = reportHeader.size();
			ArrayList<String> reportHeaderArray = new ArrayList<String>();
			for(int i=1;i<reportHeaderCount;i++)
			{
				String data = reportHeader.get(i).getText();
				reportHeaderArray.add(data);
			}
			 actreportHeader = reportHeaderArray.toString();
			 expreportHeader = "[Date, Item Name, Purchase Type Name, Opening Balance, Received Quantity, Issued Quantity, Balance Quantity, Value, Warehouse Name]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			 actRow1List = reportsRow1ListArray.toString();
			 expRow1List = "[CLUTCH CABLE 40400N300001, , , , , , , , ]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			 actRow2List = reportsRow2ListArray.toString();
			 expRow2List = "[CLUTCH CABLE, IMPORT SPARES, , 1.00, , 1.00, 271.50, CKD Claim Parts]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			 actRow3List = reportsRow3ListArray.toString();
			 expRow3List = "[CLUTCH CABLE, Import SKD & CBU, 1.00, 1.00, , 2.00, 456.30, CKD Claim Parts]";
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			 actRow4List = reportsRow4ListArray.toString();
			 expRow4List = "[CLUTCH CABLE, , 2.00, , 2.00, , , CKD Claim Parts]";
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			 actRow5List = reportsRow5ListArray.toString();
			 expRow5List = "[CLUTCH CABLE, , , 2.00, , 2.00, 10.56, CKD Claim Parts]";
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			 actRow6List = reportsRow6ListArray.toString();
			 expRow6List = "[Total, , , 3.00, 4.00, 2.00, 2.00, 10.56, ]";
			
			
			System.out.println("***************************checkStockStatementReport*********************************");
			System.err.println(actreportHeader);
			System.err.println(expreportHeader);
			System.out.println("**************************************************************");
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			System.out.println("**************************************************************");
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			System.out.println("**************************************************************");
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			System.out.println("**************************************************************");
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			System.out.println("**************************************************************");
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			System.out.println("**************************************************************");
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			System.out.println("**************************************************************");
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
		
			if(actreportHeader.equalsIgnoreCase(expreportHeader) &&
					actRow1List.equalsIgnoreCase(expRow1List) &&
					actRow2List.equalsIgnoreCase(expRow2List) &&
					actRow3List.equalsIgnoreCase(expRow3List) &&
					actRow4List.equalsIgnoreCase(expRow4List) &&
					actRow5List.equalsIgnoreCase(expRow5List) &&
					actRow6List.equalsIgnoreCase(expRow6List))
			{
				res= true;
			}
			else
			{
				res= false;
				break;
			}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();

			if(res)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
   	
   	boolean res= false;
		
		
		
   		
   	@FindBy (xpath="//table[@class='CommonReportTable']/tbody/tr/td")
   	public static List<WebElement> reportTableList;
   	
   	
   	@FindBy (xpath="//*[@id='lstPage_']")
   	public static WebElement reportLastBtn;
   	
   	
   	public boolean checkStockMovementReportInSERVER() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
		
		Thread.sleep(3000);
				
		lp.enterPassword(pawslt);
		
		Thread.sleep(3000);
		
		companyDropDownList.sendKeys("ADISHWAR AUTO RIDE INDIA public LIMITED‎");
		
        Thread.sleep(2000);
		
		lp.clickOnSignInBtn();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovement));
		stockMovement.click();
		
		Thread.sleep(6000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("SFG"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(1);
		
		String actreportHeader;
		String expreportHeader;
		String actPage1List;
		String expPage1List;
		String actPage2List;
		String expPage2List;
		
		for(int s1=0;s1<=50;s1++)
		{
			System.err.println("RUN TIME : "+(s1+1));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(4000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	        
			Thread.sleep(2000);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
	        report_ExportBtn.click();
	        
	        Thread.sleep(2000);
	        
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportExcel));
	        reportExcel.click();
	        
	        Thread.sleep(4000);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	        
			int reportHeaderCount = reportHeader.size();
			ArrayList<String> reportHeaderArray = new ArrayList<String>();
			for(int i=1;i<reportHeaderCount;i++)
			{
				String data = reportHeader.get(i).getText();
				reportHeaderArray.add(data);
			}
			 actreportHeader = reportHeaderArray.toString();
			 expreportHeader = "[Code, Item, Opening Balance Qty, Opening Balance Value, Received Quantity, Received Stock Value, Issued Quantity, Issued Stock Value, Balance Quantity, Balance Stock Value, Average Rate]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
			int reportP1TableListCount = reportTableList.size();
			ArrayList<String> reportP1TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP1TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP1TableListArray.add(data);
			}
			 actPage1List = reportP1TableListArray.toString();
			 expPage1List = "[1, ENBA0001, ENGINE ASSEMBLY COMPLETE TNT 300, , , 262.00, , 262.00, , , , , 2, ENBC0001, ENGINE ASSEMBLY COMPLETE 302R, 1.00, , 155.00, , 156.00, , , , , 3, ENBB0001, ENGINE ASSEMBLY COMPLETE TNT 600 I & GT, , , 100.00, , 100.00, , , , , 4, ENBD0001, ENGINE ASSEMBLY COMPLETE TRK502, , , 270.00, , 270.00, , , , , 5, ENBF0001, ENGINE ASSLY IMPERIALE 400, , , 2,136.00, , 2,136.00, , , , , 6, ENBF0002, ENGINE ASSLY IMPERIALE 400 BSVI, , , 2,493.00, 4,34,67,546.32, 1,679.00, 3,06,50,041.15, 814.00, 1,28,17,505.16, 15,746.32, 7, ENBH0001, ENGINE ASSLY LEONCINO 250, , , 137.00, , 137.00, , , , , 8, ENBE0001, ENGINE ASSLY LEONCINO 500, , , 164.00, , 164.00, , , , , 9, SFBF01B1, SEMI FINISH VEH. ASSLY IMPERIALE 400-BLACK, , , 973.00, 6,63,44,102.80, 973.00, 6,63,44,102.80, , , , 10, SFBF01R1, SEMI FINISH VEH. ASSLY IMPERIALE 400-RED, , , 843.00, 7,42,70,939.40, 843.00, 7,42,70,939.40, , , , 11, SFBF01S1, SEMI FINISH VEH. ASSLY IMPERIALE 400-SILVER, , , 298.00, 2,60,97,264.50, 298.00, 2,60,97,264.50, , , , 12, SFBH01BN, SEMI FINISH VEH. ASSLY KIT LEONCINO 250-BROWN, , , 26.00, 38,16,298.20, 26.00, 38,16,298.20, , , , 13, SFBH01GY, SEMI FINISH VEH. ASSLY LEONCINO 250-GREY, , , 30.00, 44,02,053.40, 30.00, 44,02,053.40, , , , 14, SFBH01R1, SEMI FINISH VEH. ASSLY LEONCINO 250-RED, , , 49.00, 71,92,255.28, 49.00, 71,92,255.28, , , ]";
			 
			 Thread.sleep(2000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportLastBtn));
			 reportLastBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportP2TableListCount = reportTableList.size();
			ArrayList<String> reportP2TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP2TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP2TableListArray.add(data);
			}
			 actPage2List = reportP2TableListArray.toString();
			 expPage2List = "[29, SFBA01R1, SEMI. FINISH VEHICLE ASSLY TNT 300 - RED, , , 57.00, 1,00,84,350.51, 57.00, 1,00,84,350.51, , , , 30, SFBA01W1, SEMI. FINISH VEHICLE ASSLY TNT 300 - WHITE, , , 113.00, 1,99,89,176.81, 113.00, 1,99,89,176.81, , , , 31, SFBB01B1, SEMI. FINISH VEHICLE ASSLY TNT 600 I - BLACK, , , 38.00, 1,15,33,760.00, 38.00, 1,15,33,760.00, , , , 32, SFBB01R1, SEMI. FINISH VEHICLE ASSLY TNT 600 I - RED, , , 30.00, 91,05,600.00, 30.00, 91,05,600.00, , , , 33, SFBB01W1, SEMI. FINISH VEHICLE ASSLY TNT 600 I - WHITE, , , 39.00, 1,16,68,464.00, 39.00, 1,16,68,464.00, , , , 34, VENBF0001, VIRTUAL ENGINE ASSLY IMPERIALE 400, , , 2,143.00, , 2,143.00, , , , , 35, Grand Total, , 1.00, , 11,076.00, 46,85,14,249.83, 10,263.00, 45,56,96,744.66, 814.00, 1,28,17,505.16, 15,746.32]";
		
			System.out.println("***************************checkStockMovementReport*********************************");
			System.err.println(actreportHeader);
			System.err.println(expreportHeader);
			System.out.println("**************************************************************");
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			System.out.println("**************************************************************");
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			System.out.println("**************************************************************");
	
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
	
		if(actreportHeader.equalsIgnoreCase(expreportHeader) &&
				actPage1List.equalsIgnoreCase(expPage1List) &&
				actPage2List.equalsIgnoreCase(expPage2List))
		{
			res= true;
		}
		else
		{
			res= false;
			break;
		}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if(res)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	 
	 
   	
   	
   	
   	public boolean checkStockLedgerReportInSERVER() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
		
		Thread.sleep(3000);
				
		lp.enterPassword(pawslt);
		
		Thread.sleep(3000);
		
		companyDropDownList.sendKeys("ADISHWAR AUTO RIDE INDIA public LIMITED?");
		
        Thread.sleep(2000);
		
		lp.clickOnSignInBtn();
		
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
		stockLedger.click();
		
		Thread.sleep(6000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
		sl_SelectAllItemsChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(1);
		
		String actreportHeader;
		String expreportHeader;
		String actPage1List;
		String expPage1List;
		String actPage2List;
		String expPage2List;
		
		String actPage3List;
		String expPage3List;
		String actPage4List;
		String expPage4List;
		String actPage5List;
		String expPage5List;
		
		
		for(int s1=0;s1<=50;s1++)
		{
			System.err.println("RUN TIME : "+(s1+1));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
	        Thread.sleep(4000);
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	        
			int reportHeaderCount = reportHeader.size();
			ArrayList<String> reportHeaderArray = new ArrayList<String>();
			for(int i=1;i<reportHeaderCount;i++)
			{
				String data = reportHeader.get(i).getText();
				reportHeaderArray.add(data);
			}
			 actreportHeader = reportHeaderArray.toString();
			 expreportHeader = "[Date, Voucher, Batch, Base Link doc. number, Account Name, Warehouse Name, Department Name, Item Name, Received, Issued, Balance, Avg Rate, VIN No, Engine No, Key No]";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
	
			int reportP1TableListCount = reportTableList.size();
			ArrayList<String> reportP1TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP1TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP1TableListArray.add(data);
			}
			 actPage1List = reportP1TableListArray.toString();
			 expPage1List = "[1, 0 92300P250000, , , , , , , , , , , , , , , 2, 03-05-2019, KITD:3, , , , Vehicle Assembly, , , 2.00, , 2.00, , , , , 3, 07-05-2019, KITD:4, , , , Vehicle Assembly, , , 2.00, , 4.00, , , , , 4, 10-05-2019, KITD:5, , , , Vehicle Assembly, , , 7.00, , 11.00, , , , , 5, 10-05-2019, KITD:10, , , , Vehicle Assembly, , , 4.00, , 15.00, , , , , 6, 13-05-2019, KITD:17, , , , Vehicle Assembly, , , 10.00, , 25.00, , , , , 7, 13-05-2019, KITD:18, , , , Vehicle Assembly, , , 2.00, , 27.00, , , , , 8, 13-05-2019, KITD:19, , , , Vehicle Assembly, , , 15.00, , 42.00, , , , , 9, 12-09-2019, KITD:149, , , , Vehicle Assembly, , , 3.00, , 45.00, , , , , 10, 19-09-2019, KITD:151, , , , Vehicle Assembly, , , 5.00, , 50.00, , , , , 11, 23-09-2019, KITD:152, , , , Vehicle Assembly, , , 5.00, , 55.00, , , , , 12, 24-09-2019, KITD:153, , , , Vehicle Assembly, , , 5.00, , 60.00, , , , , 13, 25-09-2019, KITD:154, , , , Vehicle Assembly, , , 1.00, , 61.00, , , , , 14, 08-11-2019, KITD:258, , , , Vehicle Assembly, , , 12.00, , 73.00, , , , , 15, 08-11-2019, KITD:259, , , , Vehicle Assembly, , , 7.00, , 80.00, , , , ]";
			 
			 Thread.sleep(2000);
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			 report_NextBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportP2TableListCount = reportTableList.size();
			ArrayList<String> reportP2TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP2TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP2TableListArray.add(data);
			}
			 actPage2List = reportP2TableListArray.toString();
			 expPage2List = "[16, 08-11-2019, KITD:260, , , , Vehicle Assembly, , , 2.00, , 82.00, , , , , 17, 13-11-2019, KITD:269, , , , Vehicle Assembly, , , 3.00, , 85.00, , , , , 18, 13-11-2019, KITD:270, , , , Vehicle Assembly, , , 6.00, , 91.00, , , , , 19, 13-11-2019, KITD:271, , , , Vehicle Assembly, , , 1.00, , 92.00, , , , , 20, 10-12-2019, KITD:325, , , , Vehicle Assembly, , , 9.00, , 101.00, , , , , 21, 14-03-2020, MatrIss:MI19-20STR0003, , MatrlReq : MR19-20SPR0029, , KIT Warehouse ( import BOM Parts ), STORES, , , 1.00, 100.00, , , , , 22, 31-03-2020, ImpGRN:GRNQJ 00061, , ImpPO : AARI1920IMP0077, QIANJIANG MOTOR (H.K.) LIMITED, CKD Claim Parts, OPERATIONS, , 1.00, , 101.00, 2.56, , , , 23, 30-06-2020, ShoStk:SHR20-21STK0011, , , , Vehicle Assembly, , , , 101.00, , , , , , 24, 30-06-2020, ShoStk:SHR20-21STK0031, , , , CKD Claim Parts, , 0, , 1.00, 1.00, , , , , 25, 30-06-2020, ExeStk:EXS20-21STK0090, , , , KIT Warehouse ( import BOM Parts ), , , 1.00, , , , , , , 26, 01-07-2020, ExeStk:EXS20-21STK0048, , , , CKD Claim Parts, STORES, , 1.00, , 1.00, 1.92, , , , 27, Sub Total, , , , , , , , , , , , , , , 28, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll PKG0001, , , , , , , , , , , , , , , 29, , Opening balance, , , , , , , 8.00, , 8.00, , , , , 30, 16-04-2019, GRNDom:GRNCON00001, , PurOrdr : AARI/19-20/007, RAJ ENTERPRISE, Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 15.00, , 23.00, 433.70, , , , 31, 31-05-2019, ShoStk:2, , , , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 22.00, 433.70, , , , 32, 31-05-2019, ShoStk:3, , , , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 7.00, 15.00, 433.70, , , , 33, 25-06-2019, NDT150:40, , PrdReq : MRSto000045, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 14.00, 433.70, , , , 34, 17-07-2019, NDT150:71, , PrdReq : MRSto000082, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 13.00, 433.70, , , , 35, 22-08-2019, NDT150:123, , PrdReq : MR1920/00030, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 12.00, 433.70, , , , 36, 30-09-2019, ShoStk:12, , , , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 11.00, 433.70, , , , 37, 01-10-2019, NDT150:190, , PrdReq : MRSto000048, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 10.00, 433.70, , , , 38, 31-10-2019, NDT150:208, , PrdReq : MR1920/00123, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 9.00, 433.70, , , , 39, 07-11-2019, GRNDom:GRNDMC00078, , PurOrdr : AARI/19-20/041, RAJ ENTERPRISE, Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 10.00, , 19.00, 665.00, , , , 40, 30-11-2019, NDT150:231, , PrdReq : MR1920/00167, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 4.00, 15.00, 665.00, , , , 41, 19-12-2019, NDT150:237, , PrdReq : MR1920/00174, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 14.00, 665.00, , , , 42, 16-01-2020, NDT150:254, , PrdReq : MR1920/00190, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 13.00, 665.00, , , , 43, 25-01-2020, GRNDom:GRNDMC00240, , PurOrdr : AARI/19-20/113, RAJ ENTERPRISE, Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 30.00, , 43.00, 665.00, , , ]";
			 
			 Thread.sleep(2000);
 			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			 report_NextBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportP3TableListCount = reportTableList.size();
			ArrayList<String> reportP3TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP3TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP3TableListArray.add(data);
			}
			 actPage3List = reportP3TableListArray.toString();
			 expPage3List = "[44, 25-01-2020, NDT150:280, , PrdReq : MR1920/00219, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 4.00, 39.00, 665.00, , , , 45, 25-01-2020, NDT150:294, , PrdReq : MR1920/00234, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 3.00, 36.00, 665.00, , , , 46, 02-02-2020, NDT150:302, , PrdReq : MR1920/00242, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 3.00, 33.00, 665.00, , , , 47, 04-02-2020, NDT150:311, , PrdReq : MR1920/00253, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 32.00, 665.00, , , , 48, 11-02-2020, NDT150:323, , PrdReq : MR1920/00266, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 30.00, 665.00, , , , 49, 03-03-2020, NDT150:327, , PrdReq : MR1920/00270, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 29.00, 665.00, , , , 50, 15-03-2020, NDT150:366, , PrdReq : MR1920/00312, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 4.00, 25.00, 665.00, , , , 51, 17-03-2020, NDT150:369, , PrdReq : MR1920/00315, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 24.00, 665.00, , , , 52, 17-03-2020, GRNDom:GRNDMC00368, , PurOrdr : AARI/19-20/113, RAJ ENTERPRISE, Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 30.00, , 54.00, 665.00, , , , 53, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 54.00, , , , , , 54, 31-03-2020, ExeStk:EXSTOCK006, , , , Consumables WH, , 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 40.00, , 40.00, 665.00, , , , 55, 19-06-2020, MatrIss:MI20-21STR0010, , , , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 38.00, 665.00, , , , 56, 23-06-2020, NDT150:MI20-21/00010, , PrdReq : MR2021/00010, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 8.00, 30.00, 665.00, , , , 57, 24-06-2020, NDT150:MI20-21/00012, , PrdReq : MR2021/00012, , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 29.00, 665.00, , , ]";
			 
			 Thread.sleep(2000);
 			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			 report_NextBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportP4TableListCount = reportTableList.size();
			ArrayList<String> reportP4TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP4TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP4TableListArray.add(data);
			}
			 actPage4List = reportP4TableListArray.toString();
			 expPage4List = "[58, 30-06-2020, ShoStk:SHR20-21STK0030, , , , Consumables WH, , 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 28.00, 1.00, 665.00, , , , 59, 01-07-2020, ExeStk:EXS20-21STK0034, , , , Consumables WH, STORES, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 28.00, , 29.00, 665.00, , , , 60, 04-07-2020, NDT150:MI20-21/00018, , PrdReq : MR2021/00018, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 28.00, 665.00, , , , 61, 31-07-2020, NDT150:MI20-21/00028, , PrdReq : MR2021/00029, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 27.00, 665.00, , , , 62, 08-08-2020, NDT150:MI20-21/00054, , PrdReq : MR2021/00054, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 26.00, 665.00, , , , 63, 28-08-2020, NDT150:MI20-21/00086, , PrdReq : MR2021/00083, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 24.00, 665.00, , , , 64, 28-08-2020, MatrIss:MI20-21STR0017, , MatrlReq : MR20-21SPR0022, , Consumables WH, Spares, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 10.00, 14.00, 665.00, , , , 65, 28-08-2020, STKRCT:STOR20-21SPR0035, , , , Main WH, Spares, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 10.00, , 24.00, 387.92, , , , 66, 12-09-2020, NDT150:MI20-21/00115, , PrdReq : MR2021/00114, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 6.00, 18.00, 387.92, , , , 67, 16-09-2020, NDT150:MI20-21/00120, , PrdReq : MR2021/00118, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 8.00, 10.00, , , , , 68, 22-09-2020, NDT150:MI20-21/00122, , PrdReq : MR2021/00120, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 9.00, , , , , 69, 23-09-2020, GRNDom:GRN20-21DMC0226, , PurOrdr : AARI/20-21/062, RAJ ENTERPRISE, Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, 15.00, , 24.00, 415.63, , , , 70, 30-09-2020, NDT150:MI20-21/00133, , PrdReq : MR2021/00132, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 22.00, 415.63, , , , 71, 07-10-2020, NDT150:MI20-21/00138, , PrdReq : MR2021/00136, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 21.00, 415.63, , , ]";
			 
			 Thread.sleep(2000);
 			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			 report_NextBtn.click();
			 
			 Thread.sleep(2000);
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportP5TableListCount = reportTableList.size();
			ArrayList<String> reportP5TableListArray = new ArrayList<String>();
			for(int i=0;i<reportP5TableListCount;i++)
			{
				String data = reportTableList.get(i).getText();
				reportP5TableListArray.add(data);
			}
			 actPage5List = reportP5TableListArray.toString();
			 expPage5List = "[72, 20-10-2020, NDT150:MI20-21/00168, , PrdReq : MR2021/00161, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 19.00, 415.63, , , , 73, 21-10-2020, NDT150:MI20-21/00169, , PrdReq : MR2021/00162, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 18.00, 415.63, , , , 74, 27-10-2020, NDT150:MI20-21/00176, , PrdReq : MR2021/00169, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 2.00, 16.00, 415.63, , , , 75, 28-10-2020, NDT150:MI20-21/00178, , PrdReq : MR2021/00171, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 5.00, 11.00, 415.63, , , , 76, 07-11-2020, NDT150:MI20-21/00204, , PrdReq : MR2021/00197, , Consumables WH, OPERATIONS, 1 mtr x 100 mtr x 40 GSM Bubble Sheet Roll, , 1.00, 10.00, 415.63, , , , 77, Sub Total, , , , , , , , , , , , , , , 78, 1/2" socket with 6mm,8mm push connector CON0063, , , , , , , , , , , , , , , 79, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 1/2" socket with 6mm,8mm push connector, 2.00, , 2.00, 64.90, , , , 80, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 1/2" socket with 6mm,8mm push connector, , 2.00, , , , , , 81, Sub Total, , , , , , , , , , , , , , , 82, 1/2,3/4x1'' Hose nipple CON0062, , , , , , , , , , , , , , , 83, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 1/2,3/4x1'' Hose nipple, 2.00, , 2.00, 58.80, , , , 84, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 1/2,3/4x1'' Hose nipple, , 2.00, , , , , , 85, Sub Total, , , , , , , , , , , , , , , 86, 10 mm magnetic nut runner (70mm) CON0033, , , , , , , , , , , , , , , 87, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 10 mm magnetic nut runner (70mm), 10.00, , 10.00, 55.00, , , , 88, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 10 mm magnetic nut runner (70mm), , 10.00, , , , , , 89, Sub Total, , , , , , , , , , , , , , , 90, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC BACC0013, , , , , , , , , , , , , , , 91, 19-10-2019, SGRD:GRND19-20S0058, BA-005, SPO : PODM19-20S0050, ADAPT AFFAIRS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, 15.00, , 15.00, 9,436.89, , , , 92, 21-10-2019, Spares:AARI1920S0000425, BA-005, NDT89 : CSO1920S00621, MARIKAR AUTOMOBILES AND SERVICES PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 14.00, 9,436.89, , , , 93, 21-10-2019, Spares:AARI1920S0000426, BA-005, NDT89 : CSO1920S00622, BRINDAVAN MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 13.00, 9,436.89, , , , 94, 21-10-2019, Spares:AARI1920S0000427, BA-005, NDT89 : CSO1920S00623, RAJKAMAL AUTOMOTIVE, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 12.00, 9,436.89, , , , 95, 21-10-2019, Spares:AARI1920S0000428, BA-005, NDT89 : CSO1920S00624, VINAYAK CARS PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 11.00, 9,436.89, , , , 96, 21-10-2019, Spares:AARI1920S0000430, BA-005, NDT89 : CSO1920S00625, Shubha Motors, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 10.00, 9,436.89, , , , 97, 21-10-2019, Spares:AARI1920S0000431, BA-005, NDT89 : CSO1920S00626, MOTO RACK LLP, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 9.00, 9,436.89, , , , 98, 21-10-2019, Spares:AARI1920S0000432, BA-005, NDT89 : CSO1920S00627, YUVRAJ MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 8.00, 9,436.89, , , , 99, 21-10-2019, Spares:AARI1920S0000433, BA-005, NDT89 : CSO1920S00628, MARWAR AUTOMOTIVES PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 7.00, 9,436.89, , , , 100, 26-10-2019, Spares:AARI1920S0000452, , NDT89 : CSO1920S00649, LAXMI MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 6.00, 9,436.89, , , , 101, 31-10-2019, Spares:AARI1920S0000457, , NDT89 : CSO1920S00667, Vihaana Motors (Unit Of Yuvraj Motors), Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 5.00, 9,436.89, , , , 102, 31-10-2019, Spares:AARI1920S0000458, , NDT89 : CSO1920S00668, REGO MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 4.00, 9,436.89, , , , 103, 29-11-2019, Spares:AARI1920S0000542, , NDT89 : CSO1920S00796, GOONCHA MOTORS public LIMITED, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 3.00, 9,436.89, , , , 104, 23-12-2019, SGRD:GRND19-20S0092, , SPO : PODM19-20S0075, ADAPT AFFAIRS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, 15.00, , 18.00, 9,489.48, , , ]"+""+" socket with 6mm,8mm push connector CON0063, , , , , , , , , , , , , , , 79, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 1/2"+"""+" socket with 6mm,8mm push connector, 2.00, , 2.00, 64.90, , , , 80, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 1/2" socket with 6mm,8mm push connector, , 2.00, , , , , , 81, Sub Total, , , , , , , , , , , , , , , 82, 1/2,3/4x1'' Hose nipple CON0062, , , , , , , , , , , , , , , 83, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 1/2,3/4x1'' Hose nipple, 2.00, , 2.00, 58.80, , , , 84, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 1/2,3/4x1'' Hose nipple, , 2.00, , , , , , 85, Sub Total, , , , , , , , , , , , , , , 86, 10 mm magnetic nut runner (70mm) CON0033, , , , , , , , , , , , , , , 87, 24-09-2019, GRNDom:GRNDMC00039, CO-001, PurOrdr : AARI/19-20/013, TESLA ENGINEERS, Consumables WH, PROJECTS, 10 mm magnetic nut runner (70mm), 10.00, , 10.00, 55.00, , , , 88, 31-03-2020, ShoStk:SHSTOCK003, , , , Consumables WH, , 10 mm magnetic nut runner (70mm), , 10.00, , , , , , 89, Sub Total, , , , , , , , , , , , , , , 90, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC BACC0013, , , , , , , , , , , , , , , 91, 19-10-2019, SGRD:GRND19-20S0058, BA-005, SPO : PODM19-20S0050, ADAPT AFFAIRS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, 15.00, , 15.00, 9,436.89, , , , 92, 21-10-2019, Spares:AARI1920S0000425, BA-005, NDT89 : CSO1920S00621, MARIKAR AUTOMOBILES AND SERVICES PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 14.00, 9,436.89, , , , 93, 21-10-2019, Spares:AARI1920S0000426, BA-005, NDT89 : CSO1920S00622, BRINDAVAN MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 13.00, 9,436.89, , , , 94, 21-10-2019, Spares:AARI1920S0000427, BA-005, NDT89 : CSO1920S00623, RAJKAMAL AUTOMOTIVE, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 12.00, 9,436.89, , , , 95, 21-10-2019, Spares:AARI1920S0000428, BA-005, NDT89 : CSO1920S00624, VINAYAK CARS PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 11.00, 9,436.89, , , , 96, 21-10-2019, Spares:AARI1920S0000430, BA-005, NDT89 : CSO1920S00625, Shubha Motors, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 10.00, 9,436.89, , , , 97, 21-10-2019, Spares:AARI1920S0000431, BA-005, NDT89 : CSO1920S00626, MOTO RACK LLP, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 9.00, 9,436.89, , , , 98, 21-10-2019, Spares:AARI1920S0000432, BA-005, NDT89 : CSO1920S00627, YUVRAJ MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 8.00, 9,436.89, , , , 99, 21-10-2019, Spares:AARI1920S0000433, BA-005, NDT89 : CSO1920S00628, MARWAR AUTOMOTIVES PVT LTD, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 7.00, 9,436.89, , , , 100, 26-10-2019, Spares:AARI1920S0000452, , NDT89 : CSO1920S00649, LAXMI MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 6.00, 9,436.89, , , , 101, 31-10-2019, Spares:AARI1920S0000457, , NDT89 : CSO1920S00667, Vihaana Motors (Unit Of Yuvraj Motors), Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 5.00, 9,436.89, , , , 102, 31-10-2019, Spares:AARI1920S0000458, , NDT89 : CSO1920S00668, REGO MOTORS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 4.00, 9,436.89, , , , 103, 29-11-2019, Spares:AARI1920S0000542, , NDT89 : CSO1920S00796, GOONCHA MOTORS public LIMITED, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, , 1.00, 3.00, 9,436.89, , , , 104, 23-12-2019, SGRD:GRND19-20S0092, , SPO : PODM19-20S0075, ADAPT AFFAIRS, Main WH, Spares, 10 X 10 FT ( EXTRA PREMIUM, 33 KGS ,840 D FABRIC, 15.00, , 18.00, 9,489.48, , , ]";
		
			System.out.println("***************************checkStockMovementReport*********************************");
			System.err.println(actreportHeader);
			System.err.println(expreportHeader);
			System.out.println("**************************************************************");
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			System.out.println("**************************************************************");
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			System.out.println("**************************************************************");
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			System.out.println("**************************************************************");
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			System.out.println("**************************************************************");
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			System.out.println("**************************************************************");
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
	
		if(actreportHeader.equalsIgnoreCase(expreportHeader) &&
				actPage1List.equalsIgnoreCase(expPage1List) &&
				actPage2List.equalsIgnoreCase(expPage2List) &&
				actPage3List.equalsIgnoreCase(expPage3List) &&
				actPage4List.equalsIgnoreCase(expPage4List) &&
				actPage5List.equalsIgnoreCase(expPage5List))
		{
			res= true;
		}
		else
		{
			res= false;
			break;
		}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();

		if(res)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
		
	 
   	
   	
   	
   	
   	
   	
   	@FindBy(xpath="//span[contains(text(),'All Items-Details')]")
   	public static WebElement allItemsDetails;
   	
   	@FindBy(xpath="//td[@id='id_ending_date__input_image']/span")
	public static WebElement endingDateCalendarBtn;
	
	@FindBy(xpath="//select[@id='id_ending_date__year']")
	public static WebElement yearDropDown;
	
	@FindBy(xpath="//select[@id='id_ending_date__month']")
	public static WebElement monthDropDown;
	
	
	@FindBy(xpath="//tbody/tr[@id='id_ending_date__day_grid']/td[1]/table[1]/tbody/tr/td")
	public static List<WebElement> dateTable;
	
	
	
	
	
	public boolean checkLogin() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
  		LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
		
		Thread.sleep(2000);
				
		lp.enterPassword(pawslt);
		
        Thread.sleep(2000);
		
		lp.clickOnSignInBtn();
		
		Thread.sleep(7000);
		
		if (true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
   	
   	
   	
   	public boolean checkPrintOptionInAllItemDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allItemsDetails));
		allItemsDetails.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllProductDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInAllProductDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedPrintInAllProductDetails.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllProductDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (resulttrue) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
	public boolean checkExportToPDFAllItemDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllProductDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInAllProductDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedAllProductDetailsPDF.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllProductDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	@FindBy(xpath="//a[@id='email_report_']")
	public static WebElement report_ExportEmailBtn;
	
	@FindBy(xpath="//input[@id='tomailId']")
	public static WebElement report_EmailReportToTxt;
	
	@FindBy(xpath="//input[@id='ccmailId']")
	public static WebElement report_EmailReportCCTxt;
	
	@FindBy(xpath="//input[@id='subjectMail']")
	public static WebElement report_EmailReportSubjectTxt;
	
	@FindBy(xpath="//input[@id='pickEmailFromcustomer']")
	public static WebElement report_EmailReportPickEmailFromCustomerChkBox;
	
	@FindBy(xpath="//input[@id='attachpdf']")
	public static WebElement report_EmailReportAttachPDFFileChkBox;
	
	@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/section[2]/div[4]/div[1]/div[1]/div[1]/div[3]/button[1]")
	public static WebElement report_EmailReportOkBtn;
	
	@FindBy(xpath="//body/section[@id='mainDiv']/div[@id='id_focus8_wrapper_default']/div[1]/section[1]/section[2]/div[4]/div[1]/div[1]/div[1]/div[3]/button[2]")
	public static WebElement report_EmailReportCancelBtn;
	
	@FindBy(xpath="//a[@id='file_report_']")
	public static WebElement report_ExportFilePathBtn;
	
	
	
	
	@FindBy(xpath="//input[@id='identifierId']")
	public static WebElement  userNameTxt;
	
    @FindBy(xpath="//div[@class='VfPpkd-RLmnJb']")
	public static WebElement  NextBtn;
	
    @FindBy(xpath="//input[@name='password']")
	public static WebElement  PasswordTxt;
    
    @FindBy(xpath="//table[@id=':2d']/tbody/tr/td[4]/div[2]/span[1]/span")
    public static List<WebElement> row1mailFromList;
	
    @FindBy(xpath="//a[contains(text(),'View entire message')]")
    public static WebElement viewEntireMessageLink;
    
    
    @FindBy(xpath="/html/body/div/div/table[2]/tbody/tr[3]/td/table/tbody/tr/td/div/font/div/table[2]/tbody/tr/td/div")
    public static List<WebElement> tableDataList;
    
    @FindBy(xpath="/html/body/div/div/table[2]/tbody/tr[3]/td/table/tbody/tr/td/div/font/div/table[1]/tbody/tr/td/font")
    public static List<WebElement> tableHeadingDataList;
    
    @FindBy(xpath="/html/body/div/div/table[2]/tbody/tr[3]/td/table/tbody/tr/td/div/font/div/table[2]/tbody/tr/td/font")
    public static List<WebElement> tableHeaderAndFooterDataList;
    
    
    @FindBy(xpath="//*[@id=':4']/div[2]/div[1]/div/div[2]/div[3]")
    public static WebElement mailDeleteButton;
    
    @FindBy(xpath="//*[@id='gb']/div[2]/div[3]/div[1]/div[2]/div/a/img")
    public static WebElement gmailUserBtn;
    
    @FindBy(xpath="//*[@id='gb_71']")
    public static WebElement gmailSignOutBtn;
  
	
	public boolean checkExportToEmailInAllItemDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(25000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
	 	
	 	Thread.sleep(2000);
	 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewEntireMessageLink));
 		viewEntireMessageLink.click();
 		
 		Thread.sleep(5000);
 		
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, All Products-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableDataListCount = tableDataList.size();
		
	 	ArrayList<String> tableDataListArray = new ArrayList<String>();
		for(int i=0;i<tableDataListCount;i++)
		{
			String data = tableDataList.get(i).getText();
			tableDataListArray.add(data);
		}

		String actTableList = tableDataList.toString();
		String expTableList = "";
	 	
		System.out.println(actTableList);
	 	System.out.println(expTableList);
	 	
	 	
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Item-Name, Quantity, Rate, Gross, Department Name, Warehouse-Name, Voucher name, Grand Total, , , 363.00, 14,941.48, 3,906.23, , , ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
   	
	
    
	
	
	
	
	
	public boolean checkExportToFilePathInAllItemDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllProductDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInAllProductDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedAllProductDetailsFilePath.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllProductDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
	@FindBy(xpath="//a[@id='70010']/span")
	public static WebElement allTransactionsOfDocumentClassDetails;

	
	
  	public boolean checkPrintOptionInAllTransactionsOfDocumentClassDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
  		LoginPage lp=new LoginPage(getDriver()); 
		
		String unamelt="su";
				      
		String pawslt="su";
				      
		lp.enterUserName(unamelt);
		
		Thread.sleep(2000);
				
		lp.enterPassword(pawslt);
		
        Thread.sleep(2000);
		
		lp.clickOnSignInBtn();
		
		Thread.sleep(7000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allTransactionsOfDocumentClassDetails));
		allTransactionsOfDocumentClassDetails.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllTransactionsOfDocumentClassDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(8000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInAllTransactionsOfDocumentClassDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedPrintInAllTransactionsOfDocumentClassDetails.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentClassDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
	public boolean checkExportToPDFInAllTransactionsOfDocumentClassDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentClassDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(8000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInAllTransactionsOfDocumentClassDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentClassDetailsPDF.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentClassDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	 
	
	
	
	
	
	
	public boolean checkExportToEmailInAllTransactionsOfDocumentClassDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(10000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
	 	
	 	Thread.sleep(2000);
	 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewEntireMessageLink));
 		viewEntireMessageLink.click();
 		
 		Thread.sleep(5000);
 		
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, All Transactions of Document Class-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableDataListCount = tableDataList.size();
	 	
	 	ArrayList<String> tableDataListArray = new ArrayList<String>();
		for(int i=0;i<tableDataListCount;i++)
		{
			String data = tableDataList.get(i).getText();
			tableDataListArray.add(data);
		}

		String actTableList = tableDataList.toString();
		String expTableList = "";
	 	
		System.out.println(actTableList);
	 	System.out.println(expTableList);
	 	
	 	
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Account1-Name, Account2-Name, Item-Name, Warehouse-Name, Quantity, Rate, Gross, Voucher name, Grand Total, , , , , , 1,495.00, 2,196.85, 20,711.00, ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
	
	
	
	public boolean checkExportToFilePathInAllTransactionsOfDocumentClassDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentClassDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInAllTransactionsOfDocumentClassDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentClassDetailsFilePath.pdf";
		String expPDF = "D:\\FocusSanity\\FocusAI\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentClassDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	@FindBy(xpath="//a[@id='70011']/span")
	public static WebElement allTransactionsOfDocumentTypeDetails;
	
	@FindBy(xpath="//*[@id='tblBodyReportRender']/tr/td")
	public static List<WebElement> tableData;
	
	
	@FindBy(xpath="//a[@id='excel_report_']")
	public static WebElement report_ExcelBtn;
	
	@FindBy(xpath="//a[@id='csv_report_']")
	public static WebElement report_CsvBtn;
	
	@FindBy(xpath="//a[@id='file_report_']")
	public static WebElement report_FileReportBtn;
			
	
	
	public boolean checkAllTransactionsOfDocumentTypeDetailsReportPagesValidations() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allTransactionsOfDocumentTypeDetails));
		allTransactionsOfDocumentTypeDetails.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		
		int tableDataCount = tableData.size();
		ArrayList<String> tableDataArray = new ArrayList<String>();
		for(int i=0;i<tableDataCount;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArray.add(data);
		}
		String acttableData = tableDataArray.toString();
		String exptableData = "[1, 14-07-2020, 1, CS2, Sales ACC, BR-BATCH, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 2, 14-07-2020, 1, CS2, Sales ACC, FIFO-BIN, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 3, 14-07-2020, 1, CS2, Sales ACC, STD, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 4, 14-07-2020, 1, CS2, Sales ACC, Stock1, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 5, 14-07-2020, 1, CS2, Sales ACC, WA-RMA, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 6, 16-07-2020, 2, CS1, Sales ACC, BR-BATCH, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 7, 16-07-2020, 2, CS1, Sales ACC, FIFO-BIN, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 8, 16-07-2020, 2, CS1, Sales ACC, STD, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 9, 16-07-2020, 2, CS1, Sales ACC, Stock1, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 10, 16-07-2020, 2, CS1, Sales ACC, WA-RMA, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 11, 17-07-2020, 3, C2, Sales - Computers, BR-BATCH1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 12, 17-07-2020, 3, C2, Sales - Computers, FIFO-BIN1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 13, 17-07-2020, 3, C2, Sales - Computers, STD1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 14, 17-07-2020, 3, C2, Sales - Computers, Stock2, C2, 5.00, 5.00, 25.00, Sales Invoices, C2]";
		
		
		System.out.println("acttableData : "+acttableData);
		System.out.println("exptableData : "+exptableData);
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportLastBtn));
		reportLastBtn.click();
		
		Thread.sleep(7000);
		
		int tableDataCountLast = tableData.size();
		ArrayList<String> tableDataArrayLast = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast.add(data);
		}
		String acttableDataLast = tableDataArrayLast.toString();
		String exptableDataLast = "[197, 23-12-2020, 23, Cash1, Sales ACC, FIFO-BIN, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 198, 23-12-2020, 23, Cash1, Sales ACC, WA-RMA, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 199, 23-12-2020, 23, Cash1, Sales ACC, STD, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 200, 23-12-2020, 23, Cash1, Sales ACC, Stock1, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 201, Grand Total, , , , , , 708.00, 4,939.65, 17,985.95, , ]";
		
		
		System.out.println("acttableDataLast : "+acttableDataLast);
		System.out.println("exptableDataLast : "+exptableDataLast);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
		report_PreviousBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountPrevious = tableData.size();
		ArrayList<String> tableDataArrayPrevious = new ArrayList<String>();
		for(int i=0;i<tableDataCountPrevious;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayPrevious.add(data);
		}
		String acttableDataPrevious = tableDataArrayPrevious.toString();
		String exptableDataPrevious = "[183, 22-12-2020, 22, Bank1, Sales ACC, BR-BATCH, HYD, 1.00, 22.00, 22.00, Sales Invoices, D2, 184, 22-12-2020, 22, Bank1, Sales ACC, STD, D2, 5.00, 55.00, 275.00, Sales Invoices, D2, 185, 22-12-2020, 22, Bank1, Sales ACC, Stock1, D2, 5.00, 55.00, 275.00, Sales Invoices, D2, 186, 22-12-2020, 22, Bank1, Sales ACC, WA-RMA, D2, 5.00, 55.00, 275.00, Sales Invoices, D2, 187, 22-12-2020, 22, Bank1, Sales ACC, FIFO-BIN, D2, 5.00, 55.00, 275.00, Sales Invoices, D2, 188, 22-12-2020, 22, Bank1, Sales ACC, BR-BATCH, D2, 4.00, 55.00, 220.00, Sales Invoices, D2, 189, 22-12-2020, 22, Bank1, Sales ACC, BR-BATCH, D2, 1.00, 55.00, 55.00, Sales Invoices, D2, 190, 23-12-2020, 23, Cash1, Sales ACC, BR-BATCH, B2, 3.00, 55.00, 165.00, Sales Invoices, A1, 191, 23-12-2020, 23, Cash1, Sales ACC, BR-BATCH, B2, 2.00, 55.00, 110.00, Sales Invoices, A1, 192, 23-12-2020, 23, Cash1, Sales ACC, FIFO-BIN, B2, 5.00, 55.00, 275.00, Sales Invoices, A1, 193, 23-12-2020, 23, Cash1, Sales ACC, STD, B2, 5.00, 55.00, 275.00, Sales Invoices, A1, 194, 23-12-2020, 23, Cash1, Sales ACC, Stock1, B2, 5.00, 55.00, 275.00, Sales Invoices, A1, 195, 23-12-2020, 23, Cash1, Sales ACC, WA-RMA, B2, 5.00, 55.00, 275.00, Sales Invoices, A1, 196, 23-12-2020, 23, Cash1, Sales ACC, BR-BATCH, A2, 5.00, 55.00, 275.00, Sales Invoices, A1]";
		
		
		System.out.println("acttableDataPrevious : "+acttableDataPrevious);
		System.out.println("exptableDataPrevious : "+exptableDataPrevious);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountNext = tableData.size();
		ArrayList<String> tableDataArrayNext = new ArrayList<String>();
		for(int i=0;i<tableDataCountNext;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayNext.add(data);
		}
		String acttableDataNext = tableDataArrayNext.toString();
		String exptableDataNext = "[197, 23-12-2020, 23, Cash1, Sales ACC, FIFO-BIN, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 198, 23-12-2020, 23, Cash1, Sales ACC, WA-RMA, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 199, 23-12-2020, 23, Cash1, Sales ACC, STD, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 200, 23-12-2020, 23, Cash1, Sales ACC, Stock1, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 201, Grand Total, , , , , , 708.00, 4,939.65, 17,985.95, , ]";
		
		
		System.out.println("acttableDataNext : "+acttableDataNext);
		System.out.println("exptableDataNext : "+exptableDataNext);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FirstBtn));
		report_FirstBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountFirst = tableData.size();
		ArrayList<String> tableDataArrayFirst = new ArrayList<String>();
		for(int i=0;i<tableDataCountFirst;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayFirst.add(data);
		}
		String acttableDataFirst = tableDataArrayFirst.toString();
		String exptableDataFirst = "[1, 14-07-2020, 1, CS2, Sales ACC, BR-BATCH, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 2, 14-07-2020, 1, CS2, Sales ACC, FIFO-BIN, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 3, 14-07-2020, 1, CS2, Sales ACC, STD, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 4, 14-07-2020, 1, CS2, Sales ACC, Stock1, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 5, 14-07-2020, 1, CS2, Sales ACC, WA-RMA, D2, 5.00, 5.00, 25.00, Sales Invoices, D2, 6, 16-07-2020, 2, CS1, Sales ACC, BR-BATCH, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 7, 16-07-2020, 2, CS1, Sales ACC, FIFO-BIN, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 8, 16-07-2020, 2, CS1, Sales ACC, STD, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 9, 16-07-2020, 2, CS1, Sales ACC, Stock1, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 10, 16-07-2020, 2, CS1, Sales ACC, WA-RMA, A1, 3.00, 16.33, 48.99, Sales Invoices, A1, 11, 17-07-2020, 3, C2, Sales - Computers, BR-BATCH1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 12, 17-07-2020, 3, C2, Sales - Computers, FIFO-BIN1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 13, 17-07-2020, 3, C2, Sales - Computers, STD1, C2, 5.00, 5.00, 25.00, Sales Invoices, C2, 14, 17-07-2020, 3, C2, Sales - Computers, Stock2, C2, 5.00, 5.00, 25.00, Sales Invoices, C2]";
		
		
		System.out.println("acttableDataFirst : "+acttableDataFirst);
		System.out.println("exptableDataFirst : "+exptableDataFirst);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
		report_LastBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountLast1 = tableData.size();
		ArrayList<String> tableDataArrayLast1 = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast1;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast1.add(data);
		}
		String acttableDataLast1 = tableDataArrayLast1.toString();
		String exptableDataLast1 = "[197, 23-12-2020, 23, Cash1, Sales ACC, FIFO-BIN, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 198, 23-12-2020, 23, Cash1, Sales ACC, WA-RMA, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 199, 23-12-2020, 23, Cash1, Sales ACC, STD, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 200, 23-12-2020, 23, Cash1, Sales ACC, Stock1, A2, 5.00, 55.00, 275.00, Sales Invoices, A1, 201, Grand Total, , , , , , 708.00, 4,939.65, 17,985.95, , ]";
		
		
		System.out.println("acttableDataLast1 : "+acttableDataLast1);
		System.out.println("exptableDataLast1 : "+exptableDataLast1);
		
		if(acttableData.equalsIgnoreCase(exptableData) && acttableDataPrevious.equalsIgnoreCase(exptableDataPrevious)
				&& acttableDataNext.equalsIgnoreCase(exptableDataNext) && acttableDataFirst.equalsIgnoreCase(exptableDataFirst)
				&& acttableDataLast1.equalsIgnoreCase(exptableDataLast1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	public boolean checkPrintOptionInAllTransactionsOfDocumentTypeDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllTransactionsOfDocumentTypeDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(8000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInAllTransactionsOfDocumentTypeDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllTransactionsOfDocumentTypeDetails.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentTypeDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
	
	


	
	
	public  boolean checkExportToExcelForAllTransactionsOfDocumentTypeDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetails.xlsx");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExcelBtn));
		report_ExcelBtn.click();
		
		Thread.sleep(5000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\AllTransactionsOfDocumentTypeDetails.exe");
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	Workbook OrginalFile = new XSSFWorkbook(getBaseDir()+"\\autoIt\\ImportFiles\\All Transactions Of Document Type Details.xlsx");
	 	Workbook Exportedfile=new XSSFWorkbook(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetails.xlsx");
	 	
	 	boolean result = excelReader.verifyDataInExcelBookAllSheets(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	
	
	
	
	
   	
   	
   	
	public boolean checkExportToPDFInAllTransactionsOfDocumentTypeDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(8000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInAllTransactionsOfDocumentTypeDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsPDF.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentTypeDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	 
	
	
	
	
	
	
	public  boolean checkExportToCsvForAllTransactionsOfDocumentClassDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsCsv.csv");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CsvBtn));
		report_CsvBtn.click();
		
		Thread.sleep(5000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\AllTransactionsOfDocumentTypeDetailsCsv.exe");
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	String OrginalFile = getBaseDir()+"\\autoIt\\ImportFiles\\All Transacrions Of Doc Type Details CSV.csv";
	 	String Exportedfile= getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsCsv.csv";
	 	
	 	boolean result = excelReader.verifyDataInCvs(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	public boolean checkExportToEmailInAllTransactionsOfDocumentTypeDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(6000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
	 	
	 	Thread.sleep(2000);
	 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewEntireMessageLink));
 		viewEntireMessageLink.click();
 		
 		Thread.sleep(5000);
 		
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, All Products By Tag-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableDataListCount = tableDataList.size();
	 	
	 	ArrayList<String> tableDataListArray = new ArrayList<String>();
		for(int i=0;i<tableDataListCount;i++)
		{
			String data = tableDataList.get(i).getText();
			tableDataListArray.add(data);
		}

		String actTableList = tableDataList.toString();
		String expTableList = "";
	 	
		System.out.println(actTableList);
	 	System.out.println(expTableList);
	 	
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Voucher name, Account1-Name, Account2-Name, Item-Name, Warehouse-Name, Quantity, Rate, Code, Gross, Department Name, Grand Total, , , , , , , 298.00, 14,710.83, , 4,531.88, ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
	
	
	
	public boolean checkExportToFilePathInAllTransactionsOfDocumentTypeDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(15000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInAllTransactionsOfDocumentTypeDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllTransactionsOfDocumentTypeDetailsFilePath.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllTransactionsOfDocumentTypeDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	@FindBy(xpath="//a[@id='70012']/span")
	public static WebElement allItemsByTagDetails;
	
	
	public boolean checkAllItemsByTagDetailsReportPagesValidations() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(allItemsByTagDetails));
		allItemsByTagDetails.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		
		int tableDataCount = tableData.size();
		ArrayList<String> tableDataArray = new ArrayList<String>();
		for(int i=0;i<tableDataCount;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArray.add(data);
		}
		String acttableData = tableDataArray.toString();
		String exptableData = "[1, 01-12-2018, 23, Purchases Vouchers, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, D1, 231.10, D1, 2, 01-12-2018, 23, Purchases Vouchers, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, D1, 231.10, D1, 3, 01-12-2018, 23, Purchases Vouchers, V2, STD-COGS1, STD, A2, 10.00, 23.11, D1, 231.10, D1, 4, 01-12-2018, 23, Purchases Vouchers, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, D1, 231.10, D1, 5, 01-12-2018, 23, Purchases Vouchers, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, D1, 231.10, D1, 6, 01-12-2018, 23, Purchases Vouchers, , Purchase Var-ACC, , A2, 0.00, 0.00, D1, 0.00, D1, 7, 01-12-2018, 23, Purchases Vouchers, V2, BR-COGS1, , A2, 0.00, 0.00, D1, 0.00, D1, 8, 01-12-2019, 24, Purchases Vouchers, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, D1, 231.10, D1, 9, 01-12-2019, 24, Purchases Vouchers, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, D1, 231.10, D1, 10, 01-12-2019, 24, Purchases Vouchers, V2, STD-COGS1, STD, A2, 10.00, 23.11, D1, 231.10, D1, 11, 01-12-2019, 24, Purchases Vouchers, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, D1, 231.10, D1, 12, 01-12-2019, 24, Purchases Vouchers, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, D1, 231.10, D1, 13, 01-12-2019, 24, Purchases Vouchers, , Purchase Var-ACC, , A2, 0.00, 0.00, D1, 0.00, D1, 14, 01-12-2019, 24, Purchases Vouchers, V2, BR-COGS1, , A2, 0.00, 0.00, D1, 0.00, D1]";
		
		
		System.out.println("acttableData : "+acttableData);
		System.out.println("exptableData : "+exptableData);
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportLastBtn));
		reportLastBtn.click();
		
		Thread.sleep(7000);
		
		int tableDataCountLast = tableData.size();
		ArrayList<String> tableDataArrayLast = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast.add(data);
		}
		String acttableDataLast = tableDataArrayLast.toString();
		String exptableDataLast = "[1639, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, A1, 11.00, A1, 1640, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, BR-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1641, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, FIFO-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1642, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STD-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1643, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STk-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1644, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, WA-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1645, Grand Total, , , , , , , 298.00, 14,710.83, , 4,531.88, ]";
		
		
		System.out.println("acttableDataLast : "+acttableDataLast);
		System.out.println("exptableDataLast : "+exptableDataLast);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
		report_PreviousBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountPrevious = tableData.size();
		ArrayList<String> tableDataArrayPrevious = new ArrayList<String>();
		for(int i=0;i<tableDataCountPrevious;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayPrevious.add(data);
		}
		String acttableDataPrevious = tableDataArrayPrevious.toString();
		String exptableDataPrevious = "[1625, 23-12-2020, 17, Purchases Returns, V1, STD-COGS1, STD, HYD, 5.00, 10.00, B2, 50.00, B2, 1626, 23-12-2020, 17, Purchases Returns, V1, STk-COGS1, Stock1, HYD, 5.00, 16.78, B2, 83.90, B2, 1627, 23-12-2020, 17, Purchases Returns, V1, WA-COGS1, WA-RMA, HYD, 5.00, 16.95, B2, 84.75, B2, 1628, 23-12-2020, 17, Purchases Returns, V1, BR-COGS1, BR-BATCH, B2, 2.00, 23.12, B2, 46.24, B2, 1629, 23-12-2020, 17, Purchases Returns, V1, FIFO-COGS1, FIFO-BIN, B2, 2.00, 20.22, B2, 40.44, B2, 1630, 23-12-2020, 17, Purchases Returns, V1, STD-COGS1, STD, B2, 2.00, 10.00, B2, 20.00, B2, 1631, 23-12-2020, 17, Purchases Returns, V1, STk-COGS1, Stock1, B2, 2.00, 16.78, B2, 33.56, B2, 1632, 23-12-2020, 17, Purchases Returns, V1, WA-COGS1, WA-RMA, B2, 2.00, 16.95, B2, 33.90, B2, 1633, 23-12-2020, 17, Purchases Returns, , COGS-ACC, , HYD, 0.00, 0.00, B2, 0.00, B2, 1634, 23-12-2020, 17, Purchases Returns, , COGS-ACC, , HYD, 0.00, 0.00, B2, 0.00, B2, 1635, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, BR-BATCH, HYD, 1.00, 11.00, A1, 11.00, A1, 1636, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, FIFO-BIN, HYD, 1.00, 11.00, A1, 11.00, A1, 1637, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, STD, HYD, 1.00, 11.00, A1, 11.00, A1, 1638, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, Stock1, HYD, 1.00, 11.00, A1, 11.00, A1]";
		
		
		System.out.println("acttableDataPrevious : "+acttableDataPrevious);
		System.out.println("exptableDataPrevious : "+exptableDataPrevious);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountNext = tableData.size();
		ArrayList<String> tableDataArrayNext = new ArrayList<String>();
		for(int i=0;i<tableDataCountNext;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayNext.add(data);
		}
		String acttableDataNext = tableDataArrayNext.toString();
		String exptableDataNext = "[1639, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, A1, 11.00, A1, 1640, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, BR-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1641, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, FIFO-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1642, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STD-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1643, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STk-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1644, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, WA-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1645, Grand Total, , , , , , , 298.00, 14,710.83, , 4,531.88, ]";
		
		
		System.out.println("acttableDataNext : "+acttableDataNext);
		System.out.println("exptableDataNext : "+exptableDataNext);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FirstBtn));
		report_FirstBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountFirst = tableData.size();
		ArrayList<String> tableDataArrayFirst = new ArrayList<String>();
		for(int i=0;i<tableDataCountFirst;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayFirst.add(data);
		}
		String acttableDataFirst = tableDataArrayFirst.toString();
		String exptableDataFirst = "[1, 01-12-2018, 23, Purchases Vouchers, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, D1, 231.10, D1, 2, 01-12-2018, 23, Purchases Vouchers, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, D1, 231.10, D1, 3, 01-12-2018, 23, Purchases Vouchers, V2, STD-COGS1, STD, A2, 10.00, 23.11, D1, 231.10, D1, 4, 01-12-2018, 23, Purchases Vouchers, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, D1, 231.10, D1, 5, 01-12-2018, 23, Purchases Vouchers, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, D1, 231.10, D1, 6, 01-12-2018, 23, Purchases Vouchers, , Purchase Var-ACC, , A2, 0.00, 0.00, D1, 0.00, D1, 7, 01-12-2018, 23, Purchases Vouchers, V2, BR-COGS1, , A2, 0.00, 0.00, D1, 0.00, D1, 8, 01-12-2019, 24, Purchases Vouchers, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, D1, 231.10, D1, 9, 01-12-2019, 24, Purchases Vouchers, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, D1, 231.10, D1, 10, 01-12-2019, 24, Purchases Vouchers, V2, STD-COGS1, STD, A2, 10.00, 23.11, D1, 231.10, D1, 11, 01-12-2019, 24, Purchases Vouchers, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, D1, 231.10, D1, 12, 01-12-2019, 24, Purchases Vouchers, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, D1, 231.10, D1, 13, 01-12-2019, 24, Purchases Vouchers, , Purchase Var-ACC, , A2, 0.00, 0.00, D1, 0.00, D1, 14, 01-12-2019, 24, Purchases Vouchers, V2, BR-COGS1, , A2, 0.00, 0.00, D1, 0.00, D1]";
		
		
		System.out.println("acttableDataFirst : "+acttableDataFirst);
		System.out.println("exptableDataFirst : "+exptableDataFirst);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
		report_LastBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountLast1 = tableData.size();
		ArrayList<String> tableDataArrayLast1 = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast1;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast1.add(data);
		}
		String acttableDataLast1 = tableDataArrayLast1.toString();
		String exptableDataLast1 = "[1639, 23-12-2020, 15, Sales Returns, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, A1, 11.00, A1, 1640, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, BR-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1641, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, FIFO-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1642, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STD-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1643, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, STk-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1644, 23-12-2020, 15, Sales Returns, Sales Ret-ACC, WA-COGS1, , HYD, 0.00, 0.00, A1, 0.00, A1, 1645, Grand Total, , , , , , , 298.00, 14,710.83, , 4,531.88, ]";
		
		
		System.out.println("acttableDataLast1 : "+acttableDataLast1);
		System.out.println("exptableDataLast1 : "+exptableDataLast1);
		
		if(acttableData.equalsIgnoreCase(exptableData) && acttableDataPrevious.equalsIgnoreCase(exptableDataPrevious)
				&& acttableDataNext.equalsIgnoreCase(exptableDataNext) && acttableDataFirst.equalsIgnoreCase(exptableDataFirst)
				&& acttableDataLast1.equalsIgnoreCase(exptableDataLast1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
   	public boolean checkPrintOptionInAllItemsByTagDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllItemsByTagDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInAllItemsByTagDetails.exe");
		
		Thread.sleep(6000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInAllItemsByTagDetails.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllItemsByTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	public  boolean checkExportToExcelForAllItemsByTagDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetails.xlsx");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExcelBtn));
		report_ExcelBtn.click();
		
		Thread.sleep(25000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\AllItemsByTagDetails.exe");
			
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	Workbook OrginalFile = new XSSFWorkbook(getBaseDir()+"\\autoIt\\ImportFiles\\All Items By Tag Details.xlsx");
	 	Workbook Exportedfile=new XSSFWorkbook(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetails.xlsx");
	 	
	 	boolean result = excelReader.verifyDataInExcelBookAllSheets(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	
	public boolean checkExportToPDFAllItemsByTagDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInAllItemsByTagDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsPDF.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllItemsByTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
   	
   	
   	
   	
   	
	public  boolean checkExportToCsvForAllItemsByTagDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsCsv.csv");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CsvBtn));
		report_CsvBtn.click();
		
		Thread.sleep(25000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\AllItemsByTagDetailsCsv.exe");
			
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	String OrginalFile = getBaseDir()+"\\autoIt\\ImportFiles\\All Items By Tag Details CSV.csv";
	 	String Exportedfile= getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsCsv.csv";
	 	
	 	boolean result = excelReader.verifyDataInCvs(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
	
	
	
	

	public boolean checkExportToEmailInAllItemsByTagDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(25000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
	 	
	 	Thread.sleep(2000);
	 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewEntireMessageLink));
 		viewEntireMessageLink.click();
 		
 		Thread.sleep(5000);
 		
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, All Products-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Item-Name, Quantity, Rate, Gross, Department Name, Warehouse-Name, Voucher name, Grand Total, , , 363.00, 14,941.48, 3,906.23, , , ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	public boolean checkExportToFilePathInAllItemsByTagDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInAllItemsByTagDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedAllItemsByTagDetailsFilePath.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedAllItemsByTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	@FindBy(xpath="//a[@id='681']/span")
	public static WebElement GeneralLedgerAndInventoryMismatchReport;
	
	@FindBy (xpath="//input[@id='MasterGroup__101']")
	public static WebElement accountTxt;
	
	@FindBy (xpath="//input[@id='MasterSingle__4']")
	public static WebElement reportWarehouseTxt;
	
	public boolean checkGeneralLedgerAndInventoryMismatchReportValidations() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(GeneralLedgerAndInventoryMismatchReport));
		GeneralLedgerAndInventoryMismatchReport.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTxt));
		accountTxt.sendKeys("Bank");
		Thread.sleep(2000);
		accountTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWarehouseTxt));
		reportWarehouseTxt.sendKeys("HYD");
		Thread.sleep(2000);
		reportWarehouseTxt.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
		sl_SelectAllItemsChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		int tableDataCount = tableData.size();
		ArrayList<String> tableDataArray = new ArrayList<String>();
		for(int i=0;i<tableDataCount;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArray.add(data);
		}
		String acttableData = tableDataArray.toString();
		String exptableData = "[1, Opening Difference, , 70.00, 0.00, 70.00, 2, Grand Total, , 70.00, , 70.00]";
		
		
		System.out.println("acttableData : "+acttableData);
		System.out.println("exptableData : "+exptableData);
		
		Thread.sleep(1000);
		
		if(acttableData.equalsIgnoreCase(exptableData))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
   	public boolean checkPrintOptionInGeneralLedgerAndInventoryMismatchReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInGeneralLedgerAndInventoryMismatchReport.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(6000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(6000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInGeneralLedgerAndInventoryMismatchReport.exe");
		
		Thread.sleep(6000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInGeneralLedgerAndInventoryMismatchReport.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedGeneralLedgerAndInventoryMismatchReport.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	public  boolean checkExportToExcelForGeneralLedgerAndInventoryMismatchReport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReport.xlsx");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExcelBtn));
		report_ExcelBtn.click();
		
		Thread.sleep(4000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\GeneralLedgerAndInventoryMismatchReport.exe");
			
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	Workbook OrginalFile = new XSSFWorkbook(getBaseDir()+"\\autoIt\\ImportFiles\\General Ledger And Inventory Mismatch Report.xlsx");
	 	Workbook Exportedfile=new XSSFWorkbook(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReport.xlsx");
	 	
	 	boolean result = excelReader.verifyDataInExcelBookAllSheets(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	
	public boolean checkExportToPDFGeneralLedgerAndInventoryMismatchReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(5000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInGeneralLedgerAndInventoryMismatchReport.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportPDF.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedGeneralLedgerAndInventoryMismatchReport.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
   	
   	
   	
   	
   	
	public  boolean checkExportToCsvForGeneralLedgerAndInventoryMismatchReport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportCsv.csv");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CsvBtn));
		report_CsvBtn.click();
		
		Thread.sleep(5000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\GeneralLedgerAndInventoryMismatchReportCsv.exe");
			
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	String OrginalFile = getBaseDir()+"\\autoIt\\ImportFiles\\General Ledger And Inventory Mismatch Report CSV.csv";
	 	String Exportedfile= getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportCsv.csv";
	 	
	 	boolean result = excelReader.verifyDataInCvs(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
	
	
	@FindBy(xpath="//div[@id=':5z']/div[2]/table/tbody/tr/td/font")
	public static List<WebElement> gmailTableDataList;
	
	

	public boolean checkExportToEmailInGeneralLedgerAndInventoryMismatchReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	int gmailTableDataListCount = gmailTableDataList.size();
		
	 	ArrayList<String> gmailTableDataListArray = new ArrayList<String>();
		for(int i=0;i<gmailTableDataListCount;i++)
		{
			String data = gmailTableDataList.get(i).getText();
			gmailTableDataListArray.add(data);
		}

		String actTableHeaderList = gmailTableDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, All Products-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
   	
	
	
	
	
	
	public boolean checkExportToFilePathInGeneralLedgerAndInventoryMismatchReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(5000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInGeneralLedgerAndInventoryMismatchReport.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedGeneralLedgerAndInventoryMismatchReportFilePath.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedGeneralLedgerAndInventoryMismatchReport.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	@FindBy(xpath="//a[@id='70013']/span")
	public static WebElement inventoryTransactionDetails;
	
	
	public boolean checkInventoryTransactionDetailsReportPagesValidations() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionDetails));
		inventoryTransactionDetails.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		
		int tableDataCount = tableData.size();
		ArrayList<String> tableDataArray = new ArrayList<String>();
		for(int i=0;i<tableDataCount;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArray.add(data);
		}
		String acttableData = tableDataArray.toString();
		String exptableData = "[1, 01-12-2018, 23, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 2, 01-12-2018, 23, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 3, 01-12-2018, 23, V2, STD-COGS1, STD, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 4, 01-12-2018, 23, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 5, 01-12-2018, 23, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 6, 01-12-2019, 24, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 7, 01-12-2019, 24, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 8, 01-12-2019, 24, V2, STD-COGS1, STD, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 9, 01-12-2019, 24, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 10, 01-12-2019, 24, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 11, 14-07-2020, 1, VS1, BR-COGS1, BR-BATCH, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 12, 14-07-2020, 1, VS1, FIFO-COGS1, FIFO-BIN, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 13, 14-07-2020, 1, VS1, STD-COGS1, STD, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 14, 14-07-2020, 1, VS1, STk-COGS1, Stock1, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers]";
		
		
		System.out.println("acttableData : "+acttableData);
		System.out.println("exptableData : "+exptableData);
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportLastBtn));
		reportLastBtn.click();
		
		Thread.sleep(7000);
		
		int tableDataCountLast = tableData.size();
		ArrayList<String> tableDataArrayLast = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast.add(data);
		}
		String acttableDataLast = tableDataArrayLast.toString();
		String exptableDataLast = "[1037, 23-12-2020, 17, V1, WA-COGS1, WA-RMA, B2, 2.00, 16.95, 33.90, B2, Purchases Returns, 1038, 23-12-2020, 15, CS1, Sales ACC, BR-BATCH, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1039, 23-12-2020, 15, CS1, Sales ACC, FIFO-BIN, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1040, 23-12-2020, 15, CS1, Sales ACC, STD, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1041, 23-12-2020, 15, CS1, Sales ACC, Stock1, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1042, 23-12-2020, 15, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1043, Grand Total, , , , , , 348.00, 14,640.83, 4,206.88, , ]";
		
		
		System.out.println("acttableDataLast : "+acttableDataLast);
		System.out.println("exptableDataLast : "+exptableDataLast);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
		report_PreviousBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountPrevious = tableData.size();
		ArrayList<String> tableDataArrayPrevious = new ArrayList<String>();
		for(int i=0;i<tableDataCountPrevious;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayPrevious.add(data);
		}
		String acttableDataPrevious = tableDataArrayPrevious.toString();
		String exptableDataPrevious = "[1023, 23-12-2020, 13, , , FIFO-BIN, B1, 5.00, 55.00, 275.00, A1, Shortages in Stock, 1024, 23-12-2020, 13, , , STD, B1, 5.00, 55.00, 275.00, A1, Shortages in Stock, 1025, 23-12-2020, 13, , , Stock1, B1, 5.00, 55.00, 275.00, A1, Shortages in Stock, 1026, 23-12-2020, 13, , , WA-RMA, B1, 5.00, 55.00, 275.00, A1, Shortages in Stock, 1027, 23-12-2020, 17, V1, BR-COGS1, BR-BATCH, HYD, 4.00, 22.13, 88.52, B2, Purchases Returns, 1028, 23-12-2020, 17, V1, BR-COGS1, BR-BATCH, HYD, 1.00, 33.00, 33.00, B2, Purchases Returns, 1029, 23-12-2020, 17, V1, FIFO-COGS1, FIFO-BIN, HYD, 5.00, 20.22, 101.10, B2, Purchases Returns, 1030, 23-12-2020, 17, V1, STD-COGS1, STD, HYD, 5.00, 10.00, 50.00, B2, Purchases Returns, 1031, 23-12-2020, 17, V1, STk-COGS1, Stock1, HYD, 5.00, 16.78, 83.90, B2, Purchases Returns, 1032, 23-12-2020, 17, V1, WA-COGS1, WA-RMA, HYD, 5.00, 16.95, 84.75, B2, Purchases Returns, 1033, 23-12-2020, 17, V1, BR-COGS1, BR-BATCH, B2, 2.00, 23.12, 46.24, B2, Purchases Returns, 1034, 23-12-2020, 17, V1, FIFO-COGS1, FIFO-BIN, B2, 2.00, 20.22, 40.44, B2, Purchases Returns, 1035, 23-12-2020, 17, V1, STD-COGS1, STD, B2, 2.00, 10.00, 20.00, B2, Purchases Returns, 1036, 23-12-2020, 17, V1, STk-COGS1, Stock1, B2, 2.00, 16.78, 33.56, B2, Purchases Returns]";
		
		
		System.out.println("acttableDataPrevious : "+acttableDataPrevious);
		System.out.println("exptableDataPrevious : "+exptableDataPrevious);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountNext = tableData.size();
		ArrayList<String> tableDataArrayNext = new ArrayList<String>();
		for(int i=0;i<tableDataCountNext;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayNext.add(data);
		}
		String acttableDataNext = tableDataArrayNext.toString();
		String exptableDataNext = "[1037, 23-12-2020, 17, V1, WA-COGS1, WA-RMA, B2, 2.00, 16.95, 33.90, B2, Purchases Returns, 1038, 23-12-2020, 15, CS1, Sales ACC, BR-BATCH, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1039, 23-12-2020, 15, CS1, Sales ACC, FIFO-BIN, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1040, 23-12-2020, 15, CS1, Sales ACC, STD, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1041, 23-12-2020, 15, CS1, Sales ACC, Stock1, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1042, 23-12-2020, 15, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1043, Grand Total, , , , , , 348.00, 14,640.83, 4,206.88, , ]";
		
		
		System.out.println("acttableDataNext : "+acttableDataNext);
		System.out.println("exptableDataNext : "+exptableDataNext);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FirstBtn));
		report_FirstBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountFirst = tableData.size();
		ArrayList<String> tableDataArrayFirst = new ArrayList<String>();
		for(int i=0;i<tableDataCountFirst;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayFirst.add(data);
		}
		String acttableDataFirst = tableDataArrayFirst.toString();
		String exptableDataFirst = "[1, 01-12-2018, 23, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 2, 01-12-2018, 23, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 3, 01-12-2018, 23, V2, STD-COGS1, STD, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 4, 01-12-2018, 23, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 5, 01-12-2018, 23, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 6, 01-12-2019, 24, V2, STk-COGS1, Stock1, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 7, 01-12-2019, 24, V2, WA-COGS1, WA-RMA, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 8, 01-12-2019, 24, V2, STD-COGS1, STD, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 9, 01-12-2019, 24, V2, FIFO-COGS1, FIFO-BIN, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 10, 01-12-2019, 24, V2, BR-COGS1, BR-BATCH, A2, 10.00, 23.11, 231.10, D1, Purchases Vouchers, 11, 14-07-2020, 1, VS1, BR-COGS1, BR-BATCH, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 12, 14-07-2020, 1, VS1, FIFO-COGS1, FIFO-BIN, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 13, 14-07-2020, 1, VS1, STD-COGS1, STD, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers, 14, 14-07-2020, 1, VS1, STk-COGS1, Stock1, D2, 10.00, 10.00, 100.00, D2, Purchases Vouchers]";
		
		
		System.out.println("acttableDataFirst : "+acttableDataFirst);
		System.out.println("exptableDataFirst : "+exptableDataFirst);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
		report_LastBtn.click();
		
		Thread.sleep(5000);
		
		int tableDataCountLast1 = tableData.size();
		ArrayList<String> tableDataArrayLast1 = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast1;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast1.add(data);
		}
		String acttableDataLast1 = tableDataArrayLast1.toString();
		String exptableDataLast1 = "[1037, 23-12-2020, 17, V1, WA-COGS1, WA-RMA, B2, 2.00, 16.95, 33.90, B2, Purchases Returns, 1038, 23-12-2020, 15, CS1, Sales ACC, BR-BATCH, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1039, 23-12-2020, 15, CS1, Sales ACC, FIFO-BIN, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1040, 23-12-2020, 15, CS1, Sales ACC, STD, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1041, 23-12-2020, 15, CS1, Sales ACC, Stock1, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1042, 23-12-2020, 15, CS1, Sales ACC, WA-RMA, HYD, 1.00, 11.00, 11.00, A1, Sales Returns, 1043, Grand Total, , , , , , 348.00, 14,640.83, 4,206.88, , ]";
		
		
		System.out.println("acttableDataLast1 : "+acttableDataLast1);
		System.out.println("exptableDataLast1 : "+exptableDataLast1);
		
		if(acttableData.equalsIgnoreCase(exptableData) && acttableDataPrevious.equalsIgnoreCase(exptableDataPrevious)
				&& acttableDataNext.equalsIgnoreCase(exptableDataNext) && acttableDataFirst.equalsIgnoreCase(exptableDataFirst)
				&& acttableDataLast1.equalsIgnoreCase(exptableDataLast1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	public boolean checkPrintOptionInInventoryTransactionDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInInventoryTransactionDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\PrintInInventoryTransactionDetails.exe");
		
		Thread.sleep(6000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInInventoryTransactionDetails.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	public  boolean checkExportToExcelForInventoryTransactionDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetails.xlsx");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExcelBtn));
		report_ExcelBtn.click();
		
		Thread.sleep(25000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\InventoryTransactionDetails.exe");
			
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	Workbook OrginalFile = new XSSFWorkbook(getBaseDir()+"\\autoIt\\ImportFiles\\Inventory Transaction Details.xlsx");
	 	Workbook Exportedfile=new XSSFWorkbook(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetails.xlsx");
	 	
	 	boolean result = excelReader.verifyDataInExcelBookAllSheets(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	
	public boolean checkExportToPDFInInventoryTransactionDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\ExportPDFInInventoryTransactionDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsPDF.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
   	
   	
   	
   	
   	
	public  boolean checkExportToCsvForInventoryTransactionDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsCsv.csv");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CsvBtn));
		report_CsvBtn.click();
		
		Thread.sleep(25000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
		
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\InventoryTransactionDetailsCsv.exe");
			
		
		Thread.sleep(10000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	String OrginalFile = getBaseDir()+"\\autoIt\\ImportFiles\\Inventory Transaction Details CSV.csv";
	 	String Exportedfile= getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsCsv.csv";
	 	
	 	boolean result = excelReader.verifyDataInCvs(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
	
	
	
	

	public boolean checkExportToEmailInInventoryTransactionDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(25000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
	 	
	 	Thread.sleep(2000);
	 		
 		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(viewEntireMessageLink));
 		viewEntireMessageLink.click();
 		
 		Thread.sleep(5000);
 		
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, Inventory Transactions-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Account1-Name, Account2-Name, Item-Name, Warehouse-Name, Quantity, Rate, Gross, Department Name, Voucher name, Grand Total, , , , , , 348.00, 14,640.83, 4,206.88, , ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
   	
	
	
	
	
	public boolean checkExportToFilePathInInventoryTransactionDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(25000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\scripts\\ExportFilePathInInventoryTransactionDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionDetailsFilePath.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	@FindBy(xpath="//*[@id=':5p']")
	public static WebElement printallBtn;
	
	
	
	
	@FindBy(xpath="//a[@id='70015']/span")
	public static WebElement inventoryTransactionsOfAccountingTagDetails;
	
	
	public boolean checkInventoryTransactionsOfAccountingTagDetailsReportPagesValidations() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getAction().sendKeys(Keys.END).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsOfAccountingTagDetails));
		inventoryTransactionsOfAccountingTagDetails.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(endingDateCalendarBtn));
		endingDateCalendarBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(yearDropDown));
		Select year = new Select (yearDropDown);
		year.selectByValue("2020");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthDropDown));
		Select month = new Select (monthDropDown);
		month.selectByValue("11");
		
		int dateTableCount = dateTable.size();
		
		for(int i=0;i<dateTableCount;i++)
		{
			String data = dateTable.get(i).getText();
			
			if(data.equalsIgnoreCase("29"))
			{
				dateTable.get(i).click();
				break;
			}

		}
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_WarehouseTxt)); //Department
		sl_WarehouseTxt.sendKeys("A2");
		Thread.sleep(2000);
		sl_WarehouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(3000);
		
		int tableDataCount = tableData.size();
		ArrayList<String> tableDataArray = new ArrayList<String>();
		for(int i=0;i<tableDataCount;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArray.add(data);
		}
		String acttableData = tableDataArray.toString();
		String exptableData = "[1, 04-11-2020, 18, VS1, STk-COGS1, Stock1, A1, 10.00, 4.11, 41.10, A2, 2, 04-11-2020, 18, VS1, STD-COGS1, STD, A1, 10.00, 4.11, 41.10, A2, 3, 04-11-2020, 18, VS1, BR-COGS1, BR-BATCH, A1, 10.00, 4.11, 41.10, A2, 4, 04-11-2020, 18, VS1, BR-COGS1, BR-BATCH, A2, 10.00, 4.12, 41.20, A2, 5, 04-11-2020, 18, VS1, WA-COGS1, WA-RMA, A2, 10.00, 4.12, 41.20, A2, 6, 04-11-2020, 18, VS1, WA-COGS1, WA-RMA, A1, 10.00, 4.11, 41.10, A2, 7, 04-11-2020, 18, VS1, FIFO-COGS1, FIFO-BIN, A1, 10.00, 4.11, 41.10, A2, 8, 04-11-2020, 18, VS1, STk-COGS1, Stock1, A2, 10.00, 4.12, 41.20, A2, 9, 04-11-2020, 18, VS1, STD-COGS1, STD, A2, 10.00, 4.12, 41.20, A2, 10, 04-11-2020, 18, VS1, FIFO-COGS1, FIFO-BIN, A2, 10.00, 4.12, 41.20, A2, 11, 04-11-2020, 11, VS1, Sales ACC, Stock1, A1, -5.00, 55.00, 275.00, A2, 12, 04-11-2020, 11, VS1, Sales ACC, STD, A1, -5.00, 55.00, 275.00, A2, 13, 04-11-2020, 11, VS1, Sales ACC, FIFO-BIN, A1, -5.00, 55.00, 275.00, A2, 14, 04-11-2020, 11, VS1, Sales ACC, BR-BATCH, A1, -4.00, 55.00, 220.00, A2]";
		
		
		System.out.println("acttableData : "+acttableData);
		System.out.println("exptableData : "+exptableData);
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportLastBtn));
		reportLastBtn.click();
		
		Thread.sleep(2000);
		
		int tableDataCountLast = tableData.size();
		ArrayList<String> tableDataArrayLast = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast.add(data);
		}
		String acttableDataLast = tableDataArrayLast.toString();
		String exptableDataLast = "[29, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A2, -1.00, 7.02, 7.02, A2, 30, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A1, -1.00, 7.02, 7.02, A2, 31, 04-11-2020, 11, VS1, BR-COGS1, BR-BATCH, A1, -1.00, 4.11, 4.11, A2, 32, 04-11-2020, 11, VS1, WA-COGS1, WA-RMA, A2, -1.00, 9.59, 9.59, A2, 33, 04-11-2020, 9, VS1, Sales ACC, STD, A1, 1.00, 55.00, 55.00, A2, 34, 04-11-2020, 9, VS1, Sales ACC, FIFO-BIN, A1, 1.00, 55.00, 55.00, A2, 35, 04-11-2020, 9, VS1, Sales ACC, BR-BATCH, A1, 1.00, 55.00, 55.00, A2, 36, 04-11-2020, 9, VS1, Sales ACC, WA-RMA, A1, 1.00, 55.00, 55.00, A2, 37, 04-11-2020, 9, VS1, Sales ACC, Stock1, A1, 1.00, 55.00, 55.00, A2, 38, Grand Total, , , , , , 45.00, 1,056.54, 2,143.89, ]";
		
		
		System.out.println("acttableDataLast : "+acttableDataLast);
		System.out.println("exptableDataLast : "+exptableDataLast);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
		report_PreviousBtn.click();
		
		Thread.sleep(2000);
		
		int tableDataCountPrevious = tableData.size();
		ArrayList<String> tableDataArrayPrevious = new ArrayList<String>();
		for(int i=0;i<tableDataCountPrevious;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayPrevious.add(data);
		}
		String acttableDataPrevious = tableDataArrayPrevious.toString();
		String exptableDataPrevious = "[15, 04-11-2020, 11, VS1, Sales ACC, BR-BATCH, A1, -1.00, 55.00, 55.00, A2, 16, 04-11-2020, 11, VS1, Sales ACC, WA-RMA, A2, -5.00, 55.00, 275.00, A2, 17, 04-11-2020, 11, VS1, Sales ACC, Stock1, A2, -5.00, 55.00, 275.00, A2, 18, 04-11-2020, 11, VS1, Sales ACC, STD, A2, -5.00, 55.00, 275.00, A2, 19, 04-11-2020, 11, VS1, Sales ACC, FIFO-BIN, A2, -5.00, 55.00, 275.00, A2, 20, 04-11-2020, 11, VS1, Sales ACC, BR-BATCH, A2, -4.00, 55.00, 220.00, A2, 21, 04-11-2020, 11, VS1, Sales ACC, BR-BATCH, A2, -1.00, 55.00, 55.00, A2, 22, 04-11-2020, 11, VS1, Sales ACC, WA-RMA, A1, -5.00, 55.00, 275.00, A2, 23, 04-11-2020, 11, VS1, STk-COGS1, Stock1, A2, -1.00, 9.47, 9.47, A2, 24, 04-11-2020, 11, VS1, STk-COGS1, Stock1, A1, -1.00, 9.47, 9.47, A2, 25, 04-11-2020, 11, VS1, STD-COGS1, STD, A2, -1.00, 10.00, 10.00, A2, 26, 04-11-2020, 11, VS1, STD-COGS1, STD, A1, -1.00, 10.00, 10.00, A2, 27, 04-11-2020, 11, VS1, BR-COGS1, BR-BATCH, A2, -1.00, 4.12, 4.12, A2, 28, 04-11-2020, 11, VS1, WA-COGS1, WA-RMA, A1, -1.00, 9.59, 9.59, A2]";
		
		
		System.out.println("acttableDataPrevious : "+acttableDataPrevious);
		System.out.println("exptableDataPrevious : "+exptableDataPrevious);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int tableDataCountNext = tableData.size();
		ArrayList<String> tableDataArrayNext = new ArrayList<String>();
		for(int i=0;i<tableDataCountNext;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayNext.add(data);
		}
		String acttableDataNext = tableDataArrayNext.toString();
		String exptableDataNext = "[29, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A2, -1.00, 7.02, 7.02, A2, 30, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A1, -1.00, 7.02, 7.02, A2, 31, 04-11-2020, 11, VS1, BR-COGS1, BR-BATCH, A1, -1.00, 4.11, 4.11, A2, 32, 04-11-2020, 11, VS1, WA-COGS1, WA-RMA, A2, -1.00, 9.59, 9.59, A2, 33, 04-11-2020, 9, VS1, Sales ACC, STD, A1, 1.00, 55.00, 55.00, A2, 34, 04-11-2020, 9, VS1, Sales ACC, FIFO-BIN, A1, 1.00, 55.00, 55.00, A2, 35, 04-11-2020, 9, VS1, Sales ACC, BR-BATCH, A1, 1.00, 55.00, 55.00, A2, 36, 04-11-2020, 9, VS1, Sales ACC, WA-RMA, A1, 1.00, 55.00, 55.00, A2, 37, 04-11-2020, 9, VS1, Sales ACC, Stock1, A1, 1.00, 55.00, 55.00, A2, 38, Grand Total, , , , , , 45.00, 1,056.54, 2,143.89, ]";
		
		
		System.out.println("acttableDataNext : "+acttableDataNext);
		System.out.println("exptableDataNext : "+exptableDataNext);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FirstBtn));
		report_FirstBtn.click();
		
		Thread.sleep(2000);
		
		int tableDataCountFirst = tableData.size();
		ArrayList<String> tableDataArrayFirst = new ArrayList<String>();
		for(int i=0;i<tableDataCountFirst;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayFirst.add(data);
		}
		String acttableDataFirst = tableDataArrayFirst.toString();
		String exptableDataFirst = "[1, 04-11-2020, 18, VS1, STk-COGS1, Stock1, A1, 10.00, 4.11, 41.10, A2, 2, 04-11-2020, 18, VS1, STD-COGS1, STD, A1, 10.00, 4.11, 41.10, A2, 3, 04-11-2020, 18, VS1, BR-COGS1, BR-BATCH, A1, 10.00, 4.11, 41.10, A2, 4, 04-11-2020, 18, VS1, BR-COGS1, BR-BATCH, A2, 10.00, 4.12, 41.20, A2, 5, 04-11-2020, 18, VS1, WA-COGS1, WA-RMA, A2, 10.00, 4.12, 41.20, A2, 6, 04-11-2020, 18, VS1, WA-COGS1, WA-RMA, A1, 10.00, 4.11, 41.10, A2, 7, 04-11-2020, 18, VS1, FIFO-COGS1, FIFO-BIN, A1, 10.00, 4.11, 41.10, A2, 8, 04-11-2020, 18, VS1, STk-COGS1, Stock1, A2, 10.00, 4.12, 41.20, A2, 9, 04-11-2020, 18, VS1, STD-COGS1, STD, A2, 10.00, 4.12, 41.20, A2, 10, 04-11-2020, 18, VS1, FIFO-COGS1, FIFO-BIN, A2, 10.00, 4.12, 41.20, A2, 11, 04-11-2020, 11, VS1, Sales ACC, Stock1, A1, -5.00, 55.00, 275.00, A2, 12, 04-11-2020, 11, VS1, Sales ACC, STD, A1, -5.00, 55.00, 275.00, A2, 13, 04-11-2020, 11, VS1, Sales ACC, FIFO-BIN, A1, -5.00, 55.00, 275.00, A2, 14, 04-11-2020, 11, VS1, Sales ACC, BR-BATCH, A1, -4.00, 55.00, 220.00, A2]";
		
		
		System.out.println("acttableDataFirst : "+acttableDataFirst);
		System.out.println("exptableDataFirst : "+exptableDataFirst);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_LastBtn));
		report_LastBtn.click();
		
		Thread.sleep(2000);
		
		int tableDataCountLast1 = tableData.size();
		ArrayList<String> tableDataArrayLast1 = new ArrayList<String>();
		for(int i=0;i<tableDataCountLast1;i++)
		{
			String data = tableData.get(i).getText();
			tableDataArrayLast1.add(data);
		}
		String acttableDataLast1 = tableDataArrayLast1.toString();
		String exptableDataLast1 = "[29, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A2, -1.00, 7.02, 7.02, A2, 30, 04-11-2020, 11, VS1, FIFO-COGS1, FIFO-BIN, A1, -1.00, 7.02, 7.02, A2, 31, 04-11-2020, 11, VS1, BR-COGS1, BR-BATCH, A1, -1.00, 4.11, 4.11, A2, 32, 04-11-2020, 11, VS1, WA-COGS1, WA-RMA, A2, -1.00, 9.59, 9.59, A2, 33, 04-11-2020, 9, VS1, Sales ACC, STD, A1, 1.00, 55.00, 55.00, A2, 34, 04-11-2020, 9, VS1, Sales ACC, FIFO-BIN, A1, 1.00, 55.00, 55.00, A2, 35, 04-11-2020, 9, VS1, Sales ACC, BR-BATCH, A1, 1.00, 55.00, 55.00, A2, 36, 04-11-2020, 9, VS1, Sales ACC, WA-RMA, A1, 1.00, 55.00, 55.00, A2, 37, 04-11-2020, 9, VS1, Sales ACC, Stock1, A1, 1.00, 55.00, 55.00, A2, 38, Grand Total, , , , , , 45.00, 1,056.54, 2,143.89, ]";
		
		
		System.out.println("acttableDataLast1 : "+acttableDataLast1);
		System.out.println("exptableDataLast1 : "+exptableDataLast1);
		
		if(acttableData.equalsIgnoreCase(exptableData) && acttableDataPrevious.equalsIgnoreCase(exptableDataPrevious)
				&& acttableDataNext.equalsIgnoreCase(exptableDataNext) && acttableDataFirst.equalsIgnoreCase(exptableDataFirst)
				&& acttableDataLast1.equalsIgnoreCase(exptableDataLast1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	public boolean checkPrintOptionInInventoryTransactionsOfAccountingTagDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInInventoryTransactionsOfAccountingTagDetails.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PrintBtn));
		report_PrintBtn.click();
        
        Thread.sleep(4000);

        Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\PrintInInventoryTransactionsOfAccountingTagDetails.exe");
		
		Thread.sleep(4000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedPrintInInventoryTransactionsOfAccountingTagDetails.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionsOfAccountingTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (true) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	

	
	
	
	
	
	
   	public  boolean checkExportToExcelForInventoryTransactionsOfAccountingTagDetailsReport() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetails.xlsx");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExcelBtn));
		report_ExcelBtn.click();
		
		Thread.sleep(4000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\InventoryTransactionsOfAccountingTagDetails.exe");
			
		Thread.sleep(5000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	Workbook OrginalFile = new XSSFWorkbook(getBaseDir()+"\\autoIt\\ImportFiles\\Inventory Transactions Of Accounting Tag Details.xlsx");
	 	Workbook Exportedfile=new XSSFWorkbook(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetails.xlsx");
	 	
	 	boolean result = excelReader.verifyDataInExcelBookAllSheets(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
   	
   	
   	
   	
   	
	public boolean checkExportToPDFInInventoryTransactionsOfAccountingTagDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsPDF.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportPDFBtn));
        report_ExportPDFBtn.click();
        
        Thread.sleep(4000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(3000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportPDFInInventoryTransactionsOfAccountingTagDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsPDF.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionsOfAccountingTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	public  boolean checkExportToCsvForInventoryTransactionsOfAccountingTagDetails() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsCsv.csv");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
		report_ExportBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CsvBtn));
		report_CsvBtn.click();
		
		Thread.sleep(4000);
		
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_F12);
		robot.keyRelease(KeyEvent.VK_F12);
		
		Thread.sleep(2000);
			
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\InventoryTransactionsOfAccountingTagDetailsCsv.exe");
			
		Thread.sleep(8000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected : "+expOpenWindowsCount);
		
		Thread.sleep(2000);

	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(2000);
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	ExcelReader excelReader = new ExcelReader(POJOUtility.getExcelPath());
	 	
	 	String OrginalFile = getBaseDir()+"\\autoIt\\ImportFiles\\Inventory Transactions Of Accounting Tag Details CSV.csv";
	 	String Exportedfile= getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsCsv.csv";
	 	
	 	boolean result = excelReader.verifyDataInCvs(OrginalFile, Exportedfile);
	 	
	 	System.err.println("LATEST METHOD : "+result);
	 	
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
   	
   	
   	
	
	
	
	

	public boolean checkExportToEmailInInventoryTransactionsOfAccountingTagDetailsReport() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportEmailBtn));
        report_ExportEmailBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportToTxt));
        report_EmailReportToTxt.sendKeys("focuspurchasetest@gmail.com");
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_EmailReportOkBtn));
        report_EmailReportOkBtn.click();
        
        Thread.sleep(2000);
        
        String expMessage = "Mail sent successfully";
        
        String actMessage = checkValidationMessage(expMessage);
        
        Thread.sleep(2000);
        
        Robot robot = new Robot();   
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		
		Thread.sleep(2000);
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("openTabs"+openTabs);

	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	getDriver().switchTo().window(openTabs.get(1));
	 	
	 	Thread.sleep(2000);
	 	
	 	String Gmail = "https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession";
	 	
	 	getDriver().get(Gmail);
        
	 	Thread.sleep(4000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
	 	userNameTxt.click();
	 	
	 	userNameTxt.sendKeys("focuspurchasetest@gmail.com");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PasswordTxt));
	 	PasswordTxt.click();
	 	
	 	PasswordTxt.sendKeys("focuspurchasetest@hyd");
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(NextBtn));
	 	NextBtn.click();
	 	
	 	Thread.sleep(8000);
	 	
	 	int count = row1mailFromList.size();
	 	
	 	for (int i = 0; i < count; i++) 
	 	{
	 		String mailFromTxt = row1mailFromList.get(i).getText();
	 		
	 		if (mailFromTxt.equalsIgnoreCase("rathod")) 
	 		{
	 			row1mailFromList.get(i).click();
	 			break;
			}
		}
	 	
	 	Thread.sleep(3000);
	 	
	 	printallBtn.click();
	 	
	 	Thread.sleep(2000);
	 	
		robot.keyPress(KeyEvent.VK_ESCAPE);
		robot.keyRelease(KeyEvent.VK_ESCAPE);
	 	
	 	Thread.sleep(2000);
	 	
 		ArrayList<String> newTab = new ArrayList<String>(getDriver().getWindowHandles());

	 	System.out.println("Tabs"+newTab);

	 	getDriver().switchTo().window(newTab.get(2));
	 	
	 	
	 	int tableHeadingDataListCount = tableHeadingDataList.size();
		
	 	ArrayList<String> tableHeadingDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeadingDataListCount;i++)
		{
			String data = tableHeadingDataList.get(i).getText();
			tableHeadingDataListArray.add(data);
		}

		String actTableHeaderList = tableHeadingDataListArray.toString();
		String expTableHeaderList = "[User Restrictions--COGS, Inventory Transactions of Accounting Tag-Details, [ DateRange01/04/2018 to 29/12/2020 ]]";
	 	
	 	System.out.println(actTableHeaderList);
	 	System.out.println(expTableHeaderList);
		
	 	
	 	int tableHeaderAndFooterDataListCount = tableHeaderAndFooterDataList.size();
		
	 	ArrayList<String> tableHeaderAndFooterDataListArray = new ArrayList<String>();
		for(int i=0;i<tableHeaderAndFooterDataListCount;i++)
		{
			String data = tableHeaderAndFooterDataList.get(i).getText();
			tableHeaderAndFooterDataListArray.add(data);
		}

		String acttableHeaderAndFooterDataList = tableHeaderAndFooterDataListArray.toString();
		String exptableHeaderAndFooterDataList = "[Date, Document Number, Account1-Name, Account2-Name, Item-Name, Warehouse-Name, Quantity, Rate, Gross, Department-Name, Grand Total, , , , , , 45.00, 1,056.54, 2,143.89, ]";
	 	
		System.out.println(acttableHeaderAndFooterDataList);
	 	System.out.println(exptableHeaderAndFooterDataList);
	 	
		
	 	getDriver().switchTo().window(newTab.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(2)).close();
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(newTab.get(1));
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mailDeleteButton));
	 	mailDeleteButton.click();
	 	
	 	Thread.sleep(2000);
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailUserBtn));
	 	gmailUserBtn.click();
	 	
	 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gmailSignOutBtn));
	 	gmailSignOutBtn.click();
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
	 	Thread.sleep(2000);
	 	
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	
	 	Thread.sleep(1000);
	 	
	 	getDriver().switchTo().window(openTabs.get(0));
	 	
        if (actMessage.equalsIgnoreCase(expMessage) && actTableHeaderList.equalsIgnoreCase(expTableHeaderList) 
        		&& acttableHeaderAndFooterDataList.equalsIgnoreCase(exptableHeaderAndFooterDataList)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
   	
   	
	
	
	
	
	public boolean checkExportToFilePathInInventoryTransactionsOfAccountingTagDetails() throws Exception, EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsFilePath.pdf");
		
		if(Efile.exists())
		{
			Efile.delete();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportBtn));
        report_ExportBtn.click();
        
        Thread.sleep(2000);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ExportFilePathBtn));
        report_ExportFilePathBtn.click();
        
        Thread.sleep(4000);

        Robot robot = new Robot();
        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
			
		Thread.sleep(2000);
		
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		robot.keyPress(KeyEvent.VK_TAB);
		robot.keyRelease(KeyEvent.VK_TAB);
		
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		
		Thread.sleep(2000);
			
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_S);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
		
		Runtime.getRuntime().exec(getBaseDir() + "\\autoIt\\Script\\ExportFilePathInInventoryTransactionsOfAccountingTagDetails.exe");
		
		Thread.sleep(5000);
		
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_J);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		
		Thread.sleep(2000);
			
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 3;
		
		System.out.println("Number of Windows  : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
		
		Thread.sleep(1000);

	 	getDriver().switchTo().window(openTabs.get(2)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(1)).close();
	 	Thread.sleep(1000);
	 	getDriver().switchTo().window(openTabs.get(0));
		 	
	 	String actPDF = getBaseDir()+"\\autoIt\\ExportFiles\\ExportedInventoryTransactionsOfAccountingTagDetailsFilePath.pdf";
		String expPDF = getBaseDir()+"\\autoIt\\Prints\\ExpectedInventoryTransactionsOfAccountingTagDetails.pdf";
		
		PDFUtil pdfutil = new PDFUtil();
		
		boolean result = pdfutil.compare(actPDF, expPDF);
		
		System.out.println("Compared Result  : "+result);
		
		Thread.sleep(2000);
			
		if (result) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	@FindBy(xpath="//a[@id='203']/span")
	public static WebElement raiseIndentItem;
	
	@FindBy(xpath="//select[@id='cmbItemFilter']")
	public static WebElement ri_ItemFilter;
	
	@FindBy(xpath="//*[@id='chkPurchaseOrders']")
	public static WebElement includePurchaseOrderChkBox;
	
	@FindBy(xpath="//*[@id='chkSalesOrder']")
	public static WebElement includeSalesOrderChkBox;
	
	@FindBy(xpath="//select[@id='cmbBranchtag']")
	public static WebElement ri_BranchOption;
	
	
	@FindBy(xpath="//*[@id='RaiseInvTag0']")
	public static WebElement ri_WarehouseTxt;
	
	
	@FindBy(xpath="//*[@id='Supplier0']")
	public static WebElement ri_SupplierTxt;
	
	
	@FindBy(xpath="//*[@id='productQuery0']")
	public static WebElement ri_ItemGroupTxt;
	
	@FindBy(xpath="//*[@id='btnLaod']")
	public static WebElement ri_LoadBtn;
	
	@FindBy(xpath="//select[@id='cmbRaiseVoucher']")
	public static WebElement ri_RaiseVoucherOption;
	
	@FindBy(xpath="//select[@id='cmbPostingOptions']")
	public static WebElement ri_PostVoucherOption;
	
	@FindBy(xpath="//*[@id='MandatorySupp']")
	public static WebElement mandatorySupplierChkBox;
	
	
	@FindBy(xpath="//*[@id='Raiselabel0']")
	public static WebElement raisePurchaseOrderBtn;
	
	
	@FindBy(xpath="//*[@id='myNavbar']//span[3]")
	public static WebElement exporttoExcelBtn;
	
	@FindBy(xpath="//*[@id='myNavbar']//span[4]")
	public static WebElement ri_closeBtn;
	
	@FindBy(xpath="//*[@id='260']")
	public static WebElement raiseRequestforQuote;
	
	@FindBy(xpath="//*[@id='product']")
	public static WebElement requestforQuoteItemTxt;
	
	@FindBy(xpath="//*[@id='Chcksimilarproducts']")
	public static WebElement clubSimilarProductChkBox;
	
	@FindBy(xpath="//*[@id='btnLaod']")
	public static WebElement requestforQuoteLoadBtn;
	
	
	@FindBy(xpath="//*[@id='myNavbar']//span[3]")
	public static WebElement requestQuoteCloseBtn;
	
	
	
	@FindBy(xpath="//*[@id='681']")
	public static WebElement generalLedgerandInventoryMismatch;
	
	
	@FindBy(xpath="//*[@id='703']")
	public static WebElement negativeBatchList;
	
	////Raise Indent Item
	
	public boolean checkRaiseIndentItemwithLowStockReport() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getAction().sendKeys(Keys.END).build().perform();
		getAction().moveToElement(raiseIndentItem).build().perform();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseIndentItem));
		raiseIndentItem.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_ItemFilter));
		Select s=new Select(ri_ItemFilter);
		s.selectByIndex(0);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includePurchaseOrderChkBox));
		includePurchaseOrderChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeSalesOrderChkBox));
		includeSalesOrderChkBox.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_BranchOption));
		ri_BranchOption.click();
		Select s1=new Select(ri_BranchOption);
		s1.selectByIndex(0);
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_WarehouseTxt));
		ri_WarehouseTxt.click();
		ri_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		ri_WarehouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_SupplierTxt));
		ri_SupplierTxt.click();
		ri_SupplierTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		ri_SupplierTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_ItemGroupTxt));
		ri_ItemGroupTxt.click();
		ri_ItemGroupTxt.sendKeys("Item Group");
		Thread.sleep(2000);
		ri_ItemGroupTxt.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_LoadBtn));
		ri_LoadBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_RaiseVoucherOption));
		ri_RaiseVoucherOption.click();
		Select s2=new Select(ri_RaiseVoucherOption);
		s2.selectByIndex(0);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ri_PostVoucherOption));
		ri_PostVoucherOption.click();
		Select s3=new Select(ri_PostVoucherOption);
		s3.selectByIndex(0);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mandatorySupplierChkBox));
		mandatorySupplierChkBox.click();
		
		return true;
		
	}
	
	
	public boolean checkRaiseRequestForQuoteReport() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getAction().sendKeys(Keys.END).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(raiseRequestforQuote));
		raiseRequestforQuote.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(requestforQuoteItemTxt));
		requestforQuoteItemTxt.sendKeys("");
		requestforQuoteItemTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clubSimilarProductChkBox));
		clubSimilarProductChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(requestforQuoteLoadBtn));
		requestforQuoteLoadBtn.click();
		Thread.sleep(2000);
		return true;
	
	}
	
	@FindBy(xpath="//input[@id='RITCheckbox__5']")
	public static WebElement excludeStockTransferChkBox;
	
	public boolean checkGeneralLedgerandInventoryMismatchReport() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		Thread.sleep(2000);
		
		getAction().sendKeys(Keys.END).build().perform();
		getAction().moveToElement(generalLedgerandInventoryMismatch).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalLedgerandInventoryMismatch));
		generalLedgerandInventoryMismatch.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(1);
		Thread.sleep(2000);
		
		getAction().moveToElement(stockAgeingAnalysisWarehouseTxt).build().perform();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisWarehouseTxt));
		stockAgeingAnalysisWarehouseTxt.click();
		
		stockAgeingAnalysisWarehouseTxt.sendKeys("Assets");
		Thread.sleep(2000);
		stockAgeingAnalysisWarehouseTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportWarehouseTxt));
		reportWarehouseTxt.click();
		reportWarehouseTxt.sendKeys("Hyderabad");
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
		sl_IncludeServiceTypeItemChkBox.click();
		sl_IncludeServiceTypeItemChkBox.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excludeStockTransferChkBox));
		excludeStockTransferChkBox.click();
		Thread.sleep(2000);
		
		getAction().moveToElement(sl_SelectAllItemsChkBox).build().perform();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
		sl_SelectAllItemsChkBox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		Thread.sleep(2000);
		
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Opening Difference, 0, 144.00, , 144.00]";
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[Payments VAT, 0, , 63.00, 63.00]";
		
		
		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List = "[PDP VAT, 0, , 12.00, 12.00]";
		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List = "[Debit Notes VAT, 0, , 31.50, 31.50]";
		
		
		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List = "[JV VAT View, 0, , 31.50, 31.50]";
		
		
		
		int reportsRow6ListCount = reportsRow6List.size();
		ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow6ListCount;i++)
		{
			String data = reportsRow6List.get(i).getText();
			reportsRow6ListArray.add(data);
		}
		String actRow6List = reportsRow6ListArray.toString();
		String expRow6List = "[PDR VAT, 0, , 12.29, 12.29]";
		
		
		
		int reportsRow7ListCount = reportsRow7List.size();
		ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow7ListCount;i++)
		{
			String data = reportsRow7List.get(i).getText();
			reportsRow7ListArray.add(data);
		}
		String actRow7List = reportsRow7ListArray.toString();
		String expRow7List = "[Payments, 0, , 12.00, 12.00]";
		
		
		
		int reportsRow8ListCount = reportsRow8List.size();
		ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow8ListCount;i++)
		{
			String data = reportsRow8List.get(i).getText();
			reportsRow8ListArray.add(data);
		}
		String actRow8List = reportsRow8ListArray.toString();
		String expRow8List = "[Receipts VAT, 0, , 100.00, 100.00]";
		
		
		
		int reportsRow9ListCount = reportsRow9List.size();
		ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow9ListCount;i++)
		{
			String data = reportsRow9List.get(i).getText();
			reportsRow9ListArray.add(data);
		}
		String actRow9List = reportsRow9ListArray.toString();
		String expRow9List = "[Credit Notes VAT, 0, , 50.00, 50.00]";
		
		

		int reportsRow10ListCount = reportsRow10List.size();
		ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow10ListCount;i++)
		{
			String data = reportsRow10List.get(i).getText();
			reportsRow10ListArray.add(data);
		}
		String actRow10List = reportsRow10ListArray.toString();
		String expRow10List = "[Receipts, 0, , 12.00, 12.00]";
		
		
		
		int reportsRow11ListCount = reportsRow11List.size();
		ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow11ListCount;i++)
		{
			String data = reportsRow11List.get(i).getText();
			reportsRow11ListArray.add(data);
		}
		String actRow11List = reportsRow11ListArray.toString();
		String expRow11List = "[, 29/05/2022, 1,377.91, 544.00, 833.91]";
		
		
		
		int reportsRow12ListCount = reportsRow12List.size();
		ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow12ListCount;i++)
		{
			String data = reportsRow12List.get(i).getText();
			reportsRow12ListArray.add(data);
		}
		String actRow12List = reportsRow12ListArray.toString();
		String expRow12List = "[Grand Total, , 1,521.91, 531.29, 1,302.20]";
		
		
		System.out.println("************************checkGeneralLedgerandInventoryMismatchReport********************************");
	
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		System.out.println(actRow6List);
		System.out.println(expRow6List);
		
		System.out.println(actRow7List);
		System.out.println(expRow7List);
		
		System.out.println(actRow8List);
		System.out.println(expRow8List);
		
		System.out.println(actRow9List);
		System.out.println(expRow9List);
		
		System.out.println(actRow10List);
		System.out.println(expRow10List);
		
		System.out.println(actRow11List);
		System.out.println(expRow11List);
		
		System.out.println(actRow12List);
		System.out.println(expRow12List);
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
			&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
			&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List))
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			return false;
		}
		
				
	}
	
	public boolean checkNegativeBatchListReport() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		Thread.sleep(2000);
		
		getAction().sendKeys(Keys.END).build().perform();
		getAction().moveToElement(negativeBatchList).build().perform();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(negativeBatchList));
		negativeBatchList.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
		sl_SelectAllItemsChkBox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		Thread.sleep(2000);
		
		return true;
	}
	
	@FindBy(xpath="(//i[contains(@class,'icon-font6 icon-custamize')])[2]")
	public static WebElement sl_CustomizeBtn1;
	
	
	@FindBy(xpath="//*[@id='FormattingbyRow']")
	public static WebElement sl_CustomizeFormattingRowBtn;
	
	@FindBy(xpath="//*[@id='rfnew']")
	public static WebElement sl_CustomizeFormattingRowNewBtn;
	
	@FindBy(xpath="//*[@id='rfdelete']")
	public static WebElement sl_CustomizeFormattingRowDeleteBtn;
	
	@FindBy(xpath="//*[@id='a']")
	public static WebElement sl_CustomizeFormattingRowFilterBtn;
	
	
	@FindBy(xpath="//*[@id='id_rc_rowformatting_1']")
	public static WebElement sl_CustomizeFormattingRowNew;
	
	@FindBy(xpath="//*[@id='551_10_AdvanceFilter_Customize']/table/tbody/tr/td[1]/select")
	public static WebElement sl_CustomizeFormattingRowConjunction;
	
	@FindBy(xpath="(//input[@class='Ftxtbox'])[5]")
	public static WebElement sl_CustomizeFormattingRowTextField;
	
	@FindBy(xpath="//*[@id='551_10_AdvanceFilter_Customize']/table/tbody/tr/td[3]/select")
	public static WebElement sl_CustomizeFormattingRowOperator;
	
	@FindBy(xpath="//*[@id='551_10_AdvanceFilter_Customize']/table/tbody/tr/td[4]/select")
	public static WebElement sl_CustomizeFormattingRowCompare;
	
	@FindBy(xpath="(//input[@class='Ftxtbox'])[6]")
	public static WebElement sl_CustomizeFormattingRowValueField;
	
	@FindBy(xpath="//*[@id='advancefilter_date_551_10_Customize_input_image']/span")
	public static WebElement sl_CustomizeFormattingRowValueCal;
	
	@FindBy(xpath="//select[@id='id_set_on_column']")
	public static WebElement sl_CustomizeFormattingRowSetonColumn;
	
	
	@FindBy(xpath="//input[@id='id_rf_font']")
	public static WebElement sl_CustomizeFormattingRowFontBtn;

	
	
	@FindBy(xpath="//select[@id='fontForeColor_id_rc_rowformatting_fontcontrol7']")
	public static WebElement sl_CustomizeFormattingRowForeColour;

	
	
	@FindBy(xpath="//*[@id='RC_RF_ModalFont']//div[3]/div/button[1]")
	public static WebElement sl_CustomizeFormattingRowFontOkBtn;

	
	
	@FindBy(xpath="//*[@id='id_ApplyOnColumn']")
	public static WebElement sl_CustomizeFormattingRowApplyonColChkBox;
	
		
	@FindBy(xpath="//*[@id='rfok']")
	public static WebElement sl_CustomizeFormattingRowOkBtn;

	
	
	public boolean checkStockLedgerReportwithCustomizationFormattingRow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
		inventoryReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
		stockLedger.click();
		
		Thread.sleep(2000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 1; i <= rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("WA COGS ITEM"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByIndex(1);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeBtn1));
		sl_CustomizeBtn1.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowBtn));
		sl_CustomizeFormattingRowBtn.click();
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowNewBtn));
		sl_CustomizeFormattingRowNewBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowNew));
		sl_CustomizeFormattingRowNew.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowFilterBtn));
		sl_CustomizeFormattingRowFilterBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowConjunction));
		sl_CustomizeFormattingRowConjunction.click();
		Select s1=new Select(sl_CustomizeFormattingRowConjunction);
		s1.selectByValue("1");
		Thread.sleep(2000);
		sl_CustomizeFormattingRowConjunction.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowTextField));
		sl_CustomizeFormattingRowTextField.click();
		sl_CustomizeFormattingRowTextField.sendKeys("Date");
		sl_CustomizeFormattingRowTextField.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowOperator));
		Select s2=new Select(sl_CustomizeFormattingRowOperator);
		s2.selectByValue("0");
		Thread.sleep(2000);
		sl_CustomizeFormattingRowOperator.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowCompare));
		
		Select s3=new Select(sl_CustomizeFormattingRowCompare);
		s3.selectByValue("0");
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowCompare));
		sl_CustomizeFormattingRowCompare.click();
		sl_CustomizeFormattingRowCompare.sendKeys(Keys.TAB);
		
		
	
		
		Calendar cal=Calendar.getInstance();
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		String currentDate = df.format(cal.getTime());
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowValueField));
		sl_CustomizeFormattingRowValueField.sendKeys(currentDate);
		Thread.sleep(2000);
		sl_CustomizeFormattingRowValueField.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowSetonColumn));
		Select s4=new Select(sl_CustomizeFormattingRowSetonColumn);
		s4.selectByValue("2");
		Thread.sleep(2000);
		sl_CustomizeFormattingRowSetonColumn.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowFontBtn));
		sl_CustomizeFormattingRowFontBtn.click();
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowForeColour));
		sl_CustomizeFormattingRowForeColour.click();
		Select s5=new Select(sl_CustomizeFormattingRowForeColour);
		s5.selectByValue("-5952982");
		//s5.selectByVisibleText(" Brown ");
		Thread.sleep(2000);
		sl_CustomizeFormattingRowForeColour.sendKeys(Keys.TAB);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowFontOkBtn));
		sl_CustomizeFormattingRowFontOkBtn.click();
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowApplyonColChkBox));
		sl_CustomizeFormattingRowApplyonColChkBox.click();
		Thread.sleep(2000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CustomizeFormattingRowOkBtn));
		sl_CustomizeFormattingRowOkBtn.click();
		Thread.sleep(2000);
		
		
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[WA COGS ITEM WA COGS ITEM]";
		
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[Opening Balance, 24.00, , , , 24.00, , , 84.00, 3.50, , , ]";
		
		
		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List = "[NDT57:SU/IND/TEXT5, 12.00, 10.50, , , 36.00, 126.00, , 210.00, 5.83, , , ]";
		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List = "[NDT57:SU/IND/TEXT5, 10.00, 10.50, , , 46.00, 105.00, , 315.00, 6.85, , , ]";
		
		
		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List = "[ExeStk:2, 10.00, 10.00, , , 56.00, 100.00, , 415.00, 7.41, , , ]";
		
		
		
		int reportsRow6ListCount = reportsRow6List.size();
		ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow6ListCount;i++)
		{
			String data = reportsRow6List.get(i).getText();
			reportsRow6ListArray.add(data);
		}
		String actRow6List = reportsRow6ListArray.toString();
		String expRow6List = "[StkTrf:2, , , 10.00, 7.41, 46.00, , 74.11, 340.89, 7.41, , , ]";
		
		
		
		int reportsRow7ListCount = reportsRow7List.size();
		ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow7ListCount;i++)
		{
			String data = reportsRow7List.get(i).getText();
			reportsRow7ListArray.add(data);
		}
		String actRow7List = reportsRow7ListArray.toString();
		String expRow7List = "[StkTrf:2, 10.00, 7.41, , , 56.00, 74.11, , 415.00, 7.41, , , ]";
		
		
		
		int reportsRow8ListCount = reportsRow8List.size();
		ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow8ListCount;i++)
		{
			String data = reportsRow8List.get(i).getText();
			reportsRow8ListArray.add(data);
		}
		String actRow8List = reportsRow8ListArray.toString();
		String expRow8List = "[NDT50:5, , , 3.00, 7.41, 53.00, , 22.23, 392.77, 7.41, , , ]";
		
		
		
		int reportsRow9ListCount = reportsRow9List.size();
		ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow9ListCount;i++)
		{
			String data = reportsRow9List.get(i).getText();
			reportsRow9ListArray.add(data);
		}
		String actRow9List = reportsRow9ListArray.toString();
		String expRow9List = "[NDT50:7, , , 10.00, 7.41, 43.00, , 74.11, 318.66, 7.41, , , ]";
		
		
		
		int reportsRow10ListCount = reportsRow10List.size();
		ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow10ListCount;i++)
		{
			String data = reportsRow10List.get(i).getText();
			reportsRow10ListArray.add(data);
		}
		String actRow10List = reportsRow10ListArray.toString();
		String expRow10List = "[Reserved stock, , , 43.00, , , , , , , , , ]";
		
		
		
		int reportsRow11ListCount = reportsRow11List.size();
		ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow11ListCount;i++)
		{
			String data = reportsRow11List.get(i).getText();
			reportsRow11ListArray.add(data);
		}
		String actRow11List = reportsRow11ListArray.toString();
		String expRow11List = "[Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
		
		
		
		int reportsRow12ListCount = reportsRow12List.size();
		ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow12ListCount;i++)
		{
			String data = reportsRow12List.get(i).getText();
			reportsRow12ListArray.add(data);
		}
		String actRow12List = reportsRow12ListArray.toString();
		String expRow12List = "[Grand Total, , 66.00, 38.41, 66.00, 22.23, , 405.11, 170.45, 318.66, 53.23, , , ]";
		
		
		
		
		System.out.println("************************************checkStockLedgerReport********************************************");
	
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		System.out.println(actRow6List);
		System.out.println(expRow6List);
		
		System.out.println(actRow7List);
		System.out.println(expRow7List);
		
		System.out.println(actRow8List);
		System.out.println(expRow8List);
		
		System.out.println(actRow9List);
		System.out.println(expRow9List);
		
		System.out.println(actRow10List);
		System.out.println(expRow10List);
		
		System.out.println(actRow11List);
		System.out.println(expRow11List);
		
		System.out.println(actRow12List);
		System.out.println(expRow12List);
		
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
			&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
			&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	
	public InventoryReportsPage(WebDriver driver) 
	{
		PageFactory.initElements(driver, this);
	}
	
	
	

}
*/